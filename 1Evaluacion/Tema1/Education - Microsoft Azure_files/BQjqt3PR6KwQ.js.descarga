define("MsPortalImpl/Services/LazyUserData/LazyUserData.Deferred",["require","exports","MsPortalImpl/Resources/ImplScriptResources","MsPortalImpl/Services/Services.BrowserSettings","MsPortalImpl/Services/Services.GlobalResourceFilters","MsPortalImpl/Services/Services.Settings","MsPortalImpl/Services/Services.SubscriptionsDeferred","FxHubs/HubsSettingsSchema","Fx/Ajax","Weave"],(function(e,t,r,a,s,i,n,o,c,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEV=t.getServiceHealthAlerts=t.getLazyUserData=t.serviceHealthAlertsQuery=void 0;var u=MsPortalFx.Base.Diagnostics.Telemetry;const p=MsPortalFx.Base.Diagnostics.createLog(e);let d=MsPortalFx.isFeatureEnabled("argsubscriptions"),g=MsPortalFx.isFeatureEnabled("pollservicehealthalerts");const v={0:"None",4:"NotAbleToCalculate",2:"Partial",1:"Total"},y={count:{value:0,type:"Partial"},error:null,nextLink:null,value:[]};async function m(e){let t;try{t=await(0,i.readUserSettings)(e,[o.Keys.subscriptionsSelected],6)}catch(e){return p.warning(`Error fetching selected subscriptions from user settings. Error details: ${MsPortalFx.getLogFriendlyMessage(e)}`),[]}if(!t)return[];return((t[o.Keys.subscriptionsSelected]||"").split(";")||[]).reduce(((e,t)=>{const r=t.trim().toLowerCase();return r&&e.push(r),e}),[])}async function b(e,t){return d&&!e.get(a.ServiceDependencyState).azureResourceGraphUnavailable.value?await async function(e){const t=u.start({source:"LazyUserDataProviderDeferred",action:"validateSubscriptionsWithArg"}),r=e||[];if(!r.length)return u.completeTrace(t,{subscriptionIdCount:r.length,validatedCount:0}),[];const a=await(0,n.fetchSubscriptionsFromArg)({includeProperties:!0,telemetryHeader:"LazyUserDataProviderDeferred.GetSubscriptions",subscriptionFilterIds:r});return"Success"===a.resultCode?(u.completeTrace(t,{subscriptionIdCount:r.length,validatedCount:a.subscriptions.length}),a.subscriptions):(u.endTrace(t,"failure",{subscriptionIdCount:r.length,validatedCount:0}),[])}(t):await async function(e){const t=u.start({source:"LazyUserDataProviderDeferred",action:"validateSubscriptionsWithArm"}),r=e||[];if(!r.length)return u.completeTrace(t,{subscriptionIdCount:r.length,validatedCount:0}),[];let a=0;const s=r.reduce(((e,t)=>{const r=e[a]||[];return r.length<20?(r.push(t),e[a]=r):(a++,e.push([t])),e}),[]);try{const e=await(0,c.batchMultiple)({batchRequests:s.map(((e,t)=>({uri:`${MsPortalFx.isFeatureEnabled("subscriptionpromotions")?"/subscriptions/?api-version=2022-01-01":"/subscriptions/?api-version=2018-06-01"}&$filter=${e.map((e=>`subscriptionId eq '${e}'`)).join(" or ")}`,requestHeaderDetails:{commandName:`LazyUserDataProviderDeferred.validateSubscriptions.${t}`}}))),telemetryHeader:"LazyUserDataProviderDeferred.validateSubscriptionsWithArm"}),a=[],i=[];if((e.responses||[]).forEach((e=>{if(200===e.httpStatusCode){const t=e.content;a.push(...t.value||[])}else i.push({error:MsPortalFx.getLogFriendlyMessage(e.content),statusCode:e.httpStatusCode})})),u.completeTrace(t,{failedCalls:i,subscriptionIdCount:r.length,validatedCount:a.length}),i.length===s.length)throw new Error(JSON.stringify(i));return a}catch(e){return u.endTrace(t,"failure",{error:MsPortalFx.getLogFriendlyMessage(e),subscriptionIdCount:r.length,validatedCount:0}),[]}}(t)}async function h(e,t){const r=u.start({source:"LazyUserDataProviderDeferred",action:"getFirstPageAndSelectedSubscriptions"});let a;try{a=await async function(){const e=u.start({source:"LazyUserDataProviderDeferred",action:"getFirstPageSubscriptions"});try{const t=await(0,c.batch)({uri:(MsPortalFx.isFeatureEnabled("subscriptionpromotions")?"/subscriptions/?api-version=2022-01-01":"/subscriptions/?api-version=2018-06-01")+"&$expand=inherited",setTelemetryHeader:"LazyUserDataProviderDeferred.GetSubscriptions",options:8}),r=t.headers["x-ms-correlation-request-id"]||"";if(200===t.httpStatusCode){const a=t.content||{},s=a.count||{};return u.completeTrace(e,{armCount:s.value,armCountType:s.type,countOfSubsReturned:(a.value||[]).length,armCorrelationId:r}),a}return u.endTrace(e,"failure",{error:MsPortalFx.getLogFriendlyMessage(t.content),statusCode:t.httpStatusCode,armCorrelationId:r}),y}catch(t){throw u.endTrace(e,"failure",{error:MsPortalFx.getLogFriendlyMessage(t)}),t}}()}catch(e){return{valueMapById:Object.create(null),count:{value:0,type:"Partial"},resultCode:"Failure_Unknown",exception:e}}if(!a)return{valueMapById:Object.create(null),resultCode:"Failure_Unknown"};const s=Object.create(null),i=Object.create(null),n=a.value||[];n.forEach((e=>{const t=e.subscriptionId||"";i[t.toLowerCase()]=t,s[t]={notInFirstPage:!1,subscription:e}}));const o=await m(t),l=Object.create(null);(o||[]).forEach((e=>{i[e]||(l[e]=!0)}));const p=Object.keys(l);let d=0;if(p.length){(await b(e,p)).forEach((e=>{d++,s[e.subscriptionId]={notInFirstPage:!0,subscription:e}}))}return u.completeTrace(r,{fetchedSubscriptionsCount:n.length+d,listResponseCount:(a.count||{}).value}),{valueMapById:s,count:a.count,resultCode:"Success"}}async function S(r,s){const i=u.start({source:"LazyUserDataProviderDeferred",action:"getServiceHealthAlerts"});if(!r?.length||!d)return u.completeTrace(i,{alertCount:0,subscriptionIdsCount:0,useArgToValidate:d}),[];try{const n={query:t.serviceHealthAlertsQuery,subscriptions:r,options:{$top:1e3,resultFormat:"objectArray"}},o=await MsPortalFx.require(e.normalize("FxHubs/ArtHelpers/ArtApis")),c=await Promise.resolve(o?.getDataFromArt(n,"LazyUserDataProviderDeferred.GetServiceHealthAlerts")).catch((async e=>{e?.httpStatusCode>=500&&((await s.getAsync(a.ServiceDependencyState)).azureResourceGraphUnavailable(!0),p.error("ServiceErrorFromArg received from LazyUserDataProviderDeferred"))})),l=c?.data||[];return u.completeTrace(i,{alertCount:l.length,resultCount:c.count}),l}catch(e){u.endTrace(i,"failure",{error:MsPortalFx.getLogFriendlyMessage(e)})}return[]}t.serviceHealthAlertsQuery='servicehealthresources\r\n| where type == "microsoft.resourcehealth/events"\r\n| project eventType = tostring(properties.EventType), status = properties.Status, description = properties.Title, trackingId = properties.TrackingId, summary = properties.Summary, priority = toint(properties.Priority), impactStartTime = properties.ImpactStartTime, impactMitigationTime = properties.ImpactMitigationTime, lastUpdateTime = properties.LastUpdateTime\r\n| where (eventType == "ServiceIssue" and status == "Active" and impactStartTime > ago(3d)) or (eventType == "SecurityAdvisory" and impactMitigationTime > now() and impactStartTime > ago(28d) and lastUpdateTime > ago(3d))\r\n| summarize arg_max(todatetime(lastUpdateTime), *) by eventType, priority\r\n| summarize arg_max(priority * -1, *) by eventType\r\n| project-away max_',t.getLazyUserData=async function(e){let t,o=[];if(e.fetchFirstPageAndSelectedSubscriptions){const{diContainer:c}=e;if(await e.useAdvancedFiltersPromise){t=await async function(e){const t=new FxImpl.TriggerableLifetimeManager,i=await e.getAsync(s.ResourceFilterManager);let o=(0,l.evaluate)(t,i.currentFilter);const c=e.get(a.ServiceDependencyState);if(c.azureResourceGraphUnavailable.value){i.activateFilter(""),o=(0,l.evaluate)(t,i.currentFilter),t.dispose();const e=await MsPortalFx.require("Fx/Notifications"),a=e?.publishPendingNotification({title:r.subscriptionErrorTitle,description:r.noSubsArgFallbackMessageInProgress,linkTo:"#settings/filters"});try{const e=await(0,n.loadAllSubscriptionsFromArm)();return a?.complete({description:r.noSubsArgFallbackMessage,status:1}),{valueMapById:e.subscriptionsMap,resultCode:"Success",count:{type:v[e.countData.type]||"Unknown",value:e.countData.value}}}catch(e){return p.error(new MsPortalFx.Errors.Error({message:`Failed to fetch all subscriptions from ARM (ARG fallback). Error thrown: ${MsPortalFx.getLogFriendlyMessage(e)}`,innerErrors:e})),{valueMapById:Object.create(null),resultCode:"Failure_Unknown",count:{type:"Unknown",value:0},exception:e}}}t.dispose();let u=await(0,n.fetchFilteredSubscriptions)(e,o);const d=u.countData;0===d.type&&c.azureResourceGraphUnavailable.value&&(u=await(0,n.fetchFilteredSubscriptions)(e,null));const g=2===d.type&&0===d.value;return{valueMapById:u.subscriptionsMap,resultCode:g?"Failure_Unknown":"Success",count:{type:v[d.type]||"Unknown",value:d.value}}}(c);const e=Object.keys(t.valueMapById);o=g?await S(e,c):null}else{const e=await c.getAsync(i.SettingsManager);[t,o]=await Promise.all([h(c,e),g?S(await m(e),c):null])}}return{firstPageSubscriptions:t,serviceHealthAlerts:o}},t.getServiceHealthAlerts=S}));