define("MsPortalImpl/Auth/RpcHandlers",["require","exports","FxInternal/AsyncLoader","MsPortalImpl/Services/Services.ExtensionTokensManager","MsPortalImpl/Services/Services.SecurityTokens","ShellWorker/AuthorizationState"],(function(e,n,t,o,r,a){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getSshCertTokenEndPoint=n.getPopTokenEndPoint=n.getNewTokenHandler=n.getAuthorizationTokenForChallengeEndPoint=n.getAuthorizationTokenEndPoint=void 0;var i=FxImpl.Extension;n.getAuthorizationTokenEndPoint=t.defineHandler(i.getAuthorizationTokenEndPoint,(e=>{const n=e.messageArg;return e.diContainer.get(o.ExtensionTokensManager).getSecurityToken({extensionName:e.messageContext.srcWindowId,resourceName:n.resourceName||"",isBackground:n.isBackground,skipCache:n.skipCache,wwwAuthHeader:n.wwwAuthHeader,authConfigStamp:n.authConfigStamp,audience:n.audience,tenantId:n.tenantId})})),n.getAuthorizationTokenForChallengeEndPoint=t.defineHandler(i.getAuthorizationTokenForChallengeEndPoint,(e=>{const n=e.messageArg;return e.diContainer.get(r.SecurityTokensManager).getAuthorizationTokenForChallenge({currentAuthorizationHeader:n.currentAuthorizationHeader,wwwAuthHeader:n.wwwAuthHeader}).then((e=>e?.token))})),n.getNewTokenHandler=t.defineHandler(a.getAuthorizationTokenForShellWorkerEndPoint,(e=>e.diContainer.get(o.ExtensionTokensManager).getSecurityToken({extensionName:e.messageArg.extensionName,resourceName:e.messageArg.resourceName,isBackground:!1,skipCache:!1}).then((e=>e.token)))),n.getPopTokenEndPoint=t.defineHandler(i.getPopTokenEndPoint,(async e=>{const n=e.messageArg,t=e.messageContext.srcWindowId;if(!n)return Promise.reject("Incomplete parameters provided when requesting a PoP token.");const{scopes:o,resourceRequestMethod:a,resourceRequestUri:i,shrClaims:s,shrNonce:d}=n,u=e.diContainer.get(r.SecurityTokensManager),g=await u.getPopToken({extensionName:t,scopes:o,resourceRequestMethod:a,resourceRequestUri:i,shrClaims:s,shrNonce:d});let c=0;return g.authHeader&&(c=g.expiresAt),{token:{header:g.authHeader,expiresAt:c},error:g.status,errorMessage:g.errorMessage}})),n.getSshCertTokenEndPoint=t.defineHandler(i.getSshCertTokenEndPoint,(async e=>{const n=e.diContainer.get(r.SecurityTokensManager),t=e.messageArg,o=e.messageContext.srcWindowId,a=((await MsPortalEarly.extensionAuthMetadataInPortalConfig)[o.toLowerCase()]||{}).oAuthClientId;return n.getSshCertToken({audience:t.audience,extensionClientId:a,jwk:t.jwk,kid:t.kid})}))}));