define("MsPortalImpl/UI/UI.BladeOpenerImpl",["require","exports","Fx/DependencyInjection","Fx/Composition/Selectable","FxInternal/AsyncLoader","MsPortalImpl/Base/Base.Selectable2","MsPortalImpl/Extension/Extension.Definition.Locator","MsPortalImpl/UI/UI.HelpPaneState","MsPortalImpl/UI/UI.JourneyManager","MsPortalImpl/UI/Compositions/UI.Composition.BladeOpener","MsPortalImpl/UI/Compositions/UI.Composition.BladeOpenerBase"],(function(e,t,a,n,s,l,o,r,i,c,p){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BladeOpener=void 0;let d=class{constructor(e,t){this._diContainer=e,this._helpPaneState=t}async openBlade(e,t={}){const{selectable:a,container:n,flags:s,selectedItem:l,telemetryName:o,context:r}=t,i=t.timestamp||Date.now(),c=MsPortalFx.getUniqueId();Q.isPromiseAlike(e)&&(this.requestOpenBlade(a,n,{timestamp:i,bladeReference:void 0,reason:4,flags:s,operationId:c,context:r}),e=await e);return(await this.requestOpenBlade(a,n,{timestamp:i,bladeReference:e,reason:3,operationId:c,flags:MsPortalFx.isNullOrUndefined(s)?2:s,selectedItem:l,telemetryName:o,context:r})).success}async requestOpenBlade(e,t,a){if(!e&&t&&(e=u(t)),(64&a.flags||128&a.flags)&&this._helpPaneState.isOpen()){const e=await this._diContainer.getAsync(s.get("MsPortalImpl/UI/UI.HelpPane","HelpPane"));await Promise.resolve(128&a.flags?e.minimize():e.close())}if(8&a.flags){const t=this._diContainer.get(m);e=512&a.flags?t.sidebar:32&a.flags?t.helpPane:1024&a.flags?t.dockedContextPane:t.selectable}else(!e||16&a.flags&&4&~a.flags)&&(e=await async function(e){const t=e.get(i.JourneyManager).activeJourney(),a=MsPortalFx.find(t?.children,(e=>!!(1&~e.flags)),-1);if(a){!a.isComposed&&await a.await(7);const e=a.children[0].children[0];return u((await e.getViewModelAsync()).container)}return e.get(m).selectable}(this._diContainer));const n=(o=e,21298===FxImpl.shellInterface(o)?.type?(0,l.getOrCreate)(this._diContainer,e):e);var o;return await n.processRequest(a)}};t.BladeOpener=d,t.BladeOpener=d=__decorate([__metadata("fx:diagnostics",[e,"BladeOpener"]),a.Class(),__metadata("design:paramtypes",[a.Container,r.HelpPaneState])],d);let m=class{constructor(e,t){this._diContainer=e,this._viewModel={selectable:new n.Selectable2({supplyBladeReferenceAsync:MsPortalFx.noop}),helpPane:new n.Selectable2({supplyBladeReferenceAsync:MsPortalFx.noop}),sidebar:new n.Selectable2({supplyBladeReferenceAsync:MsPortalFx.noop}),dockedContextPane:new n.Selectable2({supplyBladeReferenceAsync:MsPortalFx.noop}),internal:{selectable:ko.observable()}};const a=e.createChildContainer("composition");a.set(p.OpenerConfiguration,{masterModel:this._viewModel,masterModelId:"UI.BladeOpener",referenceComposition:null,referenceExtension:t.locate(o.Locator.forExtension("HubsExtension")),isBladeOpenedByMaster:()=>!0,configureBladeDescriptor:MsPortalFx.noop}),this._opener=a.get(c.BladeOpener),this._createSelectable("selectable"),this._createSelectable("helpPane"),this._createSelectable("sidebar"),this._createSelectable("dockedContextPane")}_createSelectable(e){this[e]=(0,l.getOrCreate)(this._diContainer,this._viewModel[e]),this._opener.registerInvocationProperty({invocationInputArguments:[{valuesFrom:[{referenceType:0,property:e}]}]})}};m=__decorate([__metadata("fx:diagnostics",[e,"SelectableContainer"]),a.Class(),__metadata("design:paramtypes",[a.Container,o.DefinitionFinder])],m);const f="_msPortalFxOpenBladeSelectable";function u(e){return e[f]}}));