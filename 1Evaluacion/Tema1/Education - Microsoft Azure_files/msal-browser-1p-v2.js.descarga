/*! @azure/msal-browser-1p v2.37.0 2023-05-02 */
'use strict';
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.msalv2 = {}));
})(this, (function (exports) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$2 = function(d, b) {
        extendStatics$2 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics$2(d, b);
    };

    function __extends$2(d, b) {
        extendStatics$2(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$2 = function() {
        __assign$2 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$2.apply(this, arguments);
    };

    function __rest$1(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$2(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$2(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$1(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread$1() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read$1(arguments[i]));
        return ar;
    }

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign$1 = function() {
        __assign$1 = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign$1.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var Constants = {
        LIBRARY_NAME: "MSAL.JS",
        SKU: "msal.js.common",
        // Prefix for all library cache entries
        CACHE_PREFIX: "msal",
        // default authority
        DEFAULT_AUTHORITY: "https://login.microsoftonline.com/common/",
        DEFAULT_AUTHORITY_HOST: "login.microsoftonline.com",
        DEFAULT_COMMON_TENANT: "common",
        // ADFS String
        ADFS: "adfs",
        DSTS: "dstsv2",
        // Default AAD Instance Discovery Endpoint
        AAD_INSTANCE_DISCOVERY_ENDPT: "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=",
        // CIAM URL
        CIAM_AUTH_URL: ".ciamlogin.com",
        AAD_TENANT_DOMAIN_SUFFIX: ".onmicrosoft.com",
        // Resource delimiter - used for certain cache entries
        RESOURCE_DELIM: "|",
        // Placeholder for non-existent account ids/objects
        NO_ACCOUNT: "NO_ACCOUNT",
        // Claims
        CLAIMS: "claims",
        // Consumer UTID
        CONSUMER_UTID: "9188040d-6c67-4c5b-b112-36a304b66dad",
        // Default scopes
        OPENID_SCOPE: "openid",
        PROFILE_SCOPE: "profile",
        OFFLINE_ACCESS_SCOPE: "offline_access",
        EMAIL_SCOPE: "email",
        // Default response type for authorization code flow
        CODE_RESPONSE_TYPE: "code",
        CODE_GRANT_TYPE: "authorization_code",
        RT_GRANT_TYPE: "refresh_token",
        FRAGMENT_RESPONSE_MODE: "fragment",
        S256_CODE_CHALLENGE_METHOD: "S256",
        URL_FORM_CONTENT_TYPE: "application/x-www-form-urlencoded;charset=utf-8",
        AUTHORIZATION_PENDING: "authorization_pending",
        NOT_DEFINED: "not_defined",
        EMPTY_STRING: "",
        NOT_APPLICABLE: "N/A",
        FORWARD_SLASH: "/",
        IMDS_ENDPOINT: "http://169.254.169.254/metadata/instance/compute/location",
        IMDS_VERSION: "2020-06-01",
        IMDS_TIMEOUT: 2000,
        AZURE_REGION_AUTO_DISCOVER_FLAG: "TryAutoDetect",
        REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: "login.microsoft.com",
        REGIONAL_AUTH_NON_MSI_QUERY_STRING: "allowestsrnonmsi=true",
        KNOWN_PUBLIC_CLOUDS: ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"],
        TOKEN_RESPONSE_TYPE: "token",
        ID_TOKEN_RESPONSE_TYPE: "id_token",
        SHR_NONCE_VALIDITY: 240,
        INVALID_INSTANCE: "invalid_instance",
    };
    var OIDC_DEFAULT_SCOPES = [
        Constants.OPENID_SCOPE,
        Constants.PROFILE_SCOPE,
        Constants.OFFLINE_ACCESS_SCOPE
    ];
    var OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [
        Constants.EMAIL_SCOPE
    ]);
    /**
     * Request header names
     */
    var HeaderNames;
    (function (HeaderNames) {
        HeaderNames["CONTENT_TYPE"] = "Content-Type";
        HeaderNames["RETRY_AFTER"] = "Retry-After";
        HeaderNames["CCS_HEADER"] = "X-AnchorMailbox";
        HeaderNames["WWWAuthenticate"] = "WWW-Authenticate";
        HeaderNames["AuthenticationInfo"] = "Authentication-Info";
        HeaderNames["X_MS_REQUEST_ID"] = "x-ms-request-id";
        HeaderNames["X_MS_HTTP_VERSION"] = "x-ms-httpver";
    })(HeaderNames || (HeaderNames = {}));
    /**
     * Persistent cache keys MSAL which stay while user is logged in.
     */
    var PersistentCacheKeys;
    (function (PersistentCacheKeys) {
        PersistentCacheKeys["ID_TOKEN"] = "idtoken";
        PersistentCacheKeys["CLIENT_INFO"] = "client.info";
        PersistentCacheKeys["ADAL_ID_TOKEN"] = "adal.idtoken";
        PersistentCacheKeys["ERROR"] = "error";
        PersistentCacheKeys["ERROR_DESC"] = "error.description";
        PersistentCacheKeys["ACTIVE_ACCOUNT"] = "active-account";
        PersistentCacheKeys["ACTIVE_ACCOUNT_FILTERS"] = "active-account-filters"; // new cache entry for active_account for a more robust version for browser
    })(PersistentCacheKeys || (PersistentCacheKeys = {}));
    /**
     * String constants related to AAD Authority
     */
    var AADAuthorityConstants;
    (function (AADAuthorityConstants) {
        AADAuthorityConstants["COMMON"] = "common";
        AADAuthorityConstants["ORGANIZATIONS"] = "organizations";
        AADAuthorityConstants["CONSUMERS"] = "consumers";
    })(AADAuthorityConstants || (AADAuthorityConstants = {}));
    /**
     * Keys in the hashParams sent by AAD Server
     */
    var AADServerParamKeys;
    (function (AADServerParamKeys) {
        AADServerParamKeys["CLIENT_ID"] = "client_id";
        AADServerParamKeys["REDIRECT_URI"] = "redirect_uri";
        AADServerParamKeys["RESPONSE_TYPE"] = "response_type";
        AADServerParamKeys["RESPONSE_MODE"] = "response_mode";
        AADServerParamKeys["GRANT_TYPE"] = "grant_type";
        AADServerParamKeys["CLAIMS"] = "claims";
        AADServerParamKeys["SCOPE"] = "scope";
        AADServerParamKeys["ERROR"] = "error";
        AADServerParamKeys["ERROR_DESCRIPTION"] = "error_description";
        AADServerParamKeys["ACCESS_TOKEN"] = "access_token";
        AADServerParamKeys["ID_TOKEN"] = "id_token";
        AADServerParamKeys["REFRESH_TOKEN"] = "refresh_token";
        AADServerParamKeys["EXPIRES_IN"] = "expires_in";
        AADServerParamKeys["STATE"] = "state";
        AADServerParamKeys["NONCE"] = "nonce";
        AADServerParamKeys["PROMPT"] = "prompt";
        AADServerParamKeys["SESSION_STATE"] = "session_state";
        AADServerParamKeys["CLIENT_INFO"] = "client_info";
        AADServerParamKeys["CODE"] = "code";
        AADServerParamKeys["CODE_CHALLENGE"] = "code_challenge";
        AADServerParamKeys["CODE_CHALLENGE_METHOD"] = "code_challenge_method";
        AADServerParamKeys["CODE_VERIFIER"] = "code_verifier";
        AADServerParamKeys["CLIENT_REQUEST_ID"] = "client-request-id";
        AADServerParamKeys["X_CLIENT_SKU"] = "x-client-SKU";
        AADServerParamKeys["X_CLIENT_VER"] = "x-client-VER";
        AADServerParamKeys["X_CLIENT_OS"] = "x-client-OS";
        AADServerParamKeys["X_CLIENT_CPU"] = "x-client-CPU";
        AADServerParamKeys["X_CLIENT_CURR_TELEM"] = "x-client-current-telemetry";
        AADServerParamKeys["X_CLIENT_LAST_TELEM"] = "x-client-last-telemetry";
        AADServerParamKeys["X_MS_LIB_CAPABILITY"] = "x-ms-lib-capability";
        AADServerParamKeys["X_APP_NAME"] = "x-app-name";
        AADServerParamKeys["X_APP_VER"] = "x-app-ver";
        AADServerParamKeys["POST_LOGOUT_URI"] = "post_logout_redirect_uri";
        AADServerParamKeys["ID_TOKEN_HINT"] = "id_token_hint";
        AADServerParamKeys["DEVICE_CODE"] = "device_code";
        AADServerParamKeys["CLIENT_SECRET"] = "client_secret";
        AADServerParamKeys["CLIENT_ASSERTION"] = "client_assertion";
        AADServerParamKeys["CLIENT_ASSERTION_TYPE"] = "client_assertion_type";
        AADServerParamKeys["TOKEN_TYPE"] = "token_type";
        AADServerParamKeys["REQ_CNF"] = "req_cnf";
        AADServerParamKeys["OBO_ASSERTION"] = "assertion";
        AADServerParamKeys["REQUESTED_TOKEN_USE"] = "requested_token_use";
        AADServerParamKeys["ON_BEHALF_OF"] = "on_behalf_of";
        AADServerParamKeys["FOCI"] = "foci";
        AADServerParamKeys["CCS_HEADER"] = "X-AnchorMailbox";
        AADServerParamKeys["RETURN_SPA_CODE"] = "return_spa_code";
        AADServerParamKeys["NATIVE_BROKER"] = "nativebroker";
        AADServerParamKeys["LOGOUT_HINT"] = "logout_hint";
    })(AADServerParamKeys || (AADServerParamKeys = {}));
    /**
     * Claims request keys
     */
    var ClaimsRequestKeys;
    (function (ClaimsRequestKeys) {
        ClaimsRequestKeys["ACCESS_TOKEN"] = "access_token";
        ClaimsRequestKeys["XMS_CC"] = "xms_cc";
    })(ClaimsRequestKeys || (ClaimsRequestKeys = {}));
    /**
     * we considered making this "enum" in the request instead of string, however it looks like the allowed list of
     * prompt values kept changing over past couple of years. There are some undocumented prompt values for some
     * internal partners too, hence the choice of generic "string" type instead of the "enum"
     */
    var PromptValue = {
        LOGIN: "login",
        SELECT_ACCOUNT: "select_account",
        CONSENT: "consent",
        NONE: "none",
        CREATE: "create",
        NO_SESSION: "no_session"
    };
    /**
     * SSO Types - generated to populate hints
     */
    var SSOTypes;
    (function (SSOTypes) {
        SSOTypes["ACCOUNT"] = "account";
        SSOTypes["SID"] = "sid";
        SSOTypes["LOGIN_HINT"] = "login_hint";
        SSOTypes["ID_TOKEN"] = "id_token";
        SSOTypes["DOMAIN_HINT"] = "domain_hint";
        SSOTypes["ORGANIZATIONS"] = "organizations";
        SSOTypes["CONSUMERS"] = "consumers";
        SSOTypes["ACCOUNT_ID"] = "accountIdentifier";
        SSOTypes["HOMEACCOUNT_ID"] = "homeAccountIdentifier";
    })(SSOTypes || (SSOTypes = {}));
    /**
     * allowed values for codeVerifier
     */
    var CodeChallengeMethodValues = {
        PLAIN: "plain",
        S256: "S256"
    };
    /**
     * allowed values for response_mode
     */
    var ResponseMode;
    (function (ResponseMode) {
        ResponseMode["QUERY"] = "query";
        ResponseMode["FRAGMENT"] = "fragment";
        ResponseMode["FORM_POST"] = "form_post";
    })(ResponseMode || (ResponseMode = {}));
    /**
     * allowed grant_type
     */
    var GrantType;
    (function (GrantType) {
        GrantType["IMPLICIT_GRANT"] = "implicit";
        GrantType["AUTHORIZATION_CODE_GRANT"] = "authorization_code";
        GrantType["CLIENT_CREDENTIALS_GRANT"] = "client_credentials";
        GrantType["RESOURCE_OWNER_PASSWORD_GRANT"] = "password";
        GrantType["REFRESH_TOKEN_GRANT"] = "refresh_token";
        GrantType["DEVICE_CODE_GRANT"] = "device_code";
        GrantType["JWT_BEARER"] = "urn:ietf:params:oauth:grant-type:jwt-bearer";
    })(GrantType || (GrantType = {}));
    /**
     * Account types in Cache
     */
    var CacheAccountType;
    (function (CacheAccountType) {
        CacheAccountType["MSSTS_ACCOUNT_TYPE"] = "MSSTS";
        CacheAccountType["ADFS_ACCOUNT_TYPE"] = "ADFS";
        CacheAccountType["MSAV1_ACCOUNT_TYPE"] = "MSA";
        CacheAccountType["GENERIC_ACCOUNT_TYPE"] = "Generic"; // NTLM, Kerberos, FBA, Basic etc
    })(CacheAccountType || (CacheAccountType = {}));
    /**
     * Separators used in cache
     */
    var Separators;
    (function (Separators) {
        Separators["CACHE_KEY_SEPARATOR"] = "-";
        Separators["CLIENT_INFO_SEPARATOR"] = ".";
    })(Separators || (Separators = {}));
    /**
     * Credential Type stored in the cache
     */
    var CredentialType;
    (function (CredentialType) {
        CredentialType["ID_TOKEN"] = "IdToken";
        CredentialType["ACCESS_TOKEN"] = "AccessToken";
        CredentialType["ACCESS_TOKEN_WITH_AUTH_SCHEME"] = "AccessToken_With_AuthScheme";
        CredentialType["REFRESH_TOKEN"] = "RefreshToken";
    })(CredentialType || (CredentialType = {}));
    /**
     * Combine all cache types
     */
    var CacheType;
    (function (CacheType) {
        CacheType[CacheType["ADFS"] = 1001] = "ADFS";
        CacheType[CacheType["MSA"] = 1002] = "MSA";
        CacheType[CacheType["MSSTS"] = 1003] = "MSSTS";
        CacheType[CacheType["GENERIC"] = 1004] = "GENERIC";
        CacheType[CacheType["ACCESS_TOKEN"] = 2001] = "ACCESS_TOKEN";   // [SuppressMessage("Microsoft.Security", "CS001:SecretInline", Justification="This is simply an identifier and not an actual token")]
        CacheType[CacheType["REFRESH_TOKEN"] = 2002] = "REFRESH_TOKEN"; // [SuppressMessage("Microsoft.Security", "CS001:SecretInline", Justification="This is simply an identifier and not an actual token")]
        CacheType[CacheType["ID_TOKEN"] = 2003] = "ID_TOKEN";
        CacheType[CacheType["APP_METADATA"] = 3001] = "APP_METADATA";
        CacheType[CacheType["UNDEFINED"] = 9999] = "UNDEFINED";
    })(CacheType || (CacheType = {}));
    /**
     * More Cache related constants
     */
    var APP_METADATA = "appmetadata";
    var CLIENT_INFO = "client_info";
    var THE_FAMILY_ID = "1";
    var AUTHORITY_METADATA_CONSTANTS = {
        CACHE_KEY: "authority-metadata",
        REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours
    };
    var AuthorityMetadataSource;
    (function (AuthorityMetadataSource) {
        AuthorityMetadataSource["CONFIG"] = "config";
        AuthorityMetadataSource["CACHE"] = "cache";
        AuthorityMetadataSource["NETWORK"] = "network";
        AuthorityMetadataSource["HARDCODED_VALUES"] = "hardcoded_values";
    })(AuthorityMetadataSource || (AuthorityMetadataSource = {}));
    var SERVER_TELEM_CONSTANTS = {
        SCHEMA_VERSION: 5,
        MAX_CUR_HEADER_BYTES: 80,
        MAX_LAST_HEADER_BYTES: 330,
        MAX_CACHED_ERRORS: 50,
        CACHE_KEY: "server-telemetry",
        CATEGORY_SEPARATOR: "|",
        VALUE_SEPARATOR: ",",
        OVERFLOW_TRUE: "1",
        OVERFLOW_FALSE: "0",
        UNKNOWN_ERROR: "unknown_error"
    };
    /**
     * Type of the authentication request
     */
    exports.AuthenticationScheme = void 0;
    (function (AuthenticationScheme) {
        AuthenticationScheme["BEARER"] = "Bearer";
        AuthenticationScheme["POP"] = "pop";
        AuthenticationScheme["SSH"] = "ssh-cert";
    })(exports.AuthenticationScheme || (exports.AuthenticationScheme = {}));
    /**
     * Constants related to throttling
     */
    var ThrottlingConstants = {
        // Default time to throttle RequestThumbprint in seconds
        DEFAULT_THROTTLE_TIME_SECONDS: 60,
        // Default maximum time to throttle in seconds, overrides what the server sends back
        DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,
        // Prefix for storing throttling entries
        THROTTLING_PREFIX: "throttling",
        // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling
        X_MS_LIB_CAPABILITY_VALUE: "retry-after, h429"
    };
    var Errors = {
        INVALID_GRANT_ERROR: "invalid_grant",
        CLIENT_MISMATCH_ERROR: "client_mismatch",
    };
    /**
     * Password grant parameters
     */
    var PasswordGrantConstants;
    (function (PasswordGrantConstants) {
        PasswordGrantConstants["username"] = "username";
        PasswordGrantConstants["password"] = "password";
    })(PasswordGrantConstants || (PasswordGrantConstants = {}));
    /**
     * Response codes
     */
    var ResponseCodes;
    (function (ResponseCodes) {
        ResponseCodes[ResponseCodes["httpSuccess"] = 200] = "httpSuccess";
        ResponseCodes[ResponseCodes["httpBadRequest"] = 400] = "httpBadRequest";
    })(ResponseCodes || (ResponseCodes = {}));
    /**
     * Region Discovery Sources
     */
    var RegionDiscoverySources;
    (function (RegionDiscoverySources) {
        RegionDiscoverySources["FAILED_AUTO_DETECTION"] = "1";
        RegionDiscoverySources["INTERNAL_CACHE"] = "2";
        RegionDiscoverySources["ENVIRONMENT_VARIABLE"] = "3";
        RegionDiscoverySources["IMDS"] = "4";
    })(RegionDiscoverySources || (RegionDiscoverySources = {}));
    /**
     * Region Discovery Outcomes
     */
    var RegionDiscoveryOutcomes;
    (function (RegionDiscoveryOutcomes) {
        RegionDiscoveryOutcomes["CONFIGURED_MATCHES_DETECTED"] = "1";
        RegionDiscoveryOutcomes["CONFIGURED_NO_AUTO_DETECTION"] = "2";
        RegionDiscoveryOutcomes["CONFIGURED_NOT_DETECTED"] = "3";
        RegionDiscoveryOutcomes["AUTO_DETECTION_REQUESTED_SUCCESSFUL"] = "4";
        RegionDiscoveryOutcomes["AUTO_DETECTION_REQUESTED_FAILED"] = "5";
    })(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));
    var CacheOutcome;
    (function (CacheOutcome) {
        CacheOutcome["NO_CACHE_HIT"] = "0";
        CacheOutcome["FORCE_REFRESH"] = "1";
        CacheOutcome["NO_CACHED_ACCESS_TOKEN"] = "2";
        CacheOutcome["CACHED_ACCESS_TOKEN_EXPIRED"] = "3";
        CacheOutcome["REFRESH_CACHED_ACCESS_TOKEN"] = "4";
    })(CacheOutcome || (CacheOutcome = {}));
    var JsonTypes;
    (function (JsonTypes) {
        JsonTypes["Jwt"] = "JWT";
        JsonTypes["Jwk"] = "JWK";
        JsonTypes["Pop"] = "pop";
    })(JsonTypes || (JsonTypes = {}));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * AuthErrorMessage class containing string constants used by error codes and messages.
     */
    var AuthErrorMessage = {
        unexpectedError: {
            code: "unexpected_error",
            desc: "Unexpected error in authentication."
        },
        postRequestFailed: {
            code: "post_request_failed",
            desc: "Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details."
        }
    };
    /**
     * General error class thrown by the MSAL.js library.
     */
    var AuthError = /** @class */ (function (_super) {
        __extends(AuthError, _super);
        function AuthError(errorCode, errorMessage, suberror) {
            var _this = this;
            var errorString = errorMessage ? errorCode + ": " + errorMessage : errorCode;
            _this = _super.call(this, errorString) || this;
            Object.setPrototypeOf(_this, AuthError.prototype);
            _this.errorCode = errorCode || Constants.EMPTY_STRING;
            _this.errorMessage = errorMessage || Constants.EMPTY_STRING;
            _this.subError = suberror || Constants.EMPTY_STRING;
            _this.name = "AuthError";
            return _this;
        }
        AuthError.prototype.setCorrelationId = function (correlationId) {
            this.correlationId = correlationId;
        };
        /**
         * Creates an error that is thrown when something unexpected happens in the library.
         * @param errDesc
         */
        AuthError.createUnexpectedError = function (errDesc) {
            return new AuthError(AuthErrorMessage.unexpectedError.code, AuthErrorMessage.unexpectedError.desc + ": " + errDesc);
        };
        /**
         * Creates an error for post request failures.
         * @param errDesc
         * @returns
         */
        AuthError.createPostRequestFailed = function (errDesc) {
            return new AuthError(AuthErrorMessage.postRequestFailed.code, AuthErrorMessage.postRequestFailed.desc + ": " + errDesc);
        };
        return AuthError;
    }(Error));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var DEFAULT_CRYPTO_IMPLEMENTATION = {
        createNewGuid: function () {
            var notImplErr = "Crypto interface - createNewGuid() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        base64Decode: function () {
            var notImplErr = "Crypto interface - base64Decode() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        base64Encode: function () {
            var notImplErr = "Crypto interface - base64Encode() has not been implemented";
            throw AuthError.createUnexpectedError(notImplErr);
        },
        generatePkceCodes: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - generatePkceCodes() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        getPublicKeyThumbprint: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - getPublicKeyThumbprint() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        removeTokenBindingKey: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - removeTokenBindingKey() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        clearKeystore: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - clearKeystore() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        signJwt: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - signJwt() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        hashString: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Crypto interface - hashString() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        }
    };

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ClientAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var ClientAuthErrorMessage = {
        clientInfoDecodingError: {
            code: "client_info_decoding_error",
            desc: "The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause."
        },
        clientInfoEmptyError: {
            code: "client_info_empty_error",
            desc: "The client info was empty. Please review the trace to determine the root cause."
        },
        tokenParsingError: {
            code: "token_parsing_error",
            desc: "Token cannot be parsed. Please review stack trace to determine root cause."
        },
        nullOrEmptyToken: {
            code: "null_or_empty_token",
            desc: "The token is null or empty. Please review the trace to determine the root cause."
        },
        endpointResolutionError: {
            code: "endpoints_resolution_error",
            desc: "Error: could not resolve endpoints. Please check network and try again."
        },
        networkError: {
            code: "network_error",
            desc: "Network request failed. Please check network trace to determine root cause."
        },
        unableToGetOpenidConfigError: {
            code: "openid_config_error",
            desc: "Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints."
        },
        hashNotDeserialized: {
            code: "hash_not_deserialized",
            desc: "The hash parameters could not be deserialized. Please review the trace to determine the root cause."
        },
        blankGuidGenerated: {
            code: "blank_guid_generated",
            desc: "The guid generated was blank. Please review the trace to determine the root cause."
        },
        invalidStateError: {
            code: "invalid_state",
            desc: "State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState()."
        },
        stateMismatchError: {
            code: "state_mismatch",
            desc: "State mismatch error. Please check your network. Continued requests may cause cache overflow."
        },
        stateNotFoundError: {
            code: "state_not_found",
            desc: "State not found"
        },
        nonceMismatchError: {
            code: "nonce_mismatch",
            desc: "Nonce mismatch error. This may be caused by a race condition in concurrent requests."
        },
        nonceNotFoundError: {
            code: "nonce_not_found",
            desc: "nonce not found"
        },
        authTimeNotFoundError: {
            code: "auth_time_not_found",
            desc: "Max Age was requested and the ID token is missing the auth_time variable." +
                " auth_time is an optional claim and is not enabled by default - it must be enabled." +
                " See https://aka.ms/msaljs/optional-claims for more information."
        },
        maxAgeTranspiredError: {
            code: "max_age_transpired",
            desc: "Max Age is set to 0, or too much time has elapsed since the last end-user authentication."
        },
        noTokensFoundError: {
            code: "no_tokens_found",
            desc: "No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken()."
        },
        multipleMatchingTokens: {
            code: "multiple_matching_tokens",
            desc: "The cache contains multiple tokens satisfying the requirements. " +
                "Call AcquireToken again providing more requirements such as authority or account."
        },
        multipleMatchingAccounts: {
            code: "multiple_matching_accounts",
            desc: "The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account"
        },
        multipleMatchingAppMetadata: {
            code: "multiple_matching_appMetadata",
            desc: "The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata"
        },
        tokenRequestCannotBeMade: {
            code: "request_cannot_be_made",
            desc: "Token request cannot be made without authorization code or refresh token."
        },
        appendEmptyScopeError: {
            code: "cannot_append_empty_scope",
            desc: "Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info."
        },
        removeEmptyScopeError: {
            code: "cannot_remove_empty_scope",
            desc: "Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info."
        },
        appendScopeSetError: {
            code: "cannot_append_scopeset",
            desc: "Cannot append ScopeSet due to error."
        },
        emptyInputScopeSetError: {
            code: "empty_input_scopeset",
            desc: "Empty input ScopeSet cannot be processed."
        },
        DeviceCodePollingCancelled: {
            code: "device_code_polling_cancelled",
            desc: "Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true."
        },
        DeviceCodeExpired: {
            code: "device_code_expired",
            desc: "Device code is expired."
        },
        DeviceCodeUnknownError: {
            code: "device_code_unknown_error",
            desc: "Device code stopped polling for unknown reasons."
        },
        NoAccountInSilentRequest: {
            code: "no_account_in_silent_request",
            desc: "Please pass an account object, silent flow is not supported without account information"
        },
        invalidCacheRecord: {
            code: "invalid_cache_record",
            desc: "Cache record object was null or undefined."
        },
        invalidCacheEnvironment: {
            code: "invalid_cache_environment",
            desc: "Invalid environment when attempting to create cache entry"
        },
        noAccountFound: {
            code: "no_account_found",
            desc: "No account found in cache for given key."
        },
        CachePluginError: {
            code: "no cache plugin set on CacheManager",
            desc: "ICachePlugin needs to be set before using readFromStorage or writeFromStorage"
        },
        noCryptoObj: {
            code: "no_crypto_object",
            desc: "No crypto object detected. This is required for the following operation: "
        },
        invalidCacheType: {
            code: "invalid_cache_type",
            desc: "Invalid cache type"
        },
        unexpectedAccountType: {
            code: "unexpected_account_type",
            desc: "Unexpected account type."
        },
        unexpectedCredentialType: {
            code: "unexpected_credential_type",
            desc: "Unexpected credential type."
        },
        invalidAssertion: {
            code: "invalid_assertion",
            desc: "Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515"
        },
        invalidClientCredential: {
            code: "invalid_client_credential",
            desc: "Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential"
        },
        tokenRefreshRequired: {
            code: "token_refresh_required",
            desc: "Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired."
        },
        userTimeoutReached: {
            code: "user_timeout_reached",
            desc: "User defined timeout for device code polling reached",
        },
        tokenClaimsRequired: {
            code: "token_claims_cnf_required_for_signedjwt",
            desc: "Cannot generate a POP jwt if the token_claims are not populated"
        },
        noAuthorizationCodeFromServer: {
            code: "authorization_code_missing_from_server_response",
            desc: "Server response does not contain an authorization code to proceed"
        },
        noAzureRegionDetected: {
            code: "no_azure_region_detected",
            desc: "No azure region was detected and no fallback was made available"
        },
        accessTokenEntityNullError: {
            code: "access_token_entity_null",
            desc: "Access token entity is null, please check logs and cache to ensure a valid access token is present."
        },
        bindingKeyNotRemovedError: {
            code: "binding_key_not_removed",
            desc: "Could not remove the credential's binding key from storage."
        },
        logoutNotSupported: {
            code: "end_session_endpoint_not_supported",
            desc: "Provided authority does not support logout."
        },
        keyIdMissing: {
            code: "key_id_missing",
            desc: "A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key."
        },
        noNetworkConnectivity: {
            code: "no_network_connectivity",
            desc: "No network connectivity. Check your internet connection."
        },
        userCanceledError: {
            code: "user_canceled",
            desc: "User canceled the flow."
        }
    };
    /**
     * Error thrown when there is an error in the client code running on the browser.
     */
    var ClientAuthError = /** @class */ (function (_super) {
        __extends(ClientAuthError, _super);
        function ClientAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientAuthError";
            Object.setPrototypeOf(_this, ClientAuthError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when client info object doesn't decode correctly.
         * @param caughtError
         */
        ClientAuthError.createClientInfoDecodingError = function (caughtError) {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + " Failed with error: " + caughtError);
        };
        /**
         * Creates an error thrown if the client info is empty.
         * @param rawClientInfo
         */
        ClientAuthError.createClientInfoEmptyError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, "" + ClientAuthErrorMessage.clientInfoEmptyError.desc);
        };
        /**
         * Creates an error thrown when the id token extraction errors out.
         * @param err
         */
        ClientAuthError.createTokenParsingError = function (caughtExtractionError) {
            return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + " Failed with error: " + caughtExtractionError);
        };
        /**
         * Creates an error thrown when the id token string is null or empty.
         * @param invalidRawTokenString
         */
        ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {
            return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + " Raw Token Value: " + invalidRawTokenString);
        };
        /**
         * Creates an error thrown when the endpoint discovery doesn't complete correctly.
         */
        ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {
            return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + " Detail: " + errDetail);
        };
        /**
         * Creates an error thrown when the fetch client throws
         */
        ClientAuthError.createNetworkError = function (endpoint, errDetail) {
            return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + " | Fetch client threw: " + errDetail + " | Attempted to reach: " + endpoint.split("?")[0]);
        };
        /**
         * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data
         */
        ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {
            return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + " Attempted to retrieve endpoints from: " + errDetail);
        };
        /**
         * Creates an error thrown when the hash cannot be deserialized.
         * @param hashParamObj
         */
        ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {
            return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + " Given Object: " + hashParamObj);
        };
        /**
         * Creates an error thrown when the state cannot be parsed.
         * @param invalidState
         */
        ClientAuthError.createInvalidStateError = function (invalidState, errorString) {
            return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + " Invalid State: " + invalidState + ", Root Err: " + errorString);
        };
        /**
         * Creates an error thrown when two states do not match.
         */
        ClientAuthError.createStateMismatchError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);
        };
        /**
         * Creates an error thrown when the state is not present
         * @param missingState
         */
        ClientAuthError.createStateNotFoundError = function (missingState) {
            return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + ":  " + missingState);
        };
        /**
         * Creates an error thrown when the nonce does not match.
         */
        ClientAuthError.createNonceMismatchError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);
        };
        /**
         * Creates an error thrown when max_age was provided in the request, but auth_time is not in the token claims
         * @param missingNonce
         */
        ClientAuthError.createAuthTimeNotFoundError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.authTimeNotFoundError.code, ClientAuthErrorMessage.authTimeNotFoundError.desc);
        };
        /**
         * Creates an error thrown when too much time has elapsed since the last end-user authentication
         */
        ClientAuthError.createMaxAgeTranspiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.maxAgeTranspiredError.code, ClientAuthErrorMessage.maxAgeTranspiredError.desc);
        };
        /**
         * Creates an error thrown when the mnonce is not present
         * @param missingNonce
         */
        ClientAuthError.createNonceNotFoundError = function (missingNonce) {
            return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + ":  " + missingNonce);
        };
        /**
         * Throws error when multiple tokens are in cache.
         */
        ClientAuthError.createMultipleMatchingTokensInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + ".");
        };
        /**
         * Throws error when multiple accounts are in cache for the given params
         */
        ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);
        };
        /**
         * Throws error when multiple appMetada are in cache for the given clientId.
         */
        ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);
        };
        /**
         * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.
         */
        ClientAuthError.createTokenRequestCannotBeMadeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);
        };
        /**
         * Throws error when attempting to append a null, undefined or empty scope to a set
         * @param givenScope
         */
        ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {
            return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + " Given Scope: " + givenScope);
        };
        /**
         * Throws error when attempting to append a null, undefined or empty scope to a set
         * @param givenScope
         */
        ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {
            return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + " Given Scope: " + givenScope);
        };
        /**
         * Throws error when attempting to append null or empty ScopeSet.
         * @param appendError
         */
        ClientAuthError.createAppendScopeSetError = function (appendError) {
            return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + " Detail Error: " + appendError);
        };
        /**
         * Throws error if ScopeSet is null or undefined.
         * @param givenScopeSet
         */
        ClientAuthError.createEmptyInputScopeSetError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, "" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);
        };
        /**
         * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow
         */
        ClientAuthError.createDeviceCodeCancelledError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, "" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);
        };
        /**
         * Throws error if device code is expired
         */
        ClientAuthError.createDeviceCodeExpiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, "" + ClientAuthErrorMessage.DeviceCodeExpired.desc);
        };
        /**
         * Throws error if device code is expired
         */
        ClientAuthError.createDeviceCodeUnknownError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, "" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);
        };
        /**
         * Throws error when silent requests are made without an account object
         */
        ClientAuthError.createNoAccountInSilentRequestError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, "" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);
        };
        /**
         * Throws error when cache record is null or undefined.
         */
        ClientAuthError.createNullOrUndefinedCacheRecord = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);
        };
        /**
         * Throws error when provided environment is not part of the CloudDiscoveryMetadata object
         */
        ClientAuthError.createInvalidCacheEnvironmentError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);
        };
        /**
         * Throws error when account is not found in cache.
         */
        ClientAuthError.createNoAccountFoundError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);
        };
        /**
         * Throws error if ICachePlugin not set on CacheManager.
         */
        ClientAuthError.createCachePluginError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, "" + ClientAuthErrorMessage.CachePluginError.desc);
        };
        /**
         * Throws error if crypto object not found.
         * @param operationName
         */
        ClientAuthError.createNoCryptoObjectError = function (operationName) {
            return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, "" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);
        };
        /**
         * Throws error if cache type is invalid.
         */
        ClientAuthError.createInvalidCacheTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, "" + ClientAuthErrorMessage.invalidCacheType.desc);
        };
        /**
         * Throws error if unexpected account type.
         */
        ClientAuthError.createUnexpectedAccountTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, "" + ClientAuthErrorMessage.unexpectedAccountType.desc);
        };
        /**
         * Throws error if unexpected credential type.
         */
        ClientAuthError.createUnexpectedCredentialTypeError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, "" + ClientAuthErrorMessage.unexpectedCredentialType.desc);
        };
        /**
         * Throws error if client assertion is not valid.
         */
        ClientAuthError.createInvalidAssertionError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, "" + ClientAuthErrorMessage.invalidAssertion.desc);
        };
        /**
         * Throws error if client assertion is not valid.
         */
        ClientAuthError.createInvalidCredentialError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, "" + ClientAuthErrorMessage.invalidClientCredential.desc);
        };
        /**
         * Throws error if token cannot be retrieved from cache due to refresh being required.
         */
        ClientAuthError.createRefreshRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);
        };
        /**
         * Throws error if the user defined timeout is reached.
         */
        ClientAuthError.createUserTimeoutReachedError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);
        };
        /*
         * Throws error if token claims are not populated for a signed jwt generation
         */
        ClientAuthError.createTokenClaimsRequiredError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);
        };
        /**
         * Throws error when the authorization code is missing from the server response
         */
        ClientAuthError.createNoAuthCodeInServerResponseError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);
        };
        ClientAuthError.createBindingKeyNotRemovedError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.bindingKeyNotRemovedError.code, ClientAuthErrorMessage.bindingKeyNotRemovedError.desc);
        };
        /**
         * Thrown when logout is attempted for an authority that doesnt have an end_session_endpoint
         */
        ClientAuthError.createLogoutNotSupportedError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.logoutNotSupported.code, ClientAuthErrorMessage.logoutNotSupported.desc);
        };
        /**
         * Create an error when kid attribute is missing from a PoP token's cache record
         */
        ClientAuthError.createKeyIdMissingError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.keyIdMissing.code, ClientAuthErrorMessage.keyIdMissing.desc);
        };
        /**
         * Create an error when the client does not have network connectivity
         */
        ClientAuthError.createNoNetworkConnectivityError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.noNetworkConnectivity.code, ClientAuthErrorMessage.noNetworkConnectivity.desc);
        };
        /**
         * Create an error when the user cancels the flow
         */
        ClientAuthError.createUserCanceledError = function () {
            return new ClientAuthError(ClientAuthErrorMessage.userCanceledError.code, ClientAuthErrorMessage.userCanceledError.desc);
        };
        return ClientAuthError;
    }(AuthError));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * @hidden
     */
    var StringUtils = /** @class */ (function () {
        function StringUtils() {
        }
        /**
         * decode a JWT
         *
         * @param authToken
         */
        StringUtils.decodeAuthToken = function (authToken) {
            if (StringUtils.isEmpty(authToken)) {
                throw ClientAuthError.createTokenNullOrEmptyError(authToken);
            }
            var tokenPartsRegex = /^([^\.\s]*)\.([^\.\s]+)\.([^\.\s]*)$/;
            var matches = tokenPartsRegex.exec(authToken);
            if (!matches || matches.length < 4) {
                throw ClientAuthError.createTokenParsingError("Given token is malformed: " + JSON.stringify(authToken));
            }
            var crackedToken = {
                header: matches[1],
                JWSPayload: matches[2],
                JWSSig: matches[3]
            };
            return crackedToken;
        };
        /**
         * Check if a string is empty.
         *
         * @param str
         */
        StringUtils.isEmpty = function (str) {
            return (typeof str === "undefined" || !str || 0 === str.length);
        };
        /**
         * Check if stringified object is empty
         * @param strObj
         */
        StringUtils.isEmptyObj = function (strObj) {
            if (strObj && !StringUtils.isEmpty(strObj)) {
                try {
                    var obj = JSON.parse(strObj);
                    return Object.keys(obj).length === 0;
                }
                catch (e) { }
            }
            return true;
        };
        StringUtils.startsWith = function (str, search) {
            return str.indexOf(search) === 0;
        };
        StringUtils.endsWith = function (str, search) {
            return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));
        };
        /**
         * Parses string into an object.
         *
         * @param query
         */
        StringUtils.queryStringToObject = function (query) {
            var obj = {};
            var params = query.split("&");
            var decode = function (s) { return decodeURIComponent(s.replace(/\+/g, " ")); };
            params.forEach(function (pair) {
                if (pair.trim()) {
                    var _a = pair.split(/=(.+)/g, 2), key = _a[0], value = _a[1]; // Split on the first occurence of the '=' character
                    if (key && value) {
                        obj[decode(key)] = decode(value);
                    }
                }
            });
            return obj;
        };
        /**
         * Trims entries in an array.
         *
         * @param arr
         */
        StringUtils.trimArrayEntries = function (arr) {
            return arr.map(function (entry) { return entry.trim(); });
        };
        /**
         * Removes empty strings from array
         * @param arr
         */
        StringUtils.removeEmptyStringsFromArray = function (arr) {
            return arr.filter(function (entry) {
                return !StringUtils.isEmpty(entry);
            });
        };
        /**
         * Attempts to parse a string into JSON
         * @param str
         */
        StringUtils.jsonParseHelper = function (str) {
            try {
                return JSON.parse(str);
            }
            catch (e) {
                return null;
            }
        };
        /**
         * Tests if a given string matches a given pattern, with support for wildcards and queries.
         * @param pattern Wildcard pattern to string match. Supports "*" for wildcards and "?" for queries
         * @param input String to match against
         */
        StringUtils.matchPattern = function (pattern, input) {
            /**
             * Wildcard support: https://stackoverflow.com/a/3117248/4888559
             * Queries: replaces "?" in string with escaped "\?" for regex test
             */
            var regex = new RegExp(pattern.replace(/\\/g, "\\\\").replace(/\*/g, "[^ ]*").replace(/\?/g, "\\\?")); // eslint-disable-line security/detect-non-literal-regexp
            return regex.test(input);
        };
        return StringUtils;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Log message level.
     */
    exports.LogLevel = void 0;
    (function (LogLevel) {
        LogLevel[LogLevel["Error"] = 0] = "Error";
        LogLevel[LogLevel["Warning"] = 1] = "Warning";
        LogLevel[LogLevel["Info"] = 2] = "Info";
        LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
        LogLevel[LogLevel["Trace"] = 4] = "Trace";
    })(exports.LogLevel || (exports.LogLevel = {}));
    /**
     * Class which facilitates logging of messages to a specific place.
     */
    var Logger = /** @class */ (function () {
        function Logger(loggerOptions, packageName, packageVersion) {
            // Current log level, defaults to info.
            this.level = exports.LogLevel.Info;
            var defaultLoggerCallback = function () {
                return;
            };
            var setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();
            this.localCallback = setLoggerOptions.loggerCallback || defaultLoggerCallback;
            this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;
            this.level = typeof (setLoggerOptions.logLevel) === "number" ? setLoggerOptions.logLevel : exports.LogLevel.Info;
            this.correlationId = setLoggerOptions.correlationId || Constants.EMPTY_STRING;
            this.packageName = packageName || Constants.EMPTY_STRING;
            this.packageVersion = packageVersion || Constants.EMPTY_STRING;
        }
        Logger.createDefaultLoggerOptions = function () {
            return {
                loggerCallback: function () {
                    // allow users to not set loggerCallback
                },
                piiLoggingEnabled: false,
                logLevel: exports.LogLevel.Info
            };
        };
        /**
         * Create new Logger with existing configurations.
         */
        Logger.prototype.clone = function (packageName, packageVersion, correlationId) {
            return new Logger({ loggerCallback: this.localCallback, piiLoggingEnabled: this.piiLoggingEnabled, logLevel: this.level, correlationId: correlationId || this.correlationId }, packageName, packageVersion);
        };
        /**
         * Log message with required options.
         */
        Logger.prototype.logMessage = function (logMessage, options) {
            if ((options.logLevel > this.level) || (!this.piiLoggingEnabled && options.containsPii)) {
                return;
            }
            var timestamp = new Date().toUTCString();
            // Add correlationId to logs if set, correlationId provided on log messages take precedence
            var logHeader;
            if (!StringUtils.isEmpty(options.correlationId)) {
                logHeader = "[" + timestamp + "] : [" + options.correlationId + "]";
            }
            else if (!StringUtils.isEmpty(this.correlationId)) {
                logHeader = "[" + timestamp + "] : [" + this.correlationId + "]";
            }
            else {
                logHeader = "[" + timestamp + "]";
            }
            var log = logHeader + " : " + this.packageName + "@" + this.packageVersion + " : " + exports.LogLevel[options.logLevel] + " - " + logMessage;
            // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? "-Pii": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);
            this.executeCallback(options.logLevel, log, options.containsPii || false);
        };
        /**
         * Execute callback with message.
         */
        Logger.prototype.executeCallback = function (level, message, containsPii) {
            if (this.localCallback) {
                this.localCallback(level, message, containsPii);
            }
        };
        /**
         * Logs error messages.
         */
        Logger.prototype.error = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Error,
                containsPii: false,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs error messages with PII.
         */
        Logger.prototype.errorPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Error,
                containsPii: true,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs warning messages.
         */
        Logger.prototype.warning = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Warning,
                containsPii: false,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs warning messages with PII.
         */
        Logger.prototype.warningPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Warning,
                containsPii: true,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs info messages.
         */
        Logger.prototype.info = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Info,
                containsPii: false,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs info messages with PII.
         */
        Logger.prototype.infoPii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Info,
                containsPii: true,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs verbose messages.
         */
        Logger.prototype.verbose = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Verbose,
                containsPii: false,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs verbose messages with PII.
         */
        Logger.prototype.verbosePii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Verbose,
                containsPii: true,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs trace messages.
         */
        Logger.prototype.trace = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Trace,
                containsPii: false,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Logs trace messages with PII.
         */
        Logger.prototype.tracePii = function (message, correlationId) {
            this.logMessage(message, {
                logLevel: exports.LogLevel.Trace,
                containsPii: true,
                correlationId: correlationId || Constants.EMPTY_STRING
            });
        };
        /**
         * Returns whether PII Logging is enabled or not.
         */
        Logger.prototype.isPiiLoggingEnabled = function () {
            return this.piiLoggingEnabled || false;
        };
        return Logger;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /* eslint-disable header/header */
    var name$1 = "@azure/msal-common";
    var version$2 = "13.0.0";

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AzureCloudInstance;
    (function (AzureCloudInstance) {
        // AzureCloudInstance is not specified.
        AzureCloudInstance[AzureCloudInstance["None"] = 0] = "None";
        // Microsoft Azure public cloud
        AzureCloudInstance["AzurePublic"] = "https://login.microsoftonline.com";
        // Microsoft PPE
        AzureCloudInstance["AzurePpe"] = "https://login.windows-ppe.net";
        // Microsoft Chinese national cloud
        AzureCloudInstance["AzureChina"] = "https://login.chinacloudapi.cn";
        // Microsoft German national cloud ("Black Forest")
        AzureCloudInstance["AzureGermany"] = "https://login.microsoftonline.de";
        // US Government cloud
        AzureCloudInstance["AzureUsGovernment"] = "https://login.microsoftonline.us";
    })(AzureCloudInstance || (AzureCloudInstance = {}));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.
     */
    var ClientConfigurationErrorMessage = {
        redirectUriNotSet: {
            code: "redirect_uri_empty",
            desc: "A redirect URI is required for all calls, and none has been set."
        },
        postLogoutUriNotSet: {
            code: "post_logout_uri_empty",
            desc: "A post logout redirect has not been set."
        },
        claimsRequestParsingError: {
            code: "claims_request_parsing_error",
            desc: "Could not parse the given claims request object."
        },
        authorityUriInsecure: {
            code: "authority_uri_insecure",
            desc: "Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options"
        },
        urlParseError: {
            code: "url_parse_error",
            desc: "URL could not be parsed into appropriate segments."
        },
        urlEmptyError: {
            code: "empty_url_error",
            desc: "URL was empty or null."
        },
        emptyScopesError: {
            code: "empty_input_scopes_error",
            desc: "Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token."
        },
        nonArrayScopesError: {
            code: "nonarray_input_scopes_error",
            desc: "Scopes cannot be passed as non-array."
        },
        clientIdSingleScopeError: {
            code: "clientid_input_scopes_error",
            desc: "Client ID can only be provided as a single scope."
        },
        invalidPrompt: {
            code: "invalid_prompt_value",
            desc: "Supported prompt values are 'login', 'select_account', 'consent', 'create', 'none' and 'no_session'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest",
        },
        invalidClaimsRequest: {
            code: "invalid_claims",
            desc: "Given claims parameter must be a stringified JSON object."
        },
        tokenRequestEmptyError: {
            code: "token_request_empty",
            desc: "Token request was empty and not found in cache."
        },
        logoutRequestEmptyError: {
            code: "logout_request_empty",
            desc: "The logout request was null or undefined."
        },
        invalidCodeChallengeMethod: {
            code: "invalid_code_challenge_method",
            desc: "code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\"."
        },
        invalidCodeChallengeParams: {
            code: "pkce_params_missing",
            desc: "Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request"
        },
        invalidCloudDiscoveryMetadata: {
            code: "invalid_cloud_discovery_metadata",
            desc: "Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields"
        },
        invalidAuthorityMetadata: {
            code: "invalid_authority_metadata",
            desc: "Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields."
        },
        untrustedAuthority: {
            code: "untrusted_authority",
            desc: "The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter."
        },
        invalidAzureCloudInstance: {
            code: "invalid_azure_cloud_instance",
            desc: "Invalid AzureCloudInstance provided. Please refer MSAL JS docs: aks.ms/msaljs/azure_cloud_instance for valid values"
        },
        missingSshJwk: {
            code: "missing_ssh_jwk",
            desc: "Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme."
        },
        missingSshKid: {
            code: "missing_ssh_kid",
            desc: "Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme."
        },
        missingNonceAuthenticationHeader: {
            code: "missing_nonce_authentication_header",
            desc: "Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce."
        },
        invalidAuthenticationHeader: {
            code: "invalid_authentication_header",
            desc: "Invalid authentication header provided"
        }
    };
    /**
     * Error thrown when there is an error in configuration of the MSAL.js library.
     */
    var ClientConfigurationError = /** @class */ (function (_super) {
        __extends(ClientConfigurationError, _super);
        function ClientConfigurationError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "ClientConfigurationError";
            Object.setPrototypeOf(_this, ClientConfigurationError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when the redirect uri is empty (not set by caller)
         */
        ClientConfigurationError.createRedirectUriEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
         */
        ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the claims request could not be successfully parsed
         */
        ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + " Given value: " + claimsRequestParseError);
        };
        /**
         * Creates an error thrown if authority uri is given an insecure protocol.
         * @param urlString
         */
        ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + " Given URI: " + urlString);
        };
        /**
         * Creates an error thrown if URL string does not parse into separate segments.
         * @param urlString
         */
        ClientConfigurationError.createUrlParseError = function (urlParseError) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + " Given Error: " + urlParseError);
        };
        /**
         * Creates an error thrown if URL string is empty or null.
         * @param urlString
         */
        ClientConfigurationError.createUrlEmptyError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);
        };
        /**
         * Error thrown when scopes are empty.
         * @param scopesValue
         */
        ClientConfigurationError.createEmptyScopesArrayError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, "" + ClientConfigurationErrorMessage.emptyScopesError.desc);
        };
        /**
         * Error thrown when client id scope is not provided as single scope.
         * @param inputScopes
         */
        ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + " Given Scopes: " + inputScopes);
        };
        /**
         * Error thrown when prompt is not an allowed type.
         * @param promptValue
         */
        ClientConfigurationError.createInvalidPromptError = function (promptValue) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + " Given value: " + promptValue);
        };
        /**
         * Creates error thrown when claims parameter is not a stringified JSON object
         */
        ClientConfigurationError.createInvalidClaimsRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);
        };
        /**
         * Throws error when token request is empty and nothing cached in storage.
         */
        ClientConfigurationError.createEmptyLogoutRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);
        };
        /**
         * Throws error when token request is empty and nothing cached in storage.
         */
        ClientConfigurationError.createEmptyTokenRequestError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);
        };
        /**
         * Throws error when an invalid code_challenge_method is passed by the user
         */
        ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);
        };
        /**
         * Throws error when both params: code_challenge and code_challenge_method are not passed together
         */
        ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);
        };
        /**
         * Throws an error when the user passes invalid cloudDiscoveryMetadata
         */
        ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);
        };
        /**
         * Throws an error when the user passes invalid cloudDiscoveryMetadata
         */
        ClientConfigurationError.createInvalidAuthorityMetadataError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);
        };
        /**
         * Throws error when provided authority is not a member of the trusted host list
         */
        ClientConfigurationError.createUntrustedAuthorityError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);
        };
        /**
         * Throws error when the AzureCloudInstance is set to an invalid value
         */
        ClientConfigurationError.createInvalidAzureCloudInstanceError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAzureCloudInstance.code, ClientConfigurationErrorMessage.invalidAzureCloudInstance.desc);
        };
        /**
         * Throws an error when the authentication scheme is set to SSH but the SSH public key is omitted from the request
         */
        ClientConfigurationError.createMissingSshJwkError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshJwk.code, ClientConfigurationErrorMessage.missingSshJwk.desc);
        };
        /**
         * Throws an error when the authentication scheme is set to SSH but the SSH public key ID is omitted from the request
         */
        ClientConfigurationError.createMissingSshKidError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.missingSshKid.code, ClientConfigurationErrorMessage.missingSshKid.desc);
        };
        /**
         * Throws error when provided headers don't contain a header that a server nonce can be extracted from
         */
        ClientConfigurationError.createMissingNonceAuthenticationHeadersError = function () {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.code, ClientConfigurationErrorMessage.missingNonceAuthenticationHeader.desc);
        };
        /**
         * Throws error when a provided header is invalid in any way
         */
        ClientConfigurationError.createInvalidAuthenticationHeaderError = function (invalidHeaderName, details) {
            return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthenticationHeader.code, ClientConfigurationErrorMessage.invalidAuthenticationHeader.desc + ". Invalid header: " + invalidHeaderName + ". Details: " + details);
        };
        return ClientConfigurationError;
    }(ClientAuthError));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes
     * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions
     * to ensure uniqueness of strings.
     */
    var ScopeSet = /** @class */ (function () {
        function ScopeSet(inputScopes) {
            var _this = this;
            // Filter empty string and null/undefined array items
            var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];
            var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];
            // Validate and filter scopes (validate function throws if validation fails)
            this.validateInputScopes(filteredInput);
            this.scopes = new Set(); // Iterator in constructor not supported by IE11
            filteredInput.forEach(function (scope) { return _this.scopes.add(scope); });
        }
        /**
         * Factory method to create ScopeSet from space-delimited string
         * @param inputScopeString
         * @param appClientId
         * @param scopesRequired
         */
        ScopeSet.fromString = function (inputScopeString) {
            var scopeString = inputScopeString || Constants.EMPTY_STRING;
            var inputScopes = scopeString.split(" ");
            return new ScopeSet(inputScopes);
        };
        /**
         * Creates the set of scopes to search for in cache lookups
         * @param inputScopeString
         * @returns
         */
        ScopeSet.createSearchScopes = function (inputScopeString) {
            var scopeSet = new ScopeSet(inputScopeString);
            if (!scopeSet.containsOnlyOIDCScopes()) {
                scopeSet.removeOIDCScopes();
            }
            else {
                scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);
            }
            return scopeSet;
        };
        /**
         * Used to validate the scopes input parameter requested  by the developer.
         * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.
         * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not
         */
        ScopeSet.prototype.validateInputScopes = function (inputScopes) {
            // Check if scopes are required but not given or is an empty array
            if (!inputScopes || inputScopes.length < 1) {
                throw ClientConfigurationError.createEmptyScopesArrayError();
            }
        };
        /**
         * Check if a given scope is present in this set of scopes.
         * @param scope
         */
        ScopeSet.prototype.containsScope = function (scope) {
            var lowerCaseScopes = this.printScopesLowerCase().split(" ");
            var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);
            // compare lowercase scopes
            return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;
        };
        /**
         * Check if a set of scopes is present in this set of scopes.
         * @param scopeSet
         */
        ScopeSet.prototype.containsScopeSet = function (scopeSet) {
            var _this = this;
            if (!scopeSet || scopeSet.scopes.size <= 0) {
                return false;
            }
            return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) { return _this.containsScope(scope); }));
        };
        /**
         * Check if set of scopes contains only the defaults
         */
        ScopeSet.prototype.containsOnlyOIDCScopes = function () {
            var _this = this;
            var defaultScopeCount = 0;
            OIDC_SCOPES.forEach(function (defaultScope) {
                if (_this.containsScope(defaultScope)) {
                    defaultScopeCount += 1;
                }
            });
            return this.scopes.size === defaultScopeCount;
        };
        /**
         * Appends single scope if passed
         * @param newScope
         */
        ScopeSet.prototype.appendScope = function (newScope) {
            if (!StringUtils.isEmpty(newScope)) {
                this.scopes.add(newScope.trim());
            }
        };
        /**
         * Appends multiple scopes if passed
         * @param newScopes
         */
        ScopeSet.prototype.appendScopes = function (newScopes) {
            var _this = this;
            try {
                newScopes.forEach(function (newScope) { return _this.appendScope(newScope); });
            }
            catch (e) {
                throw ClientAuthError.createAppendScopeSetError(e);
            }
        };
        /**
         * Removes element from set of scopes.
         * @param scope
         */
        ScopeSet.prototype.removeScope = function (scope) {
            if (StringUtils.isEmpty(scope)) {
                throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);
            }
            this.scopes.delete(scope.trim());
        };
        /**
         * Removes default scopes from set of scopes
         * Primarily used to prevent cache misses if the default scopes are not returned from the server
         */
        ScopeSet.prototype.removeOIDCScopes = function () {
            var _this = this;
            OIDC_SCOPES.forEach(function (defaultScope) {
                _this.scopes.delete(defaultScope);
            });
        };
        /**
         * Combines an array of scopes with the current set of scopes.
         * @param otherScopes
         */
        ScopeSet.prototype.unionScopeSets = function (otherScopes) {
            if (!otherScopes) {
                throw ClientAuthError.createEmptyInputScopeSetError();
            }
            var unionScopes = new Set(); // Iterator in constructor not supported in IE11
            otherScopes.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
            this.scopes.forEach(function (scope) { return unionScopes.add(scope.toLowerCase()); });
            return unionScopes;
        };
        /**
         * Check if scopes intersect between this set and another.
         * @param otherScopes
         */
        ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {
            if (!otherScopes) {
                throw ClientAuthError.createEmptyInputScopeSetError();
            }
            // Do not allow OIDC scopes to be the only intersecting scopes
            if (!otherScopes.containsOnlyOIDCScopes()) {
                otherScopes.removeOIDCScopes();
            }
            var unionScopes = this.unionScopeSets(otherScopes);
            var sizeOtherScopes = otherScopes.getScopeCount();
            var sizeThisScopes = this.getScopeCount();
            var sizeUnionScopes = unionScopes.size;
            return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);
        };
        /**
         * Returns size of set of scopes.
         */
        ScopeSet.prototype.getScopeCount = function () {
            return this.scopes.size;
        };
        /**
         * Returns the scopes as an array of string values
         */
        ScopeSet.prototype.asArray = function () {
            var array = [];
            this.scopes.forEach(function (val) { return array.push(val); });
            return array;
        };
        /**
         * Prints scopes into a space-delimited string
         */
        ScopeSet.prototype.printScopes = function () {
            if (this.scopes) {
                var scopeArr = this.asArray();
                return scopeArr.join(" ");
            }
            return Constants.EMPTY_STRING;
        };
        /**
         * Prints scopes into a space-delimited lower-case string (used for caching)
         */
        ScopeSet.prototype.printScopesLowerCase = function () {
            return this.printScopes().toLowerCase();
        };
        return ScopeSet;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Function to build a client info object from server clientInfo string
     * @param rawClientInfo
     * @param crypto
     */
    function buildClientInfo(rawClientInfo, crypto) {
        if (StringUtils.isEmpty(rawClientInfo)) {
            throw ClientAuthError.createClientInfoEmptyError();
        }
        try {
            var decodedClientInfo = crypto.base64Decode(rawClientInfo);
            return JSON.parse(decodedClientInfo);
        }
        catch (e) {
            throw ClientAuthError.createClientInfoDecodingError(e.message);
        }
    }
    /**
     * Function to build a client info object from cached homeAccountId string
     * @param homeAccountId
     */
    function buildClientInfoFromHomeAccountId(homeAccountId) {
        if (StringUtils.isEmpty(homeAccountId)) {
            throw ClientAuthError.createClientInfoDecodingError("Home account ID was empty.");
        }
        var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);
        return {
            uid: clientInfoParts[0],
            utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]
        };
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Authority types supported by MSAL.
     */
    var AuthorityType;
    (function (AuthorityType) {
        AuthorityType[AuthorityType["Default"] = 0] = "Default";
        AuthorityType[AuthorityType["Adfs"] = 1] = "Adfs";
        AuthorityType[AuthorityType["Dsts"] = 2] = "Dsts";
        AuthorityType[AuthorityType["Ciam"] = 3] = "Ciam";
    })(AuthorityType || (AuthorityType = {}));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).
     *
     * Key : Value Schema
     *
     * Key: <home_account_id>-<environment>-<realm*>
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      localAccountId: Original tenant-specific accountID, usually used for legacy cases
     *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt
     *      authorityType: Accounts authority type as a string
     *      name: Full name for the account, including given name and family name,
     *      clientInfo: Full base64 encoded client info received from ESTS
     *      lastModificationTime: last time this entity was modified in the cache
     *      lastModificationApp:
     *      idTokenClaims: Object containing claims parsed from ID token
     *      nativeAccountId: Account identifier on the native device
     * }
     */
    var AccountEntity = /** @class */ (function () {
        function AccountEntity() {
        }
        /**
         * Generate Account Id key component as per the schema: <home_account_id>-<environment>
         */
        AccountEntity.prototype.generateAccountId = function () {
            var accountId = [this.homeAccountId, this.environment];
            return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>
         */
        AccountEntity.prototype.generateAccountKey = function () {
            return AccountEntity.generateAccountCacheKey({
                homeAccountId: this.homeAccountId,
                environment: this.environment,
                tenantId: this.realm,
                username: this.username,
                localAccountId: this.localAccountId
            });
        };
        /**
         * returns the type of the cache (in this case account)
         */
        AccountEntity.prototype.generateType = function () {
            switch (this.authorityType) {
                case CacheAccountType.ADFS_ACCOUNT_TYPE:
                    return CacheType.ADFS;
                case CacheAccountType.MSAV1_ACCOUNT_TYPE:
                    return CacheType.MSA;
                case CacheAccountType.MSSTS_ACCOUNT_TYPE:
                    return CacheType.MSSTS;
                case CacheAccountType.GENERIC_ACCOUNT_TYPE:
                    return CacheType.GENERIC;
                default: {
                    throw ClientAuthError.createUnexpectedAccountTypeError();
                }
            }
        };
        /**
         * Returns the AccountInfo interface for this account.
         */
        AccountEntity.prototype.getAccountInfo = function () {
            return {
                homeAccountId: this.homeAccountId,
                environment: this.environment,
                tenantId: this.realm,
                username: this.username,
                localAccountId: this.localAccountId,
                name: this.name,
                idTokenClaims: this.idTokenClaims,
                nativeAccountId: this.nativeAccountId
            };
        };
        /**
         * Generates account key from interface
         * @param accountInterface
         */
        AccountEntity.generateAccountCacheKey = function (accountInterface) {
            var accountKey = [
                accountInterface.homeAccountId,
                accountInterface.environment || Constants.EMPTY_STRING,
                accountInterface.tenantId || Constants.EMPTY_STRING,
            ];
            return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.
         * @param clientInfo
         * @param authority
         * @param idToken
         * @param policy
         */
        AccountEntity.createAccount = function (clientInfo, homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment, nativeAccountId) {
            var _a, _b, _c, _d, _e, _f;
            var account = new AccountEntity();
            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;
            account.clientInfo = clientInfo;
            account.homeAccountId = homeAccountId;
            account.nativeAccountId = nativeAccountId;
            var env = environment || (authority && authority.getPreferredCache());
            if (!env) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            account.environment = env;
            // non AAD scenarios can have empty realm
            account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || Constants.EMPTY_STRING;
            if (idToken) {
                account.idTokenClaims = idToken.claims;
                // How do you account for MSA CID here?
                account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || Constants.EMPTY_STRING;
                /*
                 * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.
                 * In most cases it will contain a single email. This field should not be relied upon if a custom
                 * policy is configured to return more than 1 email.
                 */
                var preferredUsername = (_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username;
                var email = ((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : null;
                account.username = preferredUsername || email || Constants.EMPTY_STRING;
                account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;
            }
            account.cloudGraphHostName = cloudGraphHostName;
            account.msGraphHost = msGraphHost;
            return account;
        };
        /**
         * Builds non-AAD/ADFS account.
         * @param authority
         * @param idToken
         */
        AccountEntity.createGenericAccount = function (homeAccountId, idToken, authority, cloudGraphHostName, msGraphHost, environment) {
            var _a, _b, _c, _d;
            var account = new AccountEntity();
            account.authorityType = (authority &&
                authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;
            account.homeAccountId = homeAccountId;
            // non AAD scenarios can have empty realm
            account.realm = Constants.EMPTY_STRING;
            var env = environment || authority && authority.getPreferredCache();
            if (!env) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            if (idToken) {
                // How do you account for MSA CID here?
                account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || Constants.EMPTY_STRING;
                // upn claim for most ADFS scenarios
                account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || Constants.EMPTY_STRING;
                account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || Constants.EMPTY_STRING;
                account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;
            }
            account.environment = env;
            account.cloudGraphHostName = cloudGraphHostName;
            account.msGraphHost = msGraphHost;
            /*
             * add uniqueName to claims
             * account.name = idToken.claims.uniqueName;
             */
            return account;
        };
        /**
         * Generate HomeAccountId from server response
         * @param serverClientInfo
         * @param authType
         */
        AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {
            var _a;
            var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants.EMPTY_STRING;
            // since ADFS does not have tid and does not set client_info
            if (authType === AuthorityType.Adfs || authType === AuthorityType.Dsts) {
                return accountId;
            }
            // for cases where there is clientInfo
            if (serverClientInfo) {
                try {
                    var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);
                    if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {
                        return "" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;
                    }
                }
                catch (e) { }
            }
            // default to "sub" claim
            logger.verbose("No client info in response");
            return accountId;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AccountEntity.isAccountEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("localAccountId") &&
                entity.hasOwnProperty("username") &&
                entity.hasOwnProperty("authorityType"));
        };
        /**
         * Helper function to determine whether 2 accountInfo objects represent the same account
         * @param accountA
         * @param accountB
         * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality
         */
        AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {
            if (!accountA || !accountB) {
                return false;
            }
            var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false
            if (compareClaims) {
                var accountAClaims = (accountA.idTokenClaims || {});
                var accountBClaims = (accountB.idTokenClaims || {});
                // issued at timestamp and nonce are expected to change each time a new id token is acquired
                claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&
                    (accountAClaims.nonce === accountBClaims.nonce);
            }
            return (accountA.homeAccountId === accountB.homeAccountId) &&
                (accountA.localAccountId === accountB.localAccountId) &&
                (accountA.username === accountB.username) &&
                (accountA.tenantId === accountB.tenantId) &&
                (accountA.environment === accountB.environment) &&
                (accountA.nativeAccountId === accountB.nativeAccountId) &&
                claimsMatch;
        };
        return AccountEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * JWT Token representation class. Parses token string and generates claims object.
     */
    var AuthToken = /** @class */ (function () {
        function AuthToken(rawToken, crypto) {
            if (StringUtils.isEmpty(rawToken)) {
                throw ClientAuthError.createTokenNullOrEmptyError(rawToken);
            }
            this.rawToken = rawToken;
            this.claims = AuthToken.extractTokenClaims(rawToken, crypto);
        }
        /**
         * Extract token by decoding the rawToken
         *
         * @param encodedToken
         */
        AuthToken.extractTokenClaims = function (encodedToken, crypto) {
            var decodedToken = StringUtils.decodeAuthToken(encodedToken);
            // token will be decoded to get the username
            try {
                var base64TokenPayload = decodedToken.JWSPayload;
                // base64Decode() should throw an error if there is an issue
                var base64Decoded = crypto.base64Decode(base64TokenPayload);
                return JSON.parse(base64Decoded);
            }
            catch (err) {
                throw ClientAuthError.createTokenParsingError(err);
            }
        };
        /**
         * Determine if the token's max_age has transpired
         */
        AuthToken.checkMaxAge = function (authTime, maxAge) {
            /*
             * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
             * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,
             * provide a value of 0 for the max_age parameter and the AS will force a fresh login.
             */
            var fiveMinuteSkew = 300000; // five minutes in milliseconds
            if ((maxAge === 0) || ((Date.now() - fiveMinuteSkew) > (authTime + maxAge))) {
                throw ClientAuthError.createMaxAgeTranspiredError();
            }
        };
        return AuthToken;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.
     */
    var CacheManager = /** @class */ (function () {
        function CacheManager(clientId, cryptoImpl, logger) {
            this.clientId = clientId;
            this.cryptoImpl = cryptoImpl;
            this.commonLogger = logger.clone(name$1, version$2);
        }
        /**
         * Returns all accounts in cache
         */
        CacheManager.prototype.getAllAccounts = function () {
            var _this = this;
            var allAccountKeys = this.getAccountKeys();
            if (allAccountKeys.length < 1) {
                return [];
            }
            var accountEntities = allAccountKeys.reduce(function (accounts, key) {
                var entity = _this.getAccount(key);
                if (!entity) {
                    return accounts;
                }
                accounts.push(entity);
                return accounts;
            }, []);
            if (accountEntities.length < 1) {
                return [];
            }
            else {
                var allAccounts = accountEntities.map(function (accountEntity) {
                    return _this.getAccountInfoFromEntity(accountEntity);
                });
                return allAccounts;
            }
        };
        /**
         * Gets accountInfo object based on provided filters
         */
        CacheManager.prototype.getAccountInfoFilteredBy = function (accountFilter) {
            var allAccounts = this.getAccountsFilteredBy(accountFilter);
            if (allAccounts.length > 0) {
                return this.getAccountInfoFromEntity(allAccounts[0]);
            }
            else {
                return null;
            }
        };
        CacheManager.prototype.getAccountInfoFromEntity = function (accountEntity) {
            var accountInfo = accountEntity.getAccountInfo();
            var idToken = this.getIdToken(accountInfo);
            if (idToken) {
                accountInfo.idToken = idToken.secret;
                accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;
            }
            return accountInfo;
        };
        /**
         * saves a cache record
         * @param cacheRecord
         */
        CacheManager.prototype.saveCacheRecord = function (cacheRecord) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!cacheRecord) {
                                throw ClientAuthError.createNullOrUndefinedCacheRecord();
                            }
                            if (!!cacheRecord.account) {
                                this.setAccount(cacheRecord.account);
                            }
                            if (!!cacheRecord.idToken) {
                                this.setIdTokenCredential(cacheRecord.idToken);
                            }
                            if (!!!cacheRecord.accessToken) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.saveAccessToken(cacheRecord.accessToken)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            if (!!cacheRecord.refreshToken) {
                                this.setRefreshTokenCredential(cacheRecord.refreshToken);
                            }
                            if (!!cacheRecord.appMetadata) {
                                this.setAppMetadata(cacheRecord.appMetadata);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * saves access token credential
         * @param credential
         */
        CacheManager.prototype.saveAccessToken = function (credential) {
            return __awaiter(this, void 0, void 0, function () {
                var accessTokenFilter, tokenKeys, currentScopes, removedAccessTokens;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            accessTokenFilter = {
                                clientId: credential.clientId,
                                credentialType: credential.credentialType,
                                environment: credential.environment,
                                homeAccountId: credential.homeAccountId,
                                realm: credential.realm,
                                tokenType: credential.tokenType,
                                requestedClaimsHash: credential.requestedClaimsHash
                            };
                            tokenKeys = this.getTokenKeys();
                            currentScopes = ScopeSet.fromString(credential.target);
                            removedAccessTokens = [];
                            tokenKeys.accessToken.forEach(function (key) {
                                if (!_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {
                                    return;
                                }
                                var tokenEntity = _this.getAccessTokenCredential(key);
                                if (tokenEntity && _this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {
                                    var tokenScopeSet = ScopeSet.fromString(tokenEntity.target);
                                    if (tokenScopeSet.intersectingScopeSets(currentScopes)) {
                                        removedAccessTokens.push(_this.removeAccessToken(key));
                                    }
                                }
                            });
                            return [4 /*yield*/, Promise.all(removedAccessTokens)];
                        case 1:
                            _a.sent();
                            this.setAccessTokenCredential(credential);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * retrieve accounts matching all provided filters; if no filter is set, get all accounts
         * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared
         * @param homeAccountId
         * @param environment
         * @param realm
         */
        CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {
            var _this = this;
            var allAccountKeys = this.getAccountKeys();
            var matchingAccounts = [];
            allAccountKeys.forEach(function (cacheKey) {
                if (!_this.isAccountKey(cacheKey, accountFilter.homeAccountId, accountFilter.realm)) {
                    // Don't parse value if the key doesn't match the account filters
                    return;
                }
                var entity = _this.getAccount(cacheKey);
                if (!entity) {
                    return;
                }
                if (!!accountFilter.homeAccountId && !_this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {
                    return;
                }
                if (!!accountFilter.localAccountId && !_this.matchLocalAccountId(entity, accountFilter.localAccountId)) {
                    return;
                }
                if (!!accountFilter.username && !_this.matchUsername(entity, accountFilter.username)) {
                    return;
                }
                if (!!accountFilter.environment && !_this.matchEnvironment(entity, accountFilter.environment)) {
                    return;
                }
                if (!!accountFilter.realm && !_this.matchRealm(entity, accountFilter.realm)) {
                    return;
                }
                if (!!accountFilter.nativeAccountId && !_this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {
                    return;
                }
                matchingAccounts.push(entity);
            });
            return matchingAccounts;
        };
        /**
         * Returns true if the given key matches our account key schema. Also matches homeAccountId and/or tenantId if provided
         * @param key
         * @param homeAccountId
         * @param tenantId
         * @returns
         */
        CacheManager.prototype.isAccountKey = function (key, homeAccountId, tenantId) {
            if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 3) {
                // Account cache keys contain 3 items separated by '-' (each item may also contain '-')
                return false;
            }
            if (homeAccountId && !key.toLowerCase().includes(homeAccountId.toLowerCase())) {
                return false;
            }
            if (tenantId && !key.toLowerCase().includes(tenantId.toLowerCase())) {
                return false;
            }
            // Do not check environment as aliasing can cause false negatives
            return true;
        };
        /**
         * Returns true if the given key matches our credential key schema.
         * @param key
         */
        CacheManager.prototype.isCredentialKey = function (key) {
            if (key.split(Separators.CACHE_KEY_SEPARATOR).length < 6) {
                // Credential cache keys contain 6 items separated by '-' (each item may also contain '-')
                return false;
            }
            var lowerCaseKey = key.toLowerCase();
            // Credential keys must indicate what credential type they represent
            if (lowerCaseKey.indexOf(CredentialType.ID_TOKEN.toLowerCase()) === -1 &&
                lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) === -1 &&
                lowerCaseKey.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) === -1 &&
                lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) === -1) {
                return false;
            }
            if (lowerCaseKey.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) > -1) {
                // Refresh tokens must contain the client id or family id
                var clientIdValidation = "" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + this.clientId + Separators.CACHE_KEY_SEPARATOR;
                var familyIdValidation = "" + CredentialType.REFRESH_TOKEN + Separators.CACHE_KEY_SEPARATOR + THE_FAMILY_ID + Separators.CACHE_KEY_SEPARATOR;
                if (lowerCaseKey.indexOf(clientIdValidation.toLowerCase()) === -1 && lowerCaseKey.indexOf(familyIdValidation.toLowerCase()) === -1) {
                    return false;
                }
            }
            else if (lowerCaseKey.indexOf(this.clientId.toLowerCase()) === -1) {
                // Tokens must contain the clientId
                return false;
            }
            return true;
        };
        /**
         * Returns whether or not the given credential entity matches the filter
         * @param entity
         * @param filter
         * @returns
         */
        CacheManager.prototype.credentialMatchesFilter = function (entity, filter) {
            if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {
                return false;
            }
            if (!!filter.userAssertionHash && !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {
                return false;
            }
            /*
             * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of ""
             * because we don't want a client_credential request to return a cached token that has a homeAccountId
             */
            if ((typeof filter.homeAccountId === "string") && !this.matchHomeAccountId(entity, filter.homeAccountId)) {
                return false;
            }
            if (!!filter.environment && !this.matchEnvironment(entity, filter.environment)) {
                return false;
            }
            if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {
                return false;
            }
            if (!!filter.credentialType && !this.matchCredentialType(entity, filter.credentialType)) {
                return false;
            }
            if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {
                return false;
            }
            /*
             * idTokens do not have "target", target specific refreshTokens do exist for some types of authentication
             * Resource specific refresh tokens case will be added when the support is deemed necessary
             */
            if (!!filter.target && !this.matchTarget(entity, filter.target)) {
                return false;
            }
            // If request OR cached entity has requested Claims Hash, check if they match
            if (filter.requestedClaimsHash || entity.requestedClaimsHash) {
                // Don't match if either is undefined or they are different
                if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {
                    return false;
                }
            }
            // Access Token with Auth Scheme specific matching
            if (entity.credentialType === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {
                if (!!filter.tokenType && !this.matchTokenType(entity, filter.tokenType)) {
                    return false;
                }
                // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key
                if (filter.tokenType === exports.AuthenticationScheme.SSH) {
                    if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {
                        return false;
                    }
                }
            }
            return true;
        };
        /**
         * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata
         * @param filter
         */
        CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {
            return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);
        };
        /**
         * Support function to help match appMetadata
         * @param environment
         * @param clientId
         */
        CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {
            var _this = this;
            var allCacheKeys = this.getKeys();
            var matchingAppMetadata = {};
            allCacheKeys.forEach(function (cacheKey) {
                // don't parse any non-appMetadata type cache entities
                if (!_this.isAppMetadata(cacheKey)) {
                    return;
                }
                // Attempt retrieval
                var entity = _this.getAppMetadata(cacheKey);
                if (!entity) {
                    return;
                }
                if (!!environment && !_this.matchEnvironment(entity, environment)) {
                    return;
                }
                if (!!clientId && !_this.matchClientId(entity, clientId)) {
                    return;
                }
                matchingAppMetadata[cacheKey] = entity;
            });
            return matchingAppMetadata;
        };
        /**
         * retrieve authorityMetadata that contains a matching alias
         * @param filter
         */
        CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {
            var _this = this;
            var allCacheKeys = this.getAuthorityMetadataKeys();
            var matchedEntity = null;
            allCacheKeys.forEach(function (cacheKey) {
                // don't parse any non-authorityMetadata type cache entities
                if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {
                    return;
                }
                // Attempt retrieval
                var entity = _this.getAuthorityMetadata(cacheKey);
                if (!entity) {
                    return;
                }
                if (entity.aliases.indexOf(host) === -1) {
                    return;
                }
                matchedEntity = entity;
            });
            return matchedEntity;
        };
        /**
         * Removes all accounts and related tokens from cache.
         */
        CacheManager.prototype.removeAllAccounts = function () {
            return __awaiter(this, void 0, void 0, function () {
                var allAccountKeys, removedAccounts;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            allAccountKeys = this.getAccountKeys();
                            removedAccounts = [];
                            allAccountKeys.forEach(function (cacheKey) {
                                removedAccounts.push(_this.removeAccount(cacheKey));
                            });
                            return [4 /*yield*/, Promise.all(removedAccounts)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes the account and related tokens for a given account key
         * @param account
         */
        CacheManager.prototype.removeAccount = function (accountKey) {
            return __awaiter(this, void 0, void 0, function () {
                var account;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            account = this.getAccount(accountKey);
                            if (!account) {
                                throw ClientAuthError.createNoAccountFoundError();
                            }
                            return [4 /*yield*/, this.removeAccountContext(account)];
                        case 1:
                            _a.sent();
                            this.removeItem(accountKey);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes credentials associated with the provided account
         * @param account
         */
        CacheManager.prototype.removeAccountContext = function (account) {
            return __awaiter(this, void 0, void 0, function () {
                var allTokenKeys, accountId, removedCredentials;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            allTokenKeys = this.getTokenKeys();
                            accountId = account.generateAccountId();
                            removedCredentials = [];
                            allTokenKeys.idToken.forEach(function (key) {
                                if (key.indexOf(accountId) === 0) {
                                    _this.removeIdToken(key);
                                }
                            });
                            allTokenKeys.accessToken.forEach(function (key) {
                                if (key.indexOf(accountId) === 0) {
                                    removedCredentials.push(_this.removeAccessToken(key));
                                }
                            });
                            allTokenKeys.refreshToken.forEach(function (key) {
                                if (key.indexOf(accountId) === 0) {
                                    _this.removeRefreshToken(key);
                                }
                            });
                            return [4 /*yield*/, Promise.all(removedCredentials)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * returns a boolean if the given credential is removed
         * @param credential
         */
        CacheManager.prototype.removeAccessToken = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var credential, accessTokenWithAuthSchemeEntity, kid;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            credential = this.getAccessTokenCredential(key);
                            if (!credential) {
                                return [2 /*return*/];
                            }
                            if (!(credential.credentialType.toLowerCase() === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase())) return [3 /*break*/, 4];
                            if (!(credential.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 4];
                            accessTokenWithAuthSchemeEntity = credential;
                            kid = accessTokenWithAuthSchemeEntity.keyId;
                            if (!kid) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.cryptoImpl.removeTokenBindingKey(kid)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a.sent();
                            throw ClientAuthError.createBindingKeyNotRemovedError();
                        case 4: return [2 /*return*/, this.removeItem(key)];
                    }
                });
            });
        };
        /**
         * Removes all app metadata objects from cache.
         */
        CacheManager.prototype.removeAppMetadata = function () {
            var _this = this;
            var allCacheKeys = this.getKeys();
            allCacheKeys.forEach(function (cacheKey) {
                if (_this.isAppMetadata(cacheKey)) {
                    _this.removeItem(cacheKey);
                }
            });
            return true;
        };
        /**
         * Retrieve the cached credentials into a cacherecord
         * @param account
         * @param clientId
         * @param scopes
         * @param environment
         * @param authScheme
         */
        CacheManager.prototype.readCacheRecord = function (account, request, environment) {
            var tokenKeys = this.getTokenKeys();
            var cachedAccount = this.readAccountFromCache(account);
            var cachedIdToken = this.getIdToken(account, tokenKeys);
            var cachedAccessToken = this.getAccessToken(account, request, tokenKeys);
            var cachedRefreshToken = this.getRefreshToken(account, false, tokenKeys);
            var cachedAppMetadata = this.readAppMetadataFromCache(environment);
            if (cachedAccount && cachedIdToken) {
                cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;
            }
            return {
                account: cachedAccount,
                idToken: cachedIdToken,
                accessToken: cachedAccessToken,
                refreshToken: cachedRefreshToken,
                appMetadata: cachedAppMetadata,
            };
        };
        /**
         * Retrieve AccountEntity from cache
         * @param account
         */
        CacheManager.prototype.readAccountFromCache = function (account) {
            var accountKey = AccountEntity.generateAccountCacheKey(account);
            return this.getAccount(accountKey);
        };
        /**
         * Retrieve IdTokenEntity from cache
         * @param clientId
         * @param account
         * @param inputRealm
         */
        CacheManager.prototype.getIdToken = function (account, tokenKeys) {
            this.commonLogger.trace("CacheManager - getIdToken called");
            var idTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: CredentialType.ID_TOKEN,
                clientId: this.clientId,
                realm: account.tenantId,
            };
            var idTokens = this.getIdTokensByFilter(idTokenFilter, tokenKeys);
            var numIdTokens = idTokens.length;
            if (numIdTokens < 1) {
                this.commonLogger.info("CacheManager:getIdToken - No token found");
                return null;
            }
            else if (numIdTokens > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            this.commonLogger.info("CacheManager:getIdToken - Returning id token");
            return idTokens[0];
        };
        /**
         * Gets all idTokens matching the given filter
         * @param filter
         * @returns
         */
        CacheManager.prototype.getIdTokensByFilter = function (filter, tokenKeys) {
            var _this = this;
            var idTokenKeys = tokenKeys && tokenKeys.idToken || this.getTokenKeys().idToken;
            var idTokens = [];
            idTokenKeys.forEach(function (key) {
                if (!_this.idTokenKeyMatchesFilter(key, __assign({ clientId: _this.clientId }, filter))) {
                    return;
                }
                var idToken = _this.getIdTokenCredential(key);
                if (idToken && _this.credentialMatchesFilter(idToken, filter)) {
                    idTokens.push(idToken);
                }
            });
            return idTokens;
        };
        /**
         * Validate the cache key against filter before retrieving and parsing cache value
         * @param key
         * @param filter
         * @returns
         */
        CacheManager.prototype.idTokenKeyMatchesFilter = function (inputKey, filter) {
            var key = inputKey.toLowerCase();
            if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {
                return false;
            }
            if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {
                return false;
            }
            return true;
        };
        /**
         * Removes idToken from the cache
         * @param key
         */
        CacheManager.prototype.removeIdToken = function (key) {
            this.removeItem(key);
        };
        /**
         * Removes refresh token from the cache
         * @param key
         */
        CacheManager.prototype.removeRefreshToken = function (key) {
            this.removeItem(key);
        };
        /**
         * Retrieve AccessTokenEntity from cache
         * @param clientId
         * @param account
         * @param scopes
         * @param authScheme
         */
        CacheManager.prototype.getAccessToken = function (account, request, tokenKeys) {
            var _this = this;
            this.commonLogger.trace("CacheManager - getAccessToken called");
            var scopes = ScopeSet.createSearchScopes(request.scopes);
            var authScheme = request.authenticationScheme || exports.AuthenticationScheme.BEARER;
            /*
             * Distinguish between Bearer and PoP/SSH token cache types
             * Cast to lowercase to handle "bearer" from ADFS
             */
            var credentialType = (authScheme && authScheme.toLowerCase() !== exports.AuthenticationScheme.BEARER.toLowerCase()) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;
            var accessTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: credentialType,
                clientId: this.clientId,
                realm: account.tenantId,
                target: scopes,
                tokenType: authScheme,
                keyId: request.sshKid,
                requestedClaimsHash: request.requestedClaimsHash,
            };
            var accessTokenKeys = tokenKeys && tokenKeys.accessToken || this.getTokenKeys().accessToken;
            var accessTokens = [];
            accessTokenKeys.forEach(function (key) {
                // Validate key
                if (_this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {
                    var accessToken = _this.getAccessTokenCredential(key);
                    // Validate value
                    if (accessToken && _this.credentialMatchesFilter(accessToken, accessTokenFilter)) {
                        accessTokens.push(accessToken);
                    }
                }
            });
            var numAccessTokens = accessTokens.length;
            if (numAccessTokens < 1) {
                this.commonLogger.info("CacheManager:getAccessToken - No token found");
                return null;
            }
            else if (numAccessTokens > 1) {
                throw ClientAuthError.createMultipleMatchingTokensInCacheError();
            }
            this.commonLogger.info("CacheManager:getAccessToken - Returning access token");
            return accessTokens[0];
        };
        /**
         * Validate the cache key against filter before retrieving and parsing cache value
         * @param key
         * @param filter
         * @param keyMustContainAllScopes
         * @returns
         */
        CacheManager.prototype.accessTokenKeyMatchesFilter = function (inputKey, filter, keyMustContainAllScopes) {
            var key = inputKey.toLowerCase();
            if (filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {
                return false;
            }
            if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {
                return false;
            }
            if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {
                return false;
            }
            if (filter.requestedClaimsHash && key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {
                return false;
            }
            if (filter.target) {
                var scopes = filter.target.asArray();
                for (var i = 0; i < scopes.length; i++) {
                    if (keyMustContainAllScopes && !key.includes(scopes[i].toLowerCase())) {
                        // When performing a cache lookup a missing scope would be a cache miss
                        return false;
                    }
                    else if (!keyMustContainAllScopes && key.includes(scopes[i].toLowerCase())) {
                        // When performing a cache write, any token with a subset of requested scopes should be replaced
                        return true;
                    }
                }
            }
            return true;
        };
        /**
         * Gets all access tokens matching the filter
         * @param filter
         * @returns
         */
        CacheManager.prototype.getAccessTokensByFilter = function (filter) {
            var _this = this;
            var tokenKeys = this.getTokenKeys();
            var accessTokens = [];
            tokenKeys.accessToken.forEach(function (key) {
                if (!_this.accessTokenKeyMatchesFilter(key, filter, true)) {
                    return;
                }
                var accessToken = _this.getAccessTokenCredential(key);
                if (accessToken && _this.credentialMatchesFilter(accessToken, filter)) {
                    accessTokens.push(accessToken);
                }
            });
            return accessTokens;
        };
        /**
         * Helper to retrieve the appropriate refresh token from cache
         * @param clientId
         * @param account
         * @param familyRT
         */
        CacheManager.prototype.getRefreshToken = function (account, familyRT, tokenKeys) {
            var _this = this;
            this.commonLogger.trace("CacheManager - getRefreshToken called");
            var id = familyRT ? THE_FAMILY_ID : undefined;
            var refreshTokenFilter = {
                homeAccountId: account.homeAccountId,
                environment: account.environment,
                credentialType: CredentialType.REFRESH_TOKEN,
                clientId: this.clientId,
                familyId: id,
            };
            var refreshTokenKeys = tokenKeys && tokenKeys.refreshToken || this.getTokenKeys().refreshToken;
            var refreshTokens = [];
            refreshTokenKeys.forEach(function (key) {
                // Validate key
                if (_this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {
                    var refreshToken = _this.getRefreshTokenCredential(key);
                    // Validate value
                    if (refreshToken && _this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {
                        refreshTokens.push(refreshToken);
                    }
                }
            });
            var numRefreshTokens = refreshTokens.length;
            if (numRefreshTokens < 1) {
                this.commonLogger.info("CacheManager:getRefreshToken - No refresh token found.");
                return null;
            }
            // address the else case after remove functions address environment aliases
            this.commonLogger.info("CacheManager:getRefreshToken - returning refresh token");
            return refreshTokens[0];
        };
        /**
         * Validate the cache key against filter before retrieving and parsing cache value
         * @param key
         * @param filter
         */
        CacheManager.prototype.refreshTokenKeyMatchesFilter = function (inputKey, filter) {
            var key = inputKey.toLowerCase();
            if (filter.familyId && key.indexOf(filter.familyId.toLowerCase()) === -1) {
                return false;
            }
            // If familyId is used, clientId is not in the key
            if (!filter.familyId && filter.clientId && key.indexOf(filter.clientId.toLowerCase()) === -1) {
                return false;
            }
            if (filter.homeAccountId && key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {
                return false;
            }
            return true;
        };
        /**
         * Retrieve AppMetadataEntity from cache
         */
        CacheManager.prototype.readAppMetadataFromCache = function (environment) {
            var appMetadataFilter = {
                environment: environment,
                clientId: this.clientId,
            };
            var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);
            var appMetadataEntries = Object.keys(appMetadata).map(function (key) { return appMetadata[key]; });
            var numAppMetadata = appMetadataEntries.length;
            if (numAppMetadata < 1) {
                return null;
            }
            else if (numAppMetadata > 1) {
                throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();
            }
            return appMetadataEntries[0];
        };
        /**
         * Return the family_id value associated  with FOCI
         * @param environment
         * @param clientId
         */
        CacheManager.prototype.isAppMetadataFOCI = function (environment) {
            var appMetadata = this.readAppMetadataFromCache(environment);
            return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);
        };
        /**
         * helper to match account ids
         * @param value
         * @param homeAccountId
         */
        CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {
            return !!((typeof entity.homeAccountId === "string") && (homeAccountId === entity.homeAccountId));
        };
        /**
         * helper to match account ids
         * @param entity
         * @param localAccountId
         * @returns
         */
        CacheManager.prototype.matchLocalAccountId = function (entity, localAccountId) {
            return !!((typeof entity.localAccountId === "string") && (localAccountId === entity.localAccountId));
        };
        /**
         * helper to match usernames
         * @param entity
         * @param username
         * @returns
         */
        CacheManager.prototype.matchUsername = function (entity, username) {
            return !!((typeof entity.username === "string") && (username.toLowerCase() === entity.username.toLowerCase()));
        };
        /**
         * helper to match assertion
         * @param value
         * @param oboAssertion
         */
        CacheManager.prototype.matchUserAssertionHash = function (entity, userAssertionHash) {
            return !!(entity.userAssertionHash && userAssertionHash === entity.userAssertionHash);
        };
        /**
         * helper to match environment
         * @param value
         * @param environment
         */
        CacheManager.prototype.matchEnvironment = function (entity, environment) {
            var cloudMetadata = this.getAuthorityMetadataByAlias(environment);
            if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {
                return true;
            }
            return false;
        };
        /**
         * helper to match credential type
         * @param entity
         * @param credentialType
         */
        CacheManager.prototype.matchCredentialType = function (entity, credentialType) {
            return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());
        };
        /**
         * helper to match client ids
         * @param entity
         * @param clientId
         */
        CacheManager.prototype.matchClientId = function (entity, clientId) {
            return !!(entity.clientId && clientId === entity.clientId);
        };
        /**
         * helper to match family ids
         * @param entity
         * @param familyId
         */
        CacheManager.prototype.matchFamilyId = function (entity, familyId) {
            return !!(entity.familyId && familyId === entity.familyId);
        };
        /**
         * helper to match realm
         * @param entity
         * @param realm
         */
        CacheManager.prototype.matchRealm = function (entity, realm) {
            return !!(entity.realm && realm === entity.realm);
        };
        /**
         * helper to match nativeAccountId
         * @param entity
         * @param nativeAccountId
         * @returns boolean indicating the match result
         */
        CacheManager.prototype.matchNativeAccountId = function (entity, nativeAccountId) {
            return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);
        };
        /**
         * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.
         * @param entity
         * @param target
         */
        CacheManager.prototype.matchTarget = function (entity, target) {
            var isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);
            if (isNotAccessTokenCredential || !entity.target) {
                return false;
            }
            var entityScopeSet = ScopeSet.fromString(entity.target);
            return entityScopeSet.containsScopeSet(target);
        };
        /**
         * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise
         * @param entity
         * @param tokenType
         */
        CacheManager.prototype.matchTokenType = function (entity, tokenType) {
            return !!(entity.tokenType && entity.tokenType === tokenType);
        };
        /**
         * Returns true if the credential's keyId matches the one in the request, false otherwise
         * @param entity
         * @param tokenType
         */
        CacheManager.prototype.matchKeyId = function (entity, keyId) {
            return !!(entity.keyId && entity.keyId === keyId);
        };
        /**
         * returns if a given cache entity is of the type appmetadata
         * @param key
         */
        CacheManager.prototype.isAppMetadata = function (key) {
            return key.indexOf(APP_METADATA) !== -1;
        };
        /**
         * returns if a given cache entity is of the type authoritymetadata
         * @param key
         */
        CacheManager.prototype.isAuthorityMetadata = function (key) {
            return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;
        };
        /**
         * returns cache key used for cloud instance metadata
         */
        CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {
            return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + "-" + this.clientId + "-" + authority;
        };
        /**
         * Helper to convert serialized data to object
         * @param obj
         * @param json
         */
        CacheManager.toObject = function (obj, json) {
            for (var propertyName in json) {
                obj[propertyName] = json[propertyName];
            }
            return obj;
        };
        return CacheManager;
    }());
    var DefaultStorageClass = /** @class */ (function (_super) {
        __extends(DefaultStorageClass, _super);
        function DefaultStorageClass() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DefaultStorageClass.prototype.setAccount = function () {
            var notImplErr = "Storage interface - setAccount() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAccount = function () {
            var notImplErr = "Storage interface - getAccount() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setIdTokenCredential = function () {
            var notImplErr = "Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getIdTokenCredential = function () {
            var notImplErr = "Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setAccessTokenCredential = function () {
            var notImplErr = "Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAccessTokenCredential = function () {
            var notImplErr = "Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setRefreshTokenCredential = function () {
            var notImplErr = "Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getRefreshTokenCredential = function () {
            var notImplErr = "Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setAppMetadata = function () {
            var notImplErr = "Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAppMetadata = function () {
            var notImplErr = "Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setServerTelemetry = function () {
            var notImplErr = "Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getServerTelemetry = function () {
            var notImplErr = "Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setAuthorityMetadata = function () {
            var notImplErr = "Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAuthorityMetadata = function () {
            var notImplErr = "Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {
            var notImplErr = "Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.setThrottlingCache = function () {
            var notImplErr = "Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getThrottlingCache = function () {
            var notImplErr = "Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.removeItem = function () {
            var notImplErr = "Storage interface - removeItem() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.containsKey = function () {
            var notImplErr = "Storage interface - containsKey() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getKeys = function () {
            var notImplErr = "Storage interface - getKeys() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getAccountKeys = function () {
            var notImplErr = "Storage interface - getAccountKeys() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.getTokenKeys = function () {
            var notImplErr = "Storage interface - getTokenKeys() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        DefaultStorageClass.prototype.clear = function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Storage interface - clear() has not been implemented for the cacheStorage interface.";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        };
        DefaultStorageClass.prototype.updateCredentialCacheKey = function () {
            var notImplErr = "Storage interface - updateCredentialCacheKey() has not been implemented for the cacheStorage interface.";
            throw AuthError.createUnexpectedError(notImplErr);
        };
        return DefaultStorageClass;
    }(CacheManager));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Token renewal offset default in seconds
    var DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;
    var DEFAULT_SYSTEM_OPTIONS = {
        tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,
        preventCorsPreflight: false
    };
    var DEFAULT_LOGGER_IMPLEMENTATION = {
        loggerCallback: function () {
            // allow users to not set loggerCallback
        },
        piiLoggingEnabled: false,
        logLevel: exports.LogLevel.Info,
        correlationId: Constants.EMPTY_STRING
    };
    var DEFAULT_NETWORK_IMPLEMENTATION = {
        sendGetRequestAsync: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Network interface - sendGetRequestAsync() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        },
        sendPostRequestAsync: function () {
            return __awaiter(this, void 0, void 0, function () {
                var notImplErr;
                return __generator(this, function (_a) {
                    notImplErr = "Network interface - sendPostRequestAsync() has not been implemented";
                    throw AuthError.createUnexpectedError(notImplErr);
                });
            });
        }
    };
    var DEFAULT_LIBRARY_INFO = {
        sku: Constants.SKU,
        version: version$2,
        cpu: Constants.EMPTY_STRING,
        os: Constants.EMPTY_STRING
    };
    var DEFAULT_CLIENT_CREDENTIALS = {
        clientSecret: Constants.EMPTY_STRING,
        clientAssertion: undefined
    };
    var DEFAULT_AZURE_CLOUD_OPTIONS = {
        azureCloudInstance: AzureCloudInstance.None,
        tenant: "" + Constants.DEFAULT_COMMON_TENANT
    };
    var DEFAULT_TELEMETRY_OPTIONS = {
        application: {
            appName: "",
            appVersion: ""
        }
    };
    /**
     * Function that sets the default options when not explicitly configured from app developer
     *
     * @param Configuration
     *
     * @returns Configuration
     */
    function buildClientConfiguration(_a) {
        var userAuthOptions = _a.authOptions, userSystemOptions = _a.systemOptions, userLoggerOption = _a.loggerOptions, storageImplementation = _a.storageInterface, networkImplementation = _a.networkInterface, cryptoImplementation = _a.cryptoInterface, clientCredentials = _a.clientCredentials, libraryInfo = _a.libraryInfo, telemetry = _a.telemetry, serverTelemetryManager = _a.serverTelemetryManager, persistencePlugin = _a.persistencePlugin, serializableCache = _a.serializableCache;
        var loggerOptions = __assign(__assign({}, DEFAULT_LOGGER_IMPLEMENTATION), userLoggerOption);
        return {
            authOptions: buildAuthOptions(userAuthOptions),
            systemOptions: __assign(__assign({}, DEFAULT_SYSTEM_OPTIONS), userSystemOptions),
            loggerOptions: loggerOptions,
            storageInterface: storageImplementation || new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions)),
            networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,
            cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,
            clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,
            libraryInfo: __assign(__assign({}, DEFAULT_LIBRARY_INFO), libraryInfo),
            telemetry: __assign(__assign({}, DEFAULT_TELEMETRY_OPTIONS), telemetry),
            serverTelemetryManager: serverTelemetryManager || null,
            persistencePlugin: persistencePlugin || null,
            serializableCache: serializableCache || null,
        };
    }
    /**
     * Construct authoptions from the client and platform passed values
     * @param authOptions
     */
    function buildAuthOptions(authOptions) {
        return __assign({ clientCapabilities: [], azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS, skipAuthorityMetadataCache: false }, authOptions);
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Error thrown when there is an error with the server code, for example, unavailability.
     */
    var ServerError = /** @class */ (function (_super) {
        __extends(ServerError, _super);
        function ServerError(errorCode, errorMessage, subError) {
            var _this = _super.call(this, errorCode, errorMessage, subError) || this;
            _this.name = "ServerError";
            Object.setPrototypeOf(_this, ServerError.prototype);
            return _this;
        }
        return ServerError;
    }(AuthError));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ThrottlingUtils = /** @class */ (function () {
        function ThrottlingUtils() {
        }
        /**
         * Prepares a RequestThumbprint to be stored as a key.
         * @param thumbprint
         */
        ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {
            return ThrottlingConstants.THROTTLING_PREFIX + "." + JSON.stringify(thumbprint);
        };
        /**
         * Performs necessary throttling checks before a network request.
         * @param cacheManager
         * @param thumbprint
         */
        ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {
            var _a;
            var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);
            var value = cacheManager.getThrottlingCache(key);
            if (value) {
                if (value.throttleTime < Date.now()) {
                    cacheManager.removeItem(key);
                    return;
                }
                throw new ServerError(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(" ")) || Constants.EMPTY_STRING, value.errorMessage, value.subError);
            }
        };
        /**
         * Performs necessary throttling checks after a network request.
         * @param cacheManager
         * @param thumbprint
         * @param response
         */
        ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {
            if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {
                var thumbprintValue = {
                    throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),
                    error: response.body.error,
                    errorCodes: response.body.error_codes,
                    errorMessage: response.body.error_description,
                    subError: response.body.suberror
                };
                cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);
            }
        };
        /**
         * Checks a NetworkResponse object's status codes against 429 or 5xx
         * @param response
         */
        ThrottlingUtils.checkResponseStatus = function (response) {
            return response.status === 429 || response.status >= 500 && response.status < 600;
        };
        /**
         * Checks a NetworkResponse object's RetryAfter header
         * @param response
         */
        ThrottlingUtils.checkResponseForRetryAfter = function (response) {
            if (response.headers) {
                return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);
            }
            return false;
        };
        /**
         * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.
         * @param throttleTime
         */
        ThrottlingUtils.calculateThrottleTime = function (throttleTime) {
            var time = throttleTime <= 0 ? 0 : throttleTime;
            var currentSeconds = Date.now() / 1000;
            return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);
        };
        ThrottlingUtils.removeThrottle = function (cacheManager, clientId, request, homeAccountIdentifier) {
            var thumbprint = {
                clientId: clientId,
                authority: request.authority,
                scopes: request.scopes,
                homeAccountIdentifier: homeAccountIdentifier,
                claims: request.claims,
                authenticationScheme: request.authenticationScheme,
                resourceRequestMethod: request.resourceRequestMethod,
                resourceRequestUri: request.resourceRequestUri,
                shrClaims: request.shrClaims,
                sshKid: request.sshKid
            };
            var key = this.generateThrottlingStorageKey(thumbprint);
            cacheManager.removeItem(key);
        };
        return ThrottlingUtils;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NetworkManager = /** @class */ (function () {
        function NetworkManager(networkClient, cacheManager) {
            this.networkClient = networkClient;
            this.cacheManager = cacheManager;
        }
        /**
         * Wraps sendPostRequestAsync with necessary preflight and postflight logic
         * @param thumbprint
         * @param tokenEndpoint
         * @param options
         */
        NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            ThrottlingUtils.preProcess(this.cacheManager, thumbprint);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];
                        case 2:
                            response = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                throw e_1;
                            }
                            else {
                                throw ClientAuthError.createNetworkError(tokenEndpoint, e_1);
                            }
                        case 4:
                            ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        return NetworkManager;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var CcsCredentialType;
    (function (CcsCredentialType) {
        CcsCredentialType["HOME_ACCOUNT_ID"] = "home_account_id";
        CcsCredentialType["UPN"] = "UPN";
    })(CcsCredentialType || (CcsCredentialType = {}));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Validates server consumable params from the "request" objects
     */
    var RequestValidator$1 = /** @class */ (function () {
        function RequestValidator() {
        }
        /**
         * Utility to check if the `redirectUri` in the request is a non-null value
         * @param redirectUri
         */
        RequestValidator.validateRedirectUri = function (redirectUri) {
            if (StringUtils.isEmpty(redirectUri)) {
                throw ClientConfigurationError.createRedirectUriEmptyError();
            }
        };
        /**
         * Utility to validate prompt sent by the user in the request
         * @param prompt
         */
        RequestValidator.validatePrompt = function (prompt) {
            var promptValues = [];
            for (var value in PromptValue) {
                promptValues.push(PromptValue[value]);
            }
            if (promptValues.indexOf(prompt) < 0) {
                throw ClientConfigurationError.createInvalidPromptError(prompt);
            }
        };
        RequestValidator.validateClaims = function (claims) {
            try {
                JSON.parse(claims);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidClaimsRequestError();
            }
        };
        /**
         * Utility to validate code_challenge and code_challenge_method
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
            else {
                this.validateCodeChallengeMethod(codeChallengeMethod);
            }
        };
        /**
         * Utility to validate code_challenge_method
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
            if ([
                CodeChallengeMethodValues.PLAIN,
                CodeChallengeMethodValues.S256
            ].indexOf(codeChallengeMethod) < 0) {
                throw ClientConfigurationError.createInvalidCodeChallengeMethodError();
            }
        };
        /**
         * Removes unnecessary, duplicate, and empty string query parameters from extraQueryParameters
         * @param request
         */
        RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
            if (!eQParams) {
                return {};
            }
            // Remove any query parameters already included in SSO params
            queryParams.forEach(function (value, key) {
                if (eQParams[key]) {
                    delete eQParams[key];
                }
            });
            // remove empty string parameters
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            return Object.fromEntries(Object.entries(eQParams).filter(function (_a) {
                var value = _a[1];
                return value !== "";
            }));
        };
        return RequestValidator;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RequestParameterBuilder$1 = /** @class */ (function () {
        function RequestParameterBuilder() {
            this.parameters = new Map();
        }
        /**
         * add response_type = code
         */
        RequestParameterBuilder.prototype.addResponseTypeCode = function () {
            this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));
        };
        /**
         * add response_type = token id_token
         */
        RequestParameterBuilder.prototype.addResponseTypeForTokenAndIdToken = function () {
            this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.TOKEN_RESPONSE_TYPE + " " + Constants.ID_TOKEN_RESPONSE_TYPE));
        };
        /**
         * add response_mode. defaults to query.
         * @param responseMode
         */
        RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
            this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));
        };
        /**
         * Add flag to indicate STS should attempt to use WAM if available
         */
        RequestParameterBuilder.prototype.addNativeBroker = function () {
            this.parameters.set(AADServerParamKeys.NATIVE_BROKER, encodeURIComponent("1"));
        };
        /**
         * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
         * @param scopeSet
         * @param addOidcScopes
         */
        RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
            if (addOidcScopes === void 0) { addOidcScopes = true; }
            var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];
            var scopeSet = new ScopeSet(requestScopes);
            this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
        };
        /**
         * add clientId
         * @param clientId
         */
        RequestParameterBuilder.prototype.addClientId = function (clientId) {
            this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
        };
        /**
         * add redirect_uri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {
            RequestValidator$1.validateRedirectUri(redirectUri);
            this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add post logout redirectUri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {
            RequestValidator$1.validateRedirectUri(redirectUri);
            this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add id_token_hint to logout request
         * @param idTokenHint
         */
        RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {
            this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
        };
        /**
         * add domain_hint
         * @param domainHint
         */
        RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
            this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
        };
        /**
         * add login_hint
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
            this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
        };
        /**
         * Adds the CCS (Cache Credential Service) query parameter for login_hint
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {
            this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent("UPN:" + loginHint));
        };
        /**
         * Adds the CCS (Cache Credential Service) query parameter for account object
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {
            this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent("Oid:" + clientInfo.uid + "@" + clientInfo.utid));
        };
        /**
         * add sid
         * @param sid
         */
        RequestParameterBuilder.prototype.addSid = function (sid) {
            this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));
        };
        /**
         * add claims
         * @param claims
         */
        RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
            var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
            RequestValidator$1.validateClaims(mergedClaims);
            this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
        };
        /**
         * add correlationId
         * @param correlationId
         */
        RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
            this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
        };
        /**
         * add library info query params
         * @param libraryInfo
         */
        RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
            // Telemetry Info
            this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
            this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
            if (libraryInfo.os) {
                this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
            }
            if (libraryInfo.cpu) {
                this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
            }
        };
        /**
         * Add client telemetry parameters
         * @param appTelemetry
         */
        RequestParameterBuilder.prototype.addApplicationTelemetry = function (appTelemetry) {
            if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appName) {
                this.parameters.set(AADServerParamKeys.X_APP_NAME, appTelemetry.appName);
            }
            if (appTelemetry === null || appTelemetry === void 0 ? void 0 : appTelemetry.appVersion) {
                this.parameters.set(AADServerParamKeys.X_APP_VER, appTelemetry.appVersion);
            }
        };
        /**
         * add prompt
         * @param prompt
         */
        RequestParameterBuilder.prototype.addPrompt = function (prompt) {
            RequestValidator$1.validatePrompt(prompt);
            this.parameters.set("" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
        };
        /**
         * add state
         * @param state
         */
        RequestParameterBuilder.prototype.addState = function (state) {
            if (!StringUtils.isEmpty(state)) {
                this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));
            }
        };
        /**
         * add nonce
         * @param nonce
         */
        RequestParameterBuilder.prototype.addNonce = function (nonce) {
            this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));
        };
        /**
         * add code_challenge and code_challenge_method
         * - throw if either of them are not passed
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            RequestValidator$1.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
            if (codeChallenge && codeChallengeMethod) {
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
            }
            else {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
            this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addDeviceCode = function (code) {
            this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
        };
        /**
         * add the `refreshToken` passed by the user
         * @param refreshToken
         */
        RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
            this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
        };
        /**
         * add the `code_verifier` passed by the user to exchange for a token
         * @param codeVerifier
         */
        RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
            this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
        };
        /**
         * add client_secret
         * @param clientSecret
         */
        RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
            this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
        };
        /**
         * add clientAssertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
            if (!StringUtils.isEmpty(clientAssertion)) {
                this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
            }
        };
        /**
         * add clientAssertionType for confidential client flows
         * @param clientAssertionType
         */
        RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
            if (!StringUtils.isEmpty(clientAssertionType)) {
                this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
            }
        };
        /**
         * add OBO assertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
            this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
            this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addGrantType = function (grantType) {
            this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
        };
        /**
         * add client info
         *
         */
        RequestParameterBuilder.prototype.addClientInfo = function () {
            this.parameters.set(CLIENT_INFO, "1");
        };
        /**
         * add extraQueryParams
         * @param eQParams
         */
        RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQParams) {
            var _this = this;
            var sanitizedEQParams = RequestValidator$1.sanitizeEQParams(eQParams, this.parameters);
            Object.keys(sanitizedEQParams).forEach(function (key) {
                _this.parameters.set(key, eQParams[key]);
            });
        };
        RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
            var mergedClaims;
            // Parse provided claims into JSON object or initialize empty object
            if (!claims) {
                mergedClaims = {};
            }
            else {
                try {
                    mergedClaims = JSON.parse(claims);
                }
                catch (e) {
                    throw ClientConfigurationError.createInvalidClaimsRequestError();
                }
            }
            if (clientCapabilities && clientCapabilities.length > 0) {
                if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {
                    // Add access_token key to claims object
                    mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};
                }
                // Add xms_cc claim with provided clientCapabilities to access_token key
                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {
                    values: clientCapabilities
                };
            }
            return JSON.stringify(mergedClaims);
        };
        /**
         * adds `username` for Password Grant flow
         * @param username
         */
        RequestParameterBuilder.prototype.addUsername = function (username) {
            this.parameters.set(PasswordGrantConstants.username, encodeURIComponent(username));
        };
        /**
         * adds `password` for Password Grant flow
         * @param password
         */
        RequestParameterBuilder.prototype.addPassword = function (password) {
            this.parameters.set(PasswordGrantConstants.password, encodeURIComponent(password));
        };
        /**
         * add pop_jwk to query params
         * @param cnfString
         */
        RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
            if (!StringUtils.isEmpty(cnfString)) {
                this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);
                this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
            }
        };
        /**
         * add SSH JWK and key ID to query params
         */
        RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {
            if (!StringUtils.isEmpty(sshJwkString)) {
                this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.SSH);
                this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));
            }
        };
        /**
         * add server telemetry fields
         * @param serverTelemetryManager
         */
        RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {
            this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());
            this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());
        };
        /**
         * Adds parameter that indicates to the server that throttling is supported
         */
        RequestParameterBuilder.prototype.addThrottling = function () {
            this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);
        };
        /**
         * Adds logout_hint parameter for "silent" logout which prevent server account picker
         */
        RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {
            this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));
        };
        /**
         * Utility to create a URL from the params map
         */
        RequestParameterBuilder.prototype.createQueryString = function () {
            var queryParameterArray = new Array();
            this.parameters.forEach(function (value, key) {
                queryParameterArray.push(key + "=" + value);
            });
            return queryParameterArray.join("&");
        };
        return RequestParameterBuilder;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
     */
    var BaseClient = /** @class */ (function () {
        function BaseClient(configuration, performanceClient) {
            // Set the configuration
            this.config = buildClientConfiguration(configuration);
            // Initialize the logger
            this.logger = new Logger(this.config.loggerOptions, name$1, version$2);
            // Initialize crypto
            this.cryptoUtils = this.config.cryptoInterface;
            // Initialize storage interface
            this.cacheManager = this.config.storageInterface;
            // Set the network interface
            this.networkClient = this.config.networkInterface;
            // Set the NetworkManager
            this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);
            // Set TelemetryManager
            this.serverTelemetryManager = this.config.serverTelemetryManager;
            // set Authority
            this.authority = this.config.authOptions.authority;
            // set performance telemetry client
            this.performanceClient = performanceClient;
        }
        /**
         * Creates default headers for requests to token endpoint
         */
        BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {
            var headers = {};
            headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;
            if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {
                switch (ccsCred.type) {
                    case CcsCredentialType.HOME_ACCOUNT_ID:
                        try {
                            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);
                            headers[HeaderNames.CCS_HEADER] = "Oid:" + clientInfo.uid + "@" + clientInfo.utid;
                        }
                        catch (e) {
                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                        }
                        break;
                    case CcsCredentialType.UPN:
                        headers[HeaderNames.CCS_HEADER] = "UPN: " + ccsCred.credential;
                        break;
                }
            }
            return headers;
        };
        /**
         * Http post to token endpoint
         * @param tokenEndpoint
         * @param queryString
         * @param headers
         * @param thumbprint
         */
        BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers })];
                        case 1:
                            response = _a.sent();
                            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {
                                // Telemetry data successfully logged by server, clear Telemetry cache
                                this.config.serverTelemetryManager.clearTelemetryCache();
                            }
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        /**
         * Updates the authority object of the client. Endpoint discovery must be completed.
         * @param updatedAuthority
         */
        BaseClient.prototype.updateAuthority = function (updatedAuthority) {
            if (!updatedAuthority.discoveryComplete()) {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Updated authority has not completed endpoint discovery.");
            }
            this.authority = updatedAuthority;
        };
        /**
         * Creates query string for the /token request
         * @param request
         */
        BaseClient.prototype.createTokenQueryParameters = function (request) {
            var parameterBuilder = new RequestParameterBuilder$1();
            if (request.tokenQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
            }
            return parameterBuilder.createQueryString();
        };
        return BaseClient;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc
     *
     * Key:Value Schema:
     *
     * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>-<requestedClaims*>-<scheme*>
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, usually only used for refresh tokens
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     *      tokenType: Matches the authentication scheme for which the token was issued (i.e. Bearer or pop)
     *      requestedClaimsHash: Matches the SHA 256 hash of the claims object included in the token request
     *      userAssertionHash: Matches the SHA 256 hash of the obo_assertion for the OBO flow
     * }
     */
    var CredentialEntity = /** @class */ (function () {
        function CredentialEntity() {
        }
        /**
         * Generate Account Id key component as per the schema: <home_account_id>-<environment>
         */
        CredentialEntity.prototype.generateAccountId = function () {
            return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);
        };
        /**
         * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>
         */
        CredentialEntity.prototype.generateCredentialId = function () {
            return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);
        };
        /**
         * Generate target key component as per schema: <target>
         */
        CredentialEntity.prototype.generateTarget = function () {
            return CredentialEntity.generateTargetForCacheKey(this.target);
        };
        /**
         * generates credential key
         */
        CredentialEntity.prototype.generateCredentialKey = function () {
            return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId, this.tokenType, this.requestedClaimsHash);
        };
        /**
         * returns the type of the cache (in this case credential)
         */
        CredentialEntity.prototype.generateType = function () {
            switch (this.credentialType) {
                case CredentialType.ID_TOKEN:
                    return CacheType.ID_TOKEN;
                case CredentialType.ACCESS_TOKEN:
                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                    return CacheType.ACCESS_TOKEN;
                case CredentialType.REFRESH_TOKEN:
                    return CacheType.REFRESH_TOKEN;
                default: {
                    throw ClientAuthError.createUnexpectedCredentialTypeError();
                }
            }
        };
        /**
         * generates credential key
         * <home_account_id*>-\<environment>-<credential_type>-<client_id>-<realm\*>-<target\*>-<scheme\*>
         */
        CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId, tokenType, requestedClaimsHash) {
            var credentialKey = [
                this.generateAccountIdForCacheKey(homeAccountId, environment),
                this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),
                this.generateTargetForCacheKey(target),
                this.generateClaimsHashForCacheKey(requestedClaimsHash),
                this.generateSchemeForCacheKey(tokenType)
            ];
            return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * generates Account Id for keys
         * @param homeAccountId
         * @param environment
         */
        CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {
            var accountId = [homeAccountId, environment];
            return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generates Credential Id for keys
         * @param credentialType
         * @param realm
         * @param clientId
         * @param familyId
         */
        CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {
            var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN
                ? familyId || clientId
                : clientId;
            var credentialId = [
                credentialType,
                clientOrFamilyId,
                realm || Constants.EMPTY_STRING,
            ];
            return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Generate target key component as per schema: <target>
         */
        CredentialEntity.generateTargetForCacheKey = function (scopes) {
            return (scopes || Constants.EMPTY_STRING).toLowerCase();
        };
        /**
         * Generate requested claims key component as per schema: <requestedClaims>
         */
        CredentialEntity.generateClaimsHashForCacheKey = function (requestedClaimsHash) {
            return (requestedClaimsHash || Constants.EMPTY_STRING).toLowerCase();
        };
        /**
         * Generate scheme key componenet as per schema: <scheme>
         */
        CredentialEntity.generateSchemeForCacheKey = function (tokenType) {
            /*
             * PoP Tokens and SSH certs include scheme in cache key
             * Cast to lowercase to handle "bearer" from ADFS
             */
            return (tokenType && tokenType.toLowerCase() !== exports.AuthenticationScheme.BEARER.toLowerCase()) ? tokenType.toLowerCase() : Constants.EMPTY_STRING;
        };
        return CredentialEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ID_TOKEN Cache
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      realm: Full tenant or organizational identifier that the account belongs to
     * }
     */
    var IdTokenEntity = /** @class */ (function (_super) {
        __extends(IdTokenEntity, _super);
        function IdTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create IdTokenEntity
         * @param homeAccountId
         * @param authenticationResult
         * @param clientId
         * @param authority
         */
        IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId) {
            var idTokenEntity = new IdTokenEntity();
            idTokenEntity.credentialType = CredentialType.ID_TOKEN;
            idTokenEntity.homeAccountId = homeAccountId;
            idTokenEntity.environment = environment;
            idTokenEntity.clientId = clientId;
            idTokenEntity.secret = idToken;
            idTokenEntity.realm = tenantId;
            return idTokenEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        IdTokenEntity.isIdTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity["credentialType"] === CredentialType.ID_TOKEN);
        };
        return IdTokenEntity;
    }(CredentialEntity));

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class which exposes functions for managing date and time operations.
     */
    var TimeUtils = /** @class */ (function () {
        function TimeUtils() {
        }
        /**
         * return the current time in Unix time (seconds).
         */
        TimeUtils.nowSeconds = function () {
            // Date.getTime() returns in milliseconds.
            return Math.round(new Date().getTime() / 1000.0);
        };
        /**
         * check if a token is expired based on given UTC time in seconds.
         * @param expiresOn
         */
        TimeUtils.isTokenExpired = function (expiresOn, offset) {
            // check for access token expiry
            var expirationSec = Number(expiresOn) || 0;
            var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;
            // If current time + offset is greater than token expiration time, then token is expired.
            return (offsetCurrentTimeSec > expirationSec);
        };
        /**
         * If the current time is earlier than the time that a token was cached at, we must discard the token
         * i.e. The system clock was turned back after acquiring the cached token
         * @param cachedAt
         * @param offset
         */
        TimeUtils.wasClockTurnedBack = function (cachedAt) {
            var cachedAtSec = Number(cachedAt);
            return cachedAtSec > TimeUtils.nowSeconds();
        };
        /**
         * Waits for t number of milliseconds
         * @param t number
         * @param value T
         */
        TimeUtils.delay = function (t, value) {
            return new Promise(function (resolve) { return setTimeout(function () { return resolve(value); }, t); });
        };
        return TimeUtils;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ACCESS_TOKEN Credential Type
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-accesstoken-clientId-contoso.com-user.read
     *
     * Value Schema:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, usually only used for refresh tokens
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     *      cachedAt: Absolute device time when entry was created in the cache.
     *      expiresOn: Token expiry time, calculated based on current UTC time in seconds. Represented as a string.
     *      extendedExpiresOn: Additional extended expiry time until when token is valid in case of server-side outage. Represented as string in UTC seconds.
     *      keyId: used for POP and SSH tokenTypes
     *      tokenType: Type of the token issued. Usually "Bearer"
     * }
     */
    var AccessTokenEntity = /** @class */ (function (_super) {
        __extends(AccessTokenEntity, _super);
        function AccessTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create AccessTokenEntity
         * @param homeAccountId
         * @param environment
         * @param accessToken
         * @param clientId
         * @param tenantId
         * @param scopes
         * @param expiresOn
         * @param extExpiresOn
         */
        AccessTokenEntity.createAccessTokenEntity = function (homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, cryptoUtils, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {
            var _a, _b;
            var atEntity = new AccessTokenEntity();
            atEntity.homeAccountId = homeAccountId;
            atEntity.credentialType = CredentialType.ACCESS_TOKEN;
            atEntity.secret = accessToken;
            var currentTime = TimeUtils.nowSeconds();
            atEntity.cachedAt = currentTime.toString();
            /*
             * Token expiry time.
             * This value should be  calculated based on the current UTC time measured locally and the value  expires_in Represented as a string in JSON.
             */
            atEntity.expiresOn = expiresOn.toString();
            atEntity.extendedExpiresOn = extExpiresOn.toString();
            if (refreshOn) {
                atEntity.refreshOn = refreshOn.toString();
            }
            atEntity.environment = environment;
            atEntity.clientId = clientId;
            atEntity.realm = tenantId;
            atEntity.target = scopes;
            atEntity.userAssertionHash = userAssertionHash;
            atEntity.tokenType = StringUtils.isEmpty(tokenType) ? exports.AuthenticationScheme.BEARER : tokenType;
            if (requestedClaims) {
                atEntity.requestedClaims = requestedClaims;
                atEntity.requestedClaimsHash = requestedClaimsHash;
            }
            /*
             * Create Access Token With Auth Scheme instead of regular access token
             * Cast to lower to handle "bearer" from ADFS
             */
            if (((_a = atEntity.tokenType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== exports.AuthenticationScheme.BEARER.toLowerCase()) {
                atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;
                switch (atEntity.tokenType) {
                    case exports.AuthenticationScheme.POP:
                        // Make sure keyId is present and add it to credential
                        var tokenClaims = AuthToken.extractTokenClaims(accessToken, cryptoUtils);
                        if (!((_b = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _b === void 0 ? void 0 : _b.kid)) {
                            throw ClientAuthError.createTokenClaimsRequiredError();
                        }
                        atEntity.keyId = tokenClaims.cnf.kid;
                        break;
                    case exports.AuthenticationScheme.SSH:
                        atEntity.keyId = keyId;
                }
            }
            return atEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AccessTokenEntity.isAccessTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("realm") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity.hasOwnProperty("target") &&
                (entity["credentialType"] === CredentialType.ACCESS_TOKEN || entity["credentialType"] === CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));
        };
        return AccessTokenEntity;
    }(CredentialEntity));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * REFRESH_TOKEN Cache
     *
     * Key:Value Schema:
     *
     * Key Example: uid.utid-login.microsoftonline.com-refreshtoken-clientId--
     *
     * Value:
     * {
     *      homeAccountId: home account identifier for the auth scheme,
     *      environment: entity that issued the token, represented as a full host
     *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other
     *      clientId: client ID of the application
     *      secret: Actual credential as a string
     *      familyId: Family ID identifier, '1' represents Microsoft Family
     *      realm: Full tenant or organizational identifier that the account belongs to
     *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.
     * }
     */
    var RefreshTokenEntity = /** @class */ (function (_super) {
        __extends(RefreshTokenEntity, _super);
        function RefreshTokenEntity() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Create RefreshTokenEntity
         * @param homeAccountId
         * @param authenticationResult
         * @param clientId
         * @param authority
         */
        RefreshTokenEntity.createRefreshTokenEntity = function (homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash) {
            var rtEntity = new RefreshTokenEntity();
            rtEntity.clientId = clientId;
            rtEntity.credentialType = CredentialType.REFRESH_TOKEN;
            rtEntity.environment = environment;
            rtEntity.homeAccountId = homeAccountId;
            rtEntity.secret = refreshToken;
            rtEntity.userAssertionHash = userAssertionHash;
            if (familyId)
                rtEntity.familyId = familyId;
            return rtEntity;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        RefreshTokenEntity.isRefreshTokenEntity = function (entity) {
            if (!entity) {
                return false;
            }
            return (entity.hasOwnProperty("homeAccountId") &&
                entity.hasOwnProperty("environment") &&
                entity.hasOwnProperty("credentialType") &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("secret") &&
                entity["credentialType"] === CredentialType.REFRESH_TOKEN);
        };
        return RefreshTokenEntity;
    }(CredentialEntity));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required
     */
    var InteractionRequiredServerErrorMessage = [
        "interaction_required",
        "consent_required",
        "login_required"
    ];
    var InteractionRequiredAuthSubErrorMessage = [
        "message_only",
        "additional_action",
        "basic_action",
        "user_password_expired",
        "consent_required"
    ];
    /**
     * Interaction required errors defined by the SDK
     */
    var InteractionRequiredAuthErrorMessage = {
        noTokensFoundError: {
            code: "no_tokens_found",
            desc: "No refresh token found in the cache. Please sign-in."
        },
        native_account_unavailable: {
            code: "native_account_unavailable",
            desc: "The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API."
        }
    };
    /**
     * Error thrown when user interaction is required.
     */
    var InteractionRequiredAuthError = /** @class */ (function (_super) {
        __extends(InteractionRequiredAuthError, _super);
        function InteractionRequiredAuthError(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims) {
            var _this = _super.call(this, errorCode, errorMessage, subError) || this;
            Object.setPrototypeOf(_this, InteractionRequiredAuthError.prototype);
            _this.timestamp = timestamp || Constants.EMPTY_STRING;
            _this.traceId = traceId || Constants.EMPTY_STRING;
            _this.correlationId = correlationId || Constants.EMPTY_STRING;
            _this.claims = claims || Constants.EMPTY_STRING;
            _this.name = "InteractionRequiredAuthError";
            return _this;
        }
        /**
         * Helper function used to determine if an error thrown by the server requires interaction to resolve
         * @param errorCode
         * @param errorString
         * @param subError
         */
        InteractionRequiredAuthError.isInteractionRequiredError = function (errorCode, errorString, subError) {
            var isInteractionRequiredErrorCode = !!errorCode && InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;
            var isInteractionRequiredSubError = !!subError && InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;
            var isInteractionRequiredErrorDesc = !!errorString && InteractionRequiredServerErrorMessage.some(function (irErrorCode) {
                return errorString.indexOf(irErrorCode) > -1;
            });
            return isInteractionRequiredErrorCode || isInteractionRequiredErrorDesc || isInteractionRequiredSubError;
        };
        /**
         * Creates an error thrown when the authorization code required for a token request is null or empty.
         */
        InteractionRequiredAuthError.createNoTokensFoundError = function () {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.noTokensFoundError.code, InteractionRequiredAuthErrorMessage.noTokensFoundError.desc);
        };
        /**
         * Creates an error thrown when the native broker returns ACCOUNT_UNAVAILABLE status, indicating that the account was removed and interactive sign-in is required
         * @returns
         */
        InteractionRequiredAuthError.createNativeAccountUnavailableError = function () {
            return new InteractionRequiredAuthError(InteractionRequiredAuthErrorMessage.native_account_unavailable.code, InteractionRequiredAuthErrorMessage.native_account_unavailable.desc);
        };
        return InteractionRequiredAuthError;
    }(AuthError));

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var CacheRecord$1 = /** @class */ (function () {
        function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
            this.account = accountEntity || null;
            this.idToken = idTokenEntity || null;
            this.accessToken = accessTokenEntity || null;
            this.refreshToken = refreshTokenEntity || null;
            this.appMetadata = appMetadataEntity || null;
        }
        return CacheRecord;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which provides helpers for OAuth 2.0 protocol specific values
     */
    var ProtocolUtils = /** @class */ (function () {
        function ProtocolUtils() {
        }
        /**
         * Appends user state with random guid, or returns random guid.
         * @param userState
         * @param randomGuid
         */
        ProtocolUtils.setRequestState = function (cryptoObj, userState, meta) {
            var libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);
            return !StringUtils.isEmpty(userState) ? "" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;
        };
        /**
         * Generates the state value used by the common library.
         * @param randomGuid
         * @param cryptoObj
         */
        ProtocolUtils.generateLibraryState = function (cryptoObj, meta) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("generateLibraryState");
            }
            // Create a state object containing a unique id and the timestamp of the request creation
            var stateObj = {
                id: cryptoObj.createNewGuid()
            };
            if (meta) {
                stateObj.meta = meta;
            }
            var stateString = JSON.stringify(stateObj);
            return cryptoObj.base64Encode(stateString);
        };
        /**
         * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
         * @param state
         * @param cryptoObj
         */
        ProtocolUtils.parseRequestState = function (cryptoObj, state) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("parseRequestState");
            }
            if (StringUtils.isEmpty(state)) {
                throw ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
            }
            try {
                // Split the state between library state and user passed state and decode them separately
                var splitState = state.split(Constants.RESOURCE_DELIM);
                var libraryState = splitState[0];
                var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : Constants.EMPTY_STRING;
                var libraryStateString = cryptoObj.base64Decode(libraryState);
                var libraryStateObj = JSON.parse(libraryStateString);
                return {
                    userRequestState: !StringUtils.isEmpty(userState) ? userState : Constants.EMPTY_STRING,
                    libraryState: libraryStateObj
                };
            }
            catch (e) {
                throw ClientAuthError.createInvalidStateError(state, e);
            }
        };
        return ProtocolUtils;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Url object class which can perform various transformations on url strings.
     */
    var UrlString = /** @class */ (function () {
        function UrlString(url) {
            this._urlString = url;
            if (StringUtils.isEmpty(this._urlString)) {
                // Throws error if url is empty
                throw ClientConfigurationError.createUrlEmptyError();
            }
            if (StringUtils.isEmpty(this.getHash())) {
                this._urlString = UrlString.canonicalizeUri(url);
            }
        }
        Object.defineProperty(UrlString.prototype, "urlString", {
            get: function () {
                return this._urlString;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Ensure urls are lower case and end with a / character.
         * @param url
         */
        UrlString.canonicalizeUri = function (url) {
            if (url) {
                var lowerCaseUrl = url.toLowerCase();
                if (StringUtils.endsWith(lowerCaseUrl, "?")) {
                    lowerCaseUrl = lowerCaseUrl.slice(0, -1);
                }
                else if (StringUtils.endsWith(lowerCaseUrl, "?/")) {
                    lowerCaseUrl = lowerCaseUrl.slice(0, -2);
                }
                if (!StringUtils.endsWith(lowerCaseUrl, "/")) {
                    lowerCaseUrl += "/";
                }
                return lowerCaseUrl;
            }
            return url;
        };
        /**
         * Throws if urlString passed is not a valid authority URI string.
         */
        UrlString.prototype.validateAsUri = function () {
            // Attempts to parse url for uri components
            var components;
            try {
                components = this.getUrlComponents();
            }
            catch (e) {
                throw ClientConfigurationError.createUrlParseError(e);
            }
            // Throw error if URI or path segments are not parseable.
            if (!components.HostNameAndPort || !components.PathSegments) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
            }
            // Throw error if uri is insecure.
            if (!components.Protocol || components.Protocol.toLowerCase() !== "https:") {
                throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);
            }
        };
        /**
         * Given a url and a query string return the url with provided query string appended
         * @param url
         * @param queryString
         */
        UrlString.appendQueryString = function (url, queryString) {
            if (StringUtils.isEmpty(queryString)) {
                return url;
            }
            return url.indexOf("?") < 0 ? url + "?" + queryString : url + "&" + queryString;
        };
        /**
         * Returns a url with the hash removed
         * @param url
         */
        UrlString.removeHashFromUrl = function (url) {
            return UrlString.canonicalizeUri(url.split("#")[0]);
        };
        /**
         * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d
         * @param href The url
         * @param tenantId The tenant id to replace
         */
        UrlString.prototype.replaceTenantPath = function (tenantId) {
            var urlObject = this.getUrlComponents();
            var pathArray = urlObject.PathSegments;
            if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {
                pathArray[0] = tenantId;
            }
            return UrlString.constructAuthorityUriFromObject(urlObject);
        };
        /**
         * Returns the anchor part(#) of the URL
         */
        UrlString.prototype.getHash = function () {
            return UrlString.parseHash(this.urlString);
        };
        /**
         * Parses out the components from a url string.
         * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.
         */
        UrlString.prototype.getUrlComponents = function () {
            // https://gist.github.com/curtisz/11139b2cfcaef4a261e0
            var regEx = RegExp("^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?");
            // If url string does not match regEx, we throw an error
            var match = this.urlString.match(regEx);
            if (!match) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + this.urlString);
            }
            // Url component object
            var urlComponents = {
                Protocol: match[1],
                HostNameAndPort: match[4],
                AbsolutePath: match[5],
                QueryString: match[7]
            };
            var pathSegments = urlComponents.AbsolutePath.split("/");
            pathSegments = pathSegments.filter(function (val) { return val && val.length > 0; }); // remove empty elements
            urlComponents.PathSegments = pathSegments;
            if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith("/")) {
                urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);
            }
            return urlComponents;
        };
        UrlString.getDomainFromUrl = function (url) {
            var regEx = RegExp("^([^:/?#]+://)?([^/?#]*)");
            var match = url.match(regEx);
            if (!match) {
                throw ClientConfigurationError.createUrlParseError("Given url string: " + url);
            }
            return match[2];
        };
        UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {
            if (relativeUrl[0] === Constants.FORWARD_SLASH) {
                var url = new UrlString(baseUrl);
                var baseComponents = url.getUrlComponents();
                return baseComponents.Protocol + "//" + baseComponents.HostNameAndPort + relativeUrl;
            }
            return relativeUrl;
        };
        /**
         * Parses hash string from given string. Returns empty string if no hash symbol is found.
         * @param hashString
         */
        UrlString.parseHash = function (hashString) {
            var hashIndex1 = hashString.indexOf("#");
            var hashIndex2 = hashString.indexOf("#/");
            if (hashIndex2 > -1) {
                return hashString.substring(hashIndex2 + 2);
            }
            else if (hashIndex1 > -1) {
                return hashString.substring(hashIndex1 + 1);
            }
            return Constants.EMPTY_STRING;
        };
        /**
         * Parses query string from given string. Returns empty string if no query symbol is found.
         * @param queryString
         */
        UrlString.parseQueryString = function (queryString) {
            var queryIndex1 = queryString.indexOf("?");
            var queryIndex2 = queryString.indexOf("/?");
            if (queryIndex2 > -1) {
                return queryString.substring(queryIndex2 + 2);
            }
            else if (queryIndex1 > -1) {
                return queryString.substring(queryIndex1 + 1);
            }
            return Constants.EMPTY_STRING;
        };
        UrlString.constructAuthorityUriFromObject = function (urlObject) {
            return new UrlString(urlObject.Protocol + "//" + urlObject.HostNameAndPort + "/" + urlObject.PathSegments.join("/"));
        };
        /**
         * Returns URL hash as server auth code response object.
         */
        UrlString.getDeserializedHash = function (hash) {
            // Check if given hash is empty
            if (StringUtils.isEmpty(hash)) {
                return {};
            }
            // Strip the # symbol if present
            var parsedHash = UrlString.parseHash(hash);
            // If # symbol was not present, above will return empty string, so give original hash value
            var deserializedHash = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);
            // Check if deserialization didn't work
            if (!deserializedHash) {
                throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));
            }
            return deserializedHash;
        };
        /**
         * Returns URL query string as server auth code response object.
         */
        UrlString.getDeserializedQueryString = function (query) {
            // Check if given query is empty
            if (StringUtils.isEmpty(query)) {
                return {};
            }
            // Strip the ? symbol if present
            var parsedQueryString = UrlString.parseQueryString(query);
            // If ? symbol was not present, above will return empty string, so give original query value
            var deserializedQueryString = StringUtils.queryStringToObject(StringUtils.isEmpty(parsedQueryString) ? query : parsedQueryString);
            // Check if deserialization didn't work
            if (!deserializedQueryString) {
                throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedQueryString));
            }
            return deserializedQueryString;
        };
        /**
         * Check if the hash of the URL string contains known properties
         */
        UrlString.hashContainsKnownProperties = function (hash) {
            if (StringUtils.isEmpty(hash) || hash.indexOf("=") < 0) {
                // Hash doesn't contain key/value pairs
                return false;
            }
            var parameters = UrlString.getDeserializedHash(hash);
            return !!(parameters.code ||
                parameters.error_description ||
                parameters.error ||
                parameters.state);
        };
        return UrlString;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.
     *
     * @export
     * @enum {number}
     */
    var PerformanceEvents;
    (function (PerformanceEvents) {
        /**
         * acquireTokenByCode API (msal-browser and msal-node).
         * Used to acquire tokens by trading an authorization code against the token endpoint.
         */
        PerformanceEvents["AcquireTokenByCode"] = "acquireTokenByCode";
        /**
         * acquireTokenByRefreshToken API (msal-browser and msal-node).
         * Used to renew an access token using a refresh token against the token endpoint.
         */
        PerformanceEvents["AcquireTokenByRefreshToken"] = "acquireTokenByRefreshToken";
        /**
         * acquireTokenSilent API (msal-browser and msal-node).
         * Used to silently acquire a new access token (from the cache or the network).
         */
        PerformanceEvents["AcquireTokenSilent"] = "acquireTokenSilent";
        /**
         * acquireTokenSilentAsync (msal-browser).
         * Internal API for acquireTokenSilent.
         */
        PerformanceEvents["AcquireTokenSilentAsync"] = "acquireTokenSilentAsync";
        /**
         * acquireTokenPopup (msal-browser).
         * Used to acquire a new access token interactively through pop ups
         */
        PerformanceEvents["AcquireTokenPopup"] = "acquireTokenPopup";
        /**
         * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).
         * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.
         */
        PerformanceEvents["CryptoOptsGetPublicKeyThumbprint"] = "cryptoOptsGetPublicKeyThumbprint";
        /**
         * signJwt API in CryptoOpts class (msal-browser).
         * Used to signed a pop token.
         */
        PerformanceEvents["CryptoOptsSignJwt"] = "cryptoOptsSignJwt";
        /**
         * acquireToken API in the SilentCacheClient class (msal-browser).
         * Used to read access tokens from the cache.
         */
        PerformanceEvents["SilentCacheClientAcquireToken"] = "silentCacheClientAcquireToken";
        /**
         * acquireToken API in the SilentIframeClient class (msal-browser).
         * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.
         */
        PerformanceEvents["SilentIframeClientAcquireToken"] = "silentIframeClientAcquireToken";
        /**
         * acquireToken API in SilentRereshClient (msal-browser).
         * Used to acquire a new set of tokens from the token endpoint using a refresh token.
         */
        PerformanceEvents["SilentRefreshClientAcquireToken"] = "silentRefreshClientAcquireToken";
        /**
         * ssoSilent API (msal-browser).
         * Used to silently acquire an authorization code and set of tokens using a hidden iframe.
         */
        PerformanceEvents["SsoSilent"] = "ssoSilent";
        /**
         * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).
         * Used to load authority metadata for a request.
         */
        PerformanceEvents["StandardInteractionClientGetDiscoveredAuthority"] = "standardInteractionClientGetDiscoveredAuthority";
        /**
         * acquireToken APIs in msal-browser.
         * Used to make an /authorize endpoint call with native brokering enabled.
         */
        PerformanceEvents["FetchAccountIdWithNativeBroker"] = "fetchAccountIdWithNativeBroker";
        /**
         * acquireToken API in NativeInteractionClient class (msal-browser).
         * Used to acquire a token from Native component when native brokering is enabled.
         */
        PerformanceEvents["NativeInteractionClientAcquireToken"] = "nativeInteractionClientAcquireToken";
        /**
         * Time spent creating default headers for requests to token endpoint
         */
        PerformanceEvents["BaseClientCreateTokenRequestHeaders"] = "baseClientCreateTokenRequestHeaders";
        /**
         * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).
         */
        PerformanceEvents["BrokerHandhshake"] = "brokerHandshake";
        /**
         * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .
         */
        PerformanceEvents["AcquireTokenByRefreshTokenInBroker"] = "acquireTokenByRefreshTokenInBroker";
        /**
         * Time taken for token acquisition by broker
         */
        PerformanceEvents["AcquireTokenByBroker"] = "acquireTokenByBroker";
        /**
         * Time spent on the network for refresh token acquisition
         */
        PerformanceEvents["RefreshTokenClientExecuteTokenRequest"] = "refreshTokenClientExecuteTokenRequest";
        /**
         * Time taken for acquiring refresh token , records RT size
         */
        PerformanceEvents["RefreshTokenClientAcquireToken"] = "refreshTokenClientAcquireToken";
        /**
         * Time taken for acquiring cached refresh token
         */
        PerformanceEvents["RefreshTokenClientAcquireTokenWithCachedRefreshToken"] = "refreshTokenClientAcquireTokenWithCachedRefreshToken";
        /**
         * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).
         */
        PerformanceEvents["RefreshTokenClientAcquireTokenByRefreshToken"] = "refreshTokenClientAcquireTokenByRefreshToken";
        /**
         * Helper function to create token request body in RefreshTokenClient (msal-common).
         */
        PerformanceEvents["RefreshTokenClientCreateTokenRequestBody"] = "refreshTokenClientCreateTokenRequestBody";
        /**
         * acquireTokenFromCache (msal-browser).
         * Internal API for acquiring token from cache
         */
        PerformanceEvents["AcquireTokenFromCache"] = "acquireTokenFromCache";
        /**
         * acquireTokenBySilentIframe (msal-browser).
         * Internal API for acquiring token by silent Iframe
         */
        PerformanceEvents["AcquireTokenBySilentIframe"] = "acquireTokenBySilentIframe";
        /**
         * Internal API for initializing base request in BaseInteractionClient (msal-browser)
         */
        PerformanceEvents["InitializeBaseRequest"] = "initializeBaseRequest";
        /**
         * Internal API for initializing silent request in SilentCacheClient (msal-browser)
         */
        PerformanceEvents["InitializeSilentRequest"] = "initializeSilentRequest";
        PerformanceEvents["InitializeClientApplication"] = "initializeClientApplication";
        /**
         * Helper function in SilentIframeClient class (msal-browser).
         */
        PerformanceEvents["SilentIframeClientTokenHelper"] = "silentIframeClientTokenHelper";
        /**
         * SilentHandler
         */
        PerformanceEvents["SilentHandlerInitiateAuthRequest"] = "silentHandlerInitiateAuthRequest";
        PerformanceEvents["SilentHandlerMonitorIframeForHash"] = "silentHandlerMonitorIframeForHash";
        PerformanceEvents["SilentHandlerLoadFrame"] = "silentHandlerLoadFrame";
        /**
         * Helper functions in StandardInteractionClient class (msal-browser)
         */
        PerformanceEvents["StandardInteractionClientCreateAuthCodeClient"] = "standardInteractionClientCreateAuthCodeClient";
        PerformanceEvents["StandardInteractionClientGetClientConfiguration"] = "standardInteractionClientGetClientConfiguration";
        PerformanceEvents["StandardInteractionClientInitializeAuthorizationRequest"] = "standardInteractionClientInitializeAuthorizationRequest";
        PerformanceEvents["StandardInteractionClientInitializeAuthorizationCodeRequest"] = "standardInteractionClientInitializeAuthorizationCodeRequest";
        /**
         * getAuthCodeUrl API (msal-browser and msal-node).
         */
        PerformanceEvents["GetAuthCodeUrl"] = "getAuthCodeUrl";
        /**
         * Functions from InteractionHandler (msal-browser)
         */
        PerformanceEvents["HandleCodeResponseFromServer"] = "handleCodeResponseFromServer";
        PerformanceEvents["HandleCodeResponseFromHash"] = "handleCodeResponseFromHash";
        PerformanceEvents["UpdateTokenEndpointAuthority"] = "updateTokenEndpointAuthority";
        /**
         * APIs in Authorization Code Client (msal-common)
         */
        PerformanceEvents["AuthClientAcquireToken"] = "authClientAcquireToken";
        PerformanceEvents["AuthClientExecuteTokenRequest"] = "authClientExecuteTokenRequest";
        PerformanceEvents["AuthClientCreateTokenRequestBody"] = "authClientCreateTokenRequestBody";
        PerformanceEvents["AuthClientCreateQueryString"] = "authClientCreateQueryString";
        /**
         * Generate functions in PopTokenGenerator (msal-common)
         */
        PerformanceEvents["PopTokenGenerateCnf"] = "popTokenGenerateCnf";
        PerformanceEvents["PopTokenGenerateKid"] = "popTokenGenerateKid";
        /**
         * handleServerTokenResponse API in ResponseHandler (msal-common)
         */
        PerformanceEvents["HandleServerTokenResponse"] = "handleServerTokenResponse";
        /**
         * Authority functions
         */
        PerformanceEvents["AuthorityFactoryCreateDiscoveredInstance"] = "authorityFactoryCreateDiscoveredInstance";
        PerformanceEvents["AuthorityResolveEndpointsAsync"] = "authorityResolveEndpointsAsync";
        PerformanceEvents["AuthorityGetCloudDiscoveryMetadataFromNetwork"] = "authorityGetCloudDiscoveryMetadataFromNetwork";
        PerformanceEvents["AuthorityUpdateCloudDiscoveryMetadata"] = "authorityUpdateCloudDiscoveryMetadata";
        PerformanceEvents["AuthorityGetEndpointMetadataFromNetwork"] = "authorityGetEndpointMetadataFromNetwork";
        PerformanceEvents["AuthorityUpdateEndpointMetadata"] = "authorityUpdateEndpointMetadata";
        PerformanceEvents["AuthorityUpdateMetadataWithRegionalInformation"] = "authorityUpdateMetadataWithRegionalInformation";
        /**
         * Region Discovery functions
         */
        PerformanceEvents["RegionDiscoveryDetectRegion"] = "regionDiscoveryDetectRegion";
        PerformanceEvents["RegionDiscoveryGetRegionFromIMDS"] = "regionDiscoveryGetRegionFromIMDS";
        PerformanceEvents["RegionDiscoveryGetCurrentVersion"] = "regionDiscoveryGetCurrentVersion";
        PerformanceEvents["AcquireTokenByCodeAsync"] = "acquireTokenByCodeAsync";
        PerformanceEvents["GetEndpointMetadataFromNetwork"] = "getEndpointMetadataFromNetwork";
        PerformanceEvents["GetCloudDiscoveryMetadataFromNetworkMeasurement"] = "getCloudDiscoveryMetadataFromNetworkMeasurement";
        PerformanceEvents["HandleRedirectPromiseMeasurement"] = "handleRedirectPromiseMeasurement";
        PerformanceEvents["UpdateCloudDiscoveryMetadataMeasurement"] = "updateCloudDiscoveryMetadataMeasurement";
        PerformanceEvents["UsernamePasswordClientAcquireToken"] = "usernamePasswordClientAcquireToken";
        PerformanceEvents["NativeMessageHandlerHandshake"] = "nativeMessageHandlerHandshake";
    })(PerformanceEvents || (PerformanceEvents = {}));
    /**
     * State of the performance event.
     *
     * @export
     * @enum {number}
     */
    var PerformanceEventStatus;
    (function (PerformanceEventStatus) {
        PerformanceEventStatus[PerformanceEventStatus["NotStarted"] = 0] = "NotStarted";
        PerformanceEventStatus[PerformanceEventStatus["InProgress"] = 1] = "InProgress";
        PerformanceEventStatus[PerformanceEventStatus["Completed"] = 2] = "Completed";
    })(PerformanceEventStatus || (PerformanceEventStatus = {}));
    var IntFields = new Set([
        "accessTokenSize",
        "durationMs",
        "idTokenSize",
        "matsSilentStatus",
        "matsHttpStatus",
        "refreshTokenSize",
        "queuedTimeMs",
        "startTimeMs",
        "status",
    ]);

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var KeyLocation;
    (function (KeyLocation) {
        KeyLocation["SW"] = "sw";
        KeyLocation["UHW"] = "uhw";
    })(KeyLocation || (KeyLocation = {}));
    var PopTokenGenerator = /** @class */ (function () {
        function PopTokenGenerator(cryptoUtils, performanceClient) {
            this.cryptoUtils = cryptoUtils;
            this.performanceClient = performanceClient;
        }
        /**
         * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters
         * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash
         * @param request
         * @returns
         */
        PopTokenGenerator.prototype.generateCnf = function (request) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var reqCnf, reqCnfString, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateKid, request.correlationId);
                            return [4 /*yield*/, this.generateKid(request)];
                        case 1:
                            reqCnf = _d.sent();
                            reqCnfString = this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));
                            _c = {
                                kid: reqCnf.kid,
                                reqCnfString: reqCnfString
                            };
                            return [4 /*yield*/, this.cryptoUtils.hashString(reqCnfString)];
                        case 2: return [2 /*return*/, (_c.reqCnfHash = _d.sent(),
                                _c)];
                    }
                });
            });
        };
        /**
         * Generates key_id for a SHR token request
         * @param request
         * @returns
         */
        PopTokenGenerator.prototype.generateKid = function (request) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var kidThumbprint;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);
                            return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];
                        case 1:
                            kidThumbprint = _b.sent();
                            return [2 /*return*/, {
                                    kid: kidThumbprint,
                                    xms_ksl: KeyLocation.SW
                                }];
                    }
                });
            });
        };
        /**
         * Signs the POP access_token with the local generated key-pair
         * @param accessToken
         * @param request
         * @returns
         */
        PopTokenGenerator.prototype.signPopToken = function (accessToken, keyId, request) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, this.signPayload(accessToken, keyId, request)];
                });
            });
        };
        /**
         * Utility function to generate the signed JWT for an access_token
         * @param payload
         * @param kid
         * @param request
         * @param claims
         * @returns
         */
        PopTokenGenerator.prototype.signPayload = function (payload, keyId, request, claims) {
            return __awaiter(this, void 0, void 0, function () {
                var resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, resourceUrlString, resourceUrlComponents;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims, shrNonce = request.shrNonce;
                            resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;
                            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();
                            return [4 /*yield*/, this.cryptoUtils.signJwt(__assign({ at: payload, ts: TimeUtils.nowSeconds(), m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(), u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort, nonce: shrNonce || this.cryptoUtils.createNewGuid(), p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath, q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined, client_claims: shrClaims || undefined }, claims), keyId, request.correlationId)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return PopTokenGenerator;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * APP_METADATA Cache
     *
     * Key:Value Schema:
     *
     * Key: appmetadata-<environment>-<client_id>
     *
     * Value:
     * {
     *      clientId: client ID of the application
     *      environment: entity that issued the token, represented as a full host
     *      familyId: Family ID identifier, '1' represents Microsoft Family
     * }
     */
    var AppMetadataEntity = /** @class */ (function () {
        function AppMetadataEntity() {
        }
        /**
         * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>
         */
        AppMetadataEntity.prototype.generateAppMetadataKey = function () {
            return AppMetadataEntity.generateAppMetadataCacheKey(this.environment, this.clientId);
        };
        /**
         * Generate AppMetadata Cache Key
         */
        AppMetadataEntity.generateAppMetadataCacheKey = function (environment, clientId) {
            var appMetaDataKeyArray = [
                APP_METADATA,
                environment,
                clientId,
            ];
            return appMetaDataKeyArray.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();
        };
        /**
         * Creates AppMetadataEntity
         * @param clientId
         * @param environment
         * @param familyId
         */
        AppMetadataEntity.createAppMetadataEntity = function (clientId, environment, familyId) {
            var appMetadata = new AppMetadataEntity();
            appMetadata.clientId = clientId;
            appMetadata.environment = environment;
            if (familyId) {
                appMetadata.familyId = familyId;
            }
            return appMetadata;
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AppMetadataEntity.isAppMetadataEntity = function (key, entity) {
            if (!entity) {
                return false;
            }
            return (key.indexOf(APP_METADATA) === 0 &&
                entity.hasOwnProperty("clientId") &&
                entity.hasOwnProperty("environment"));
        };
        return AppMetadataEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class instance helps track the memory changes facilitating
     * decisions to read from and write to the persistent cache
     */ var TokenCacheContext = /** @class */ (function () {
        function TokenCacheContext(tokenCache, hasChanged) {
            this.cache = tokenCache;
            this.hasChanged = hasChanged;
        }
        Object.defineProperty(TokenCacheContext.prototype, "cacheHasChanged", {
            /**
             * boolean which indicates the changes in cache
             */
            get: function () {
                return this.hasChanged;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TokenCacheContext.prototype, "tokenCache", {
            /**
             * function to retrieve the token cache
             */
            get: function () {
                return this.cache;
            },
            enumerable: false,
            configurable: true
        });
        return TokenCacheContext;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class that handles response parsing.
     */
    var ResponseHandler = /** @class */ (function () {
        function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {
            this.clientId = clientId;
            this.cacheStorage = cacheStorage;
            this.cryptoObj = cryptoObj;
            this.logger = logger;
            this.serializableCache = serializableCache;
            this.persistencePlugin = persistencePlugin;
            this.performanceClient = performanceClient;
        }
        /**
         * Function which validates server authorization code response.
         * @param serverResponseHash
         * @param cachedState
         * @param cryptoObj
         */
        ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
            if (!serverResponseHash.state || !cachedState) {
                throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError("Server State") : ClientAuthError.createStateNotFoundError("Cached State");
            }
            if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
                throw ClientAuthError.createStateMismatchError();
            }
            // Check for error
            if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror, serverResponseHash.timestamp || Constants.EMPTY_STRING, serverResponseHash.trace_id || Constants.EMPTY_STRING, serverResponseHash.correlation_id || Constants.EMPTY_STRING, serverResponseHash.claims || Constants.EMPTY_STRING);
                }
                throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            if (serverResponseHash.client_info) {
                buildClientInfo(serverResponseHash.client_info, cryptoObj);
            }
        };
        /**
         * Function which validates server authorization token response.
         * @param serverResponse
         */
        ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
            // Check for error
            if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING);
                }
                var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
                throw new ServerError(serverResponse.error, errString, serverResponse.suberror);
            }
        };
        /**
         * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
         * @param serverTokenResponse
         * @param authority
         */
        ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var idTokenObj, authTime, requestStateObj, cacheRecord, cacheContext, key, account;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);
                            if (serverTokenResponse.id_token) {
                                idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);
                                // token nonce check (TODO: Add a warning if no nonce is given?)
                                if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {
                                    if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                        throw ClientAuthError.createNonceMismatchError();
                                    }
                                }
                                // token max_age check
                                if (request.maxAge || (request.maxAge === 0)) {
                                    authTime = idTokenObj.claims.auth_time;
                                    if (!authTime) {
                                        throw ClientAuthError.createAuthTimeNotFoundError();
                                    }
                                    AuthToken.checkMaxAge(authTime, request.maxAge);
                                }
                            }
                            // generate homeAccountId
                            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                            if (!!authCodePayload && !!authCodePayload.state) {
                                requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                            }
                            // Add keyId from request to serverTokenResponse if defined
                            serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;
                            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, , 5, 8]);
                            if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                            this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                            cacheContext = new TokenCacheContext(this.serializableCache, true);
                            return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3:
                            /*
                             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                             * If not present, we should return null, as it's the case that another application called removeAccount in between
                             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by
                             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.
                             */
                            if (handlingRefreshTokenResponse && !forceCacheRefreshTokenResponse && cacheRecord.account) {
                                key = cacheRecord.account.generateAccountKey();
                                account = this.cacheStorage.getAccount(key);
                                if (!account) {
                                    this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                    return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, undefined, serverRequestId)];
                                }
                            }
                            return [4 /*yield*/, this.cacheStorage.saveCacheRecord(cacheRecord)];
                        case 4:
                            _b.sent();
                            return [3 /*break*/, 8];
                        case 5:
                            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 7];
                            this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                            return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                        case 6:
                            _b.sent();
                            _b.label = 7;
                        case 7: return [7 /*endfinally*/];
                        case 8: return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse, serverRequestId)];
                    }
                });
            });
        };
        /**
         * Generates CacheRecord
         * @param serverTokenResponse
         * @param idTokenObj
         * @param authority
         */
        ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, request, idTokenObj, userAssertionHash, authCodePayload) {
            var env = authority.getPreferredCache();
            if (StringUtils.isEmpty(env)) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            // IdToken: non AAD scenarios can have empty realm
            var cachedIdToken;
            var cachedAccount;
            if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
                cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING);
                cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, authCodePayload);
            }
            // AccessToken
            var cachedAccessToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {
                // If scopes not returned in server response, use request scopes
                var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);
                /*
                 * Use timestamp calculated before request
                 * Server may return timestamps as strings, parse to numbers if so.
                 */
                var expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
                var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
                var refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
                var tokenExpirationSeconds = reqTimestamp + expiresIn;
                var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
                var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
                // non AAD scenarios can have empty realm
                cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);
            }
            // refreshToken
            var cachedRefreshToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
                cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, userAssertionHash);
            }
            // appMetadata
            var cachedAppMetadata = null;
            if (!StringUtils.isEmpty(serverTokenResponse.foci)) {
                cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);
            }
            return new CacheRecord$1(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
        };
        /**
         * Generate Account
         * @param serverTokenResponse
         * @param idToken
         * @param authority
         */
        ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, authCodePayload) {
            var authorityType = authority.authorityType;
            var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : Constants.EMPTY_STRING;
            var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : Constants.EMPTY_STRING;
            // ADFS does not require client_info in the response
            if (authorityType === AuthorityType.Adfs) {
                this.logger.verbose("Authority type is ADFS, creating ADFS account");
                return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);
            }
            // This fallback applies to B2C as well as they fall under an AAD account type.
            if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
                throw ClientAuthError.createClientInfoEmptyError();
            }
            return serverTokenResponse.client_info ?
                AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost) :
                AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, cloudGraphHostName, msGraphhost);
        };
        /**
         * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
         *
         * Optionally takes a state string that is set as-is in the response.
         *
         * @param cacheRecord
         * @param idTokenObj
         * @param fromTokenCache
         * @param stateString
         */
        ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, serverTokenResponse, requestId) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, _d, secret, keyId, uid, tid;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            accessToken = Constants.EMPTY_STRING;
                            responseScopes = [];
                            expiresOn = null;
                            familyId = Constants.EMPTY_STRING;
                            if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                            if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(cryptoObj);
                            _d = cacheRecord.accessToken, secret = _d.secret, keyId = _d.keyId;
                            if (!keyId) {
                                throw ClientAuthError.createKeyIdMissingError();
                            }
                            return [4 /*yield*/, popTokenGenerator.signPopToken(secret, keyId, request)];
                        case 1:
                            accessToken = _e.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            accessToken = cacheRecord.accessToken.secret;
                            _e.label = 3;
                        case 3:
                            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                            _e.label = 4;
                        case 4:
                            if (cacheRecord.appMetadata) {
                                familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;
                            }
                            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;
                            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;
                            // for hybrid + native bridge enablement, send back the native account Id
                            if ((serverTokenResponse === null || serverTokenResponse === void 0 ? void 0 : serverTokenResponse.spa_accountid) && !!cacheRecord.account) {
                                cacheRecord.account.nativeAccountId = serverTokenResponse === null || serverTokenResponse === void 0 ? void 0 : serverTokenResponse.spa_accountid;
                            }
                            return [2 /*return*/, {
                                    authority: authority.canonicalAuthority,
                                    uniqueId: uid,
                                    tenantId: tid,
                                    scopes: responseScopes,
                                    account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                    idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,
                                    idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                                    accessToken: accessToken,
                                    fromCache: fromTokenCache,
                                    expiresOn: expiresOn,
                                    correlationId: request.correlationId,
                                    requestId: requestId || Constants.EMPTY_STRING,
                                    extExpiresOn: extExpiresOn,
                                    familyId: familyId,
                                    tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,
                                    state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,
                                    cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,
                                    msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,
                                    code: serverTokenResponse === null || serverTokenResponse === void 0 ? void 0 : serverTokenResponse.spa_code,
                                    fromNativeBroker: false,
                                }];
                    }
                });
            });
        };
        return ResponseHandler;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Oauth2.0 Authorization Code client
     */
    var AuthorizationCodeClient = /** @class */ (function (_super) {
        __extends(AuthorizationCodeClient, _super);
        function AuthorizationCodeClient(configuration, performanceClient) {
            var _this = _super.call(this, configuration, performanceClient) || this;
            // Flag to indicate if client is for hybrid spa auth code redemption
            _this.includeRedirectUri = true;
            return _this;
        }
        /**
         * Creates the URL of the authorization request letting the user input credentials and consent to the
         * application. The URL target the /authorize endpoint of the authority configured in the
         * application object.
         *
         * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
         * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
         * acquireToken(AuthorizationCodeRequest)
         * @param request
         */
        AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var queryString;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.GetAuthCodeUrl, request.correlationId);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);
                            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];
                        case 1:
                            queryString = _c.sent();
                            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];
                    }
                });
            });
        };
        /**
         * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
         * authorization_code_grant
         * @param request
         */
        AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter(this, void 0, void 0, function () {
                var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;
                var _this = this;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            if (!request || !request.code) {
                                throw ClientAuthError.createTokenRequestCannotBeMadeError();
                            }
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);
                            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement("AuthCodeClientAcquireToken", request.correlationId);
                            this.logger.info("in acquireToken call in auth-code client");
                            reqTimestamp = TimeUtils.nowSeconds();
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);
                            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];
                        case 1:
                            response = _g.sent();
                            requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];
                            httpVerAuthority = (_e = response.headers) === null || _e === void 0 ? void 0 : _e[HeaderNames.X_MS_HTTP_VERSION];
                            if (httpVerAuthority) {
                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({
                                    httpVerAuthority: httpVerAuthority
                                });
                            }
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);
                            // Validate response. This function throws a server error if an error is returned by the server.
                            responseHandler.validateTokenResponse(response.body);
                            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);
                            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {
                                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({
                                        success: true
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    _this.logger.verbose("Error in fetching token in ACC", request.correlationId);
                                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({
                                        errorCode: error.errorCode,
                                        subErrorCode: error.subError,
                                        success: false
                                    });
                                    throw error;
                                })];
                    }
                });
            });
        };
        /**
         * Handles the hash fragment response from public client code request. Returns a code response used by
         * the client to exchange for a token in acquireToken.
         * @param hashFragment
         */
        AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {
            // Handle responses.
            var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);
            // Deserialize hash fragment response parameters.
            var hashUrlString = new UrlString(hashFragment);
            // Deserialize hash fragment response parameters.
            var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());
            // Get code response
            responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);
            // throw when there is no auth code in the response
            if (!serverParams.code) {
                throw ClientAuthError.createNoAuthCodeInServerResponseError();
            }
            return __assign(__assign({}, serverParams), {
                // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod
                code: serverParams.code });
        };
        /**
         * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         * @param authorityUri
         */
        AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {
            // Throw error if logoutRequest is null/undefined
            if (!logoutRequest) {
                throw ClientConfigurationError.createEmptyLogoutRequestError();
            }
            var queryString = this.createLogoutUrlQueryString(logoutRequest);
            // Construct logout URI
            return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);
        };
        /**
         * Executes POST request to token endpoint
         * @param authority
         * @param request
         */
        AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var queryParametersString, endpoint, requestBody, ccsCredential, clientInfo, headers, thumbprint;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);
                            queryParametersString = this.createTokenQueryParameters(request);
                            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);
                            return [4 /*yield*/, this.createTokenRequestBody(request)];
                        case 1:
                            requestBody = _c.sent();
                            ccsCredential = undefined;
                            if (request.clientInfo) {
                                try {
                                    clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);
                                    ccsCredential = {
                                        credential: "" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                        type: CcsCredentialType.HOME_ACCOUNT_ID
                                    };
                                }
                                catch (e) {
                                    this.logger.verbose("Could not parse client info for CCS Header: " + e);
                                }
                            }
                            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes,
                                claims: request.claims,
                                authenticationScheme: request.authenticationScheme,
                                resourceRequestMethod: request.resourceRequestMethod,
                                resourceRequestUri: request.resourceRequestUri,
                                shrClaims: request.shrClaims,
                                sshKid: request.sshKid
                            };
                            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                    }
                });
            });
        };
        /**
         * Generates a map for all the params to be sent to the service
         * @param request
         */
        AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;
                var _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);
                            parameterBuilder = new RequestParameterBuilder$1();
                            parameterBuilder.addClientId(this.config.authOptions.clientId);
                            /*
                             * For hybrid spa flow, there will be a code but no verifier
                             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI
                             */
                            if (!this.includeRedirectUri) {
                                // Just validate
                                RequestValidator$1.validateRedirectUri(request.redirectUri);
                            }
                            else {
                                // Validate and include redirect uri
                                parameterBuilder.addRedirectUri(request.redirectUri);
                            }
                            // Add scope array, parameter builder will add default scopes and dedupe
                            parameterBuilder.addScopes(request.scopes);
                            // add code: user set, not validated
                            parameterBuilder.addAuthorizationCode(request.code);
                            // Add library metadata
                            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);
                            parameterBuilder.addThrottling();
                            if (this.serverTelemetryManager) {
                                parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                            }
                            // add code_verifier if passed
                            if (request.codeVerifier) {
                                parameterBuilder.addCodeVerifier(request.codeVerifier);
                            }
                            if (this.config.clientCredentials.clientSecret) {
                                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                            }
                            if (this.config.clientCredentials.clientAssertion) {
                                clientAssertion = this.config.clientCredentials.clientAssertion;
                                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                            }
                            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);
                            parameterBuilder.addClientInfo();
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                        case 1:
                            reqCnfData = _d.sent();
                            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)
                            parameterBuilder.addPopToken(reqCnfData.reqCnfString);
                            return [3 /*break*/, 3];
                        case 2:
                            if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {
                                if (request.sshJwk) {
                                    parameterBuilder.addSshJwk(request.sshJwk);
                                }
                                else {
                                    throw ClientConfigurationError.createMissingSshJwkError();
                                }
                            }
                            _d.label = 3;
                        case 3:
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            ccsCred = undefined;
                            if (request.clientInfo) {
                                try {
                                    clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);
                                    ccsCred = {
                                        credential: "" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,
                                        type: CcsCredentialType.HOME_ACCOUNT_ID
                                    };
                                }
                                catch (e) {
                                    this.logger.verbose("Could not parse client info for CCS Header: " + e);
                                }
                            }
                            else {
                                ccsCred = request.ccsCredential;
                            }
                            // Adds these as parameters in the request instead of headers to prevent CORS preflight request
                            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {
                                switch (ccsCred.type) {
                                    case CcsCredentialType.HOME_ACCOUNT_ID:
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                        }
                                        break;
                                    case CcsCredentialType.UPN:
                                        parameterBuilder.addCcsUpn(ccsCred.credential);
                                        break;
                                }
                            }
                            if (request.tokenBodyParameters) {
                                parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);
                            }
                            // Add hybrid spa parameters if not already provided
                            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {
                                parameterBuilder.addExtraQueryParameters((_c = {},
                                    _c[AADServerParamKeys.RETURN_SPA_CODE] = "1",
                                    _c));
                            }
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        /**
         * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
         * @param request
         */
        AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthClientCreateQueryString, request.correlationId);
                            parameterBuilder = new RequestParameterBuilder$1();
                            parameterBuilder.addClientId(this.config.authOptions.clientId);
                            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);
                            parameterBuilder.addScopes(requestScopes);
                            // validate the redirectUri (to be a non null value)
                            parameterBuilder.addRedirectUri(request.redirectUri);
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            // add response_mode. If not passed in it defaults to query.
                            parameterBuilder.addResponseMode(request.responseMode);
                            // add response_type = code
                            parameterBuilder.addResponseTypeCode();
                            // add library info parameters
                            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);
                            // add client_info=1
                            parameterBuilder.addClientInfo();
                            if (request.codeChallenge && request.codeChallengeMethod) {
                                parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
                            }
                            if (request.prompt) {
                                parameterBuilder.addPrompt(request.prompt);
                            }
                            if (request.domainHint) {
                                parameterBuilder.addDomainHint(request.domainHint);
                            }
                            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object
                            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {
                                // AAD will throw if prompt=select_account is passed with an account hint
                                if (request.sid && request.prompt === PromptValue.NONE) {
                                    // SessionID is only used in silent calls
                                    this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
                                    parameterBuilder.addSid(request.sid);
                                }
                                else if (request.account) {
                                    accountSid = this.extractAccountSid(request.account);
                                    accountLoginHintClaim = this.extractLoginHint(request.account);
                                    // If login_hint claim is present, use it over sid/username
                                    if (accountLoginHintClaim) {
                                        this.logger.verbose("createAuthCodeUrlQueryString: login_hint claim present on account");
                                        parameterBuilder.addLoginHint(accountLoginHintClaim);
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                                        }
                                    }
                                    else if (accountSid && request.prompt === PromptValue.NONE) {
                                        /*
                                         * If account and loginHint are provided, we will check account first for sid before adding loginHint
                                         * SessionId is only used in silent calls
                                         */
                                        this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                                        parameterBuilder.addSid(accountSid);
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                                        }
                                    }
                                    else if (request.loginHint) {
                                        this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                                        parameterBuilder.addLoginHint(request.loginHint);
                                        parameterBuilder.addCcsUpn(request.loginHint);
                                    }
                                    else if (request.account.username) {
                                        // Fallback to account username if provided
                                        this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                                        parameterBuilder.addLoginHint(request.account.username);
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header");
                                        }
                                    }
                                }
                                else if (request.loginHint) {
                                    this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
                                    parameterBuilder.addLoginHint(request.loginHint);
                                    parameterBuilder.addCcsUpn(request.loginHint);
                                }
                            }
                            else {
                                this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
                            }
                            if (request.nonce) {
                                parameterBuilder.addNonce(request.nonce);
                            }
                            if (request.state) {
                                parameterBuilder.addState(request.state);
                            }
                            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            if (request.extraQueryParameters) {
                                parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
                            }
                            if (!request.nativeBroker) return [3 /*break*/, 2];
                            // signal ests that this is a WAM call
                            parameterBuilder.addNativeBroker();
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                        case 1:
                            reqCnfData = _b.sent();
                            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);
                            _b.label = 2;
                        case 2: return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        /**
         * This API validates the `EndSessionRequest` and creates a URL
         * @param request
         */
        AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {
            var parameterBuilder = new RequestParameterBuilder$1();
            if (request.postLogoutRedirectUri) {
                parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);
            }
            if (request.correlationId) {
                parameterBuilder.addCorrelationId(request.correlationId);
            }
            if (request.idTokenHint) {
                parameterBuilder.addIdTokenHint(request.idTokenHint);
            }
            if (request.state) {
                parameterBuilder.addState(request.state);
            }
            if (request.logoutHint) {
                parameterBuilder.addLogoutHint(request.logoutHint);
            }
            if (request.extraQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
            }
            return parameterBuilder.createQueryString();
        };
        /**
         * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
         * @param account
         */
        AuthorizationCodeClient.prototype.extractAccountSid = function (account) {
            var _a;
            return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;
        };
        AuthorizationCodeClient.prototype.extractLoginHint = function (account) {
            var _a;
            return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;
        };
        return AuthorizationCodeClient;
    }(BaseClient));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * OAuth2.0 refresh token client
     */
    var RefreshTokenClient = /** @class */ (function (_super) {
        __extends(RefreshTokenClient, _super);
        function RefreshTokenClient(configuration, performanceClient) {
            return _super.call(this, configuration, performanceClient) || this;
        }
        RefreshTokenClient.prototype.acquireToken = function (request) {
            var _a, _b, _c, _d, _e, _f, _g;
            return __awaiter(this, void 0, void 0, function () {
                var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;
                var _this = this;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);
                            atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);
                            this.logger.verbose("RefreshTokenClientAcquireToken called", request.correlationId);
                            reqTimestamp = TimeUtils.nowSeconds();
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);
                            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];
                        case 1:
                            response = _h.sent();
                            httpVerToken = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_HTTP_VERSION];
                            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({
                                refreshTokenSize: ((_e = response.body.refresh_token) === null || _e === void 0 ? void 0 : _e.length) || 0,
                            });
                            if (httpVerToken) {
                                atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({
                                    httpVerToken: httpVerToken,
                                });
                            }
                            requestId = (_f = response.headers) === null || _f === void 0 ? void 0 : _f[HeaderNames.X_MS_REQUEST_ID];
                            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            responseHandler.validateTokenResponse(response.body);
                            (_g = this.performanceClient) === null || _g === void 0 ? void 0 : _g.setPreQueueTime(PerformanceEvents.HandleServerTokenResponse, request.correlationId);
                            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {
                                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({
                                        success: true
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    _this.logger.verbose("Error in fetching refresh token", request.correlationId);
                                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({
                                        errorCode: error.errorCode,
                                        subErrorCode: error.subError,
                                        success: false
                                    });
                                    throw error;
                                })];
                    }
                });
            });
        };
        /**
         * Gets cached refresh token and attaches to request, then calls acquireToken API
         * @param request
         */
        RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
                return __generator(this, function (_e) {
                    // Cannot renew token if no request object is given.
                    if (!request) {
                        throw ClientConfigurationError.createEmptyTokenRequestError();
                    }
                    (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);
                    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                    if (!request.account) {
                        throw ClientAuthError.createNoAccountInSilentRequestError();
                    }
                    isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);
                    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                    if (isFOCI) {
                        try {
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
                            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];
                        }
                        catch (e) {
                            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;
                            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;
                            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                                (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
                                return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                                // throw in all other cases
                            }
                            else {
                                throw e;
                            }
                        }
                    }
                    // fall back to application refresh token acquisition
                    (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
                    return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];
                });
            });
        };
        /**
         * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
         * @param request
         */
        RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var atsMeasurement, refreshToken, refreshTokenRequest;
                return __generator(this, function (_d) {
                    (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
                    atsMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);
                    this.logger.verbose("RefreshTokenClientAcquireTokenWithCachedRefreshToken called", request.correlationId);
                    refreshToken = this.cacheManager.getRefreshToken(request.account, foci);
                    if (!refreshToken) {
                        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();
                        throw InteractionRequiredAuthError.createNoTokensFoundError();
                    }
                    // attach cached RT size to the current measurement
                    atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({
                        success: true
                    });
                    refreshTokenRequest = __assign(__assign({}, request), { refreshToken: refreshToken.secret, authenticationScheme: request.authenticationScheme || exports.AuthenticationScheme.BEARER, ccsCredential: {
                            credential: request.account.homeAccountId,
                            type: CcsCredentialType.HOME_ACCOUNT_ID
                        } });
                    (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);
                    return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
                });
            });
        };
        /**
         * Constructs the network message and makes a NW call to the underlying secure token service
         * @param request
         * @param authority
         */
        RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var acquireTokenMeasurement, queryParametersString, endpoint, requestBody, headers, thumbprint;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);
                            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);
                            queryParametersString = this.createTokenQueryParameters(request);
                            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);
                            return [4 /*yield*/, this.createTokenRequestBody(request)];
                        case 1:
                            requestBody = _d.sent();
                            headers = this.createTokenRequestHeaders(request.ccsCredential);
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes,
                                claims: request.claims,
                                authenticationScheme: request.authenticationScheme,
                                resourceRequestMethod: request.resourceRequestMethod,
                                resourceRequestUri: request.resourceRequestUri,
                                shrClaims: request.shrClaims,
                                sshKid: request.sshKid
                            };
                            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)
                                    .then(function (result) {
                                    acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({
                                        success: true
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({
                                        success: false
                                    });
                                    throw error;
                                })];
                    }
                });
            });
        };
        /**
         * Helper function to create the token request body
         * @param request
         */
        RefreshTokenClient.prototype.createTokenRequestBody = function (request) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);
                            correlationId = request.correlationId;
                            acquireTokenMeasurement = (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);
                            parameterBuilder = new RequestParameterBuilder$1();
                            parameterBuilder.addClientId(this.config.authOptions.clientId);
                            parameterBuilder.addScopes(request.scopes);
                            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);
                            parameterBuilder.addClientInfo();
                            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);
                            parameterBuilder.addThrottling();
                            if (this.serverTelemetryManager) {
                                parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                            }
                            parameterBuilder.addCorrelationId(correlationId);
                            parameterBuilder.addRefreshToken(request.refreshToken);
                            if (this.config.clientCredentials.clientSecret) {
                                parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);
                            }
                            if (this.config.clientCredentials.clientAssertion) {
                                clientAssertion = this.config.clientCredentials.clientAssertion;
                                parameterBuilder.addClientAssertion(clientAssertion.assertion);
                                parameterBuilder.addClientAssertionType(clientAssertion.assertionType);
                            }
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                        case 1:
                            reqCnfData = _d.sent();
                            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)
                            parameterBuilder.addPopToken(reqCnfData.reqCnfString);
                            return [3 /*break*/, 3];
                        case 2:
                            if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {
                                if (request.sshJwk) {
                                    parameterBuilder.addSshJwk(request.sshJwk);
                                }
                                else {
                                    acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({
                                        success: false
                                    });
                                    throw ClientConfigurationError.createMissingSshJwkError();
                                }
                            }
                            _d.label = 3;
                        case 3:
                            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {
                                switch (request.ccsCredential.type) {
                                    case CcsCredentialType.HOME_ACCOUNT_ID:
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                        }
                                        break;
                                    case CcsCredentialType.UPN:
                                        parameterBuilder.addCcsUpn(request.ccsCredential.credential);
                                        break;
                                }
                            }
                            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({
                                success: true
                            });
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        return RefreshTokenClient;
    }(BaseClient));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentFlowClient = /** @class */ (function (_super) {
        __extends(SilentFlowClient, _super);
        function SilentFlowClient(configuration, performanceClient) {
            return _super.call(this, configuration, performanceClient) || this;
        }
        /**
         * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
         * the given token and returns the renewed token
         * @param request
         */
        SilentFlowClient.prototype.acquireToken = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var e_1, refreshTokenClient;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.acquireCachedToken(request)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            e_1 = _a.sent();
                            if (e_1 instanceof ClientAuthError && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {
                                refreshTokenClient = new RefreshTokenClient(this.config, this.performanceClient);
                                return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];
                            }
                            else {
                                throw e_1;
                            }
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Retrieves token from cache or throws an error if it must be refreshed.
         * @param request
         */
        SilentFlowClient.prototype.acquireCachedToken = function (request) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var environment, cacheRecord;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            // Cannot renew token if no request object is given.
                            if (!request) {
                                throw ClientConfigurationError.createEmptyTokenRequestError();
                            }
                            if (request.forceRefresh) {
                                // Must refresh due to present force_refresh flag.
                                (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);
                                this.logger.info("SilentFlowClient:acquireCachedToken - Skipping cache because forceRefresh is true.");
                                throw ClientAuthError.createRefreshRequiredError();
                            }
                            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                            if (!request.account) {
                                throw ClientAuthError.createNoAccountInSilentRequestError();
                            }
                            environment = request.authority || this.authority.getPreferredCache();
                            cacheRecord = this.cacheManager.readCacheRecord(request.account, request, environment);
                            if (!cacheRecord.accessToken) {
                                // Must refresh due to non-existent access_token.
                                (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);
                                this.logger.info("SilentFlowClient:acquireCachedToken - No access token found in cache for the given properties.");
                                throw ClientAuthError.createRefreshRequiredError();
                            }
                            else if (TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||
                                TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {
                                // Must refresh due to expired access_token.
                                (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);
                                this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token is expired or will expire within " + this.config.systemOptions.tokenRenewalOffsetSeconds + " seconds.");
                                throw ClientAuthError.createRefreshRequiredError();
                            }
                            else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {
                                // Must refresh due to the refresh_in value.
                                (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);
                                this.logger.info("SilentFlowClient:acquireCachedToken - Cached access token's refreshOn property has been exceeded'.");
                                throw ClientAuthError.createRefreshRequiredError();
                            }
                            if (this.config.serverTelemetryManager) {
                                this.config.serverTelemetryManager.incrementCacheHits();
                            }
                            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];
                        case 1: return [2 /*return*/, _e.sent()];
                    }
                });
            });
        };
        /**
         * Helper function to build response object from the CacheRecord
         * @param cacheRecord
         */
        SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {
            return __awaiter(this, void 0, void 0, function () {
                var idTokenObj, authTime;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (cacheRecord.idToken) {
                                idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);
                            }
                            // token max_age check
                            if (request.maxAge || (request.maxAge === 0)) {
                                authTime = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.auth_time;
                                if (!authTime) {
                                    throw ClientAuthError.createAuthTimeNotFoundError();
                                }
                                AuthToken.checkMaxAge(authTime, request.maxAge);
                            }
                            return [4 /*yield*/, ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return SilentFlowClient;
    }(BaseClient));

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    function isOpenIdConfigResponse(response) {
        return (response.hasOwnProperty("authorization_endpoint") &&
            response.hasOwnProperty("token_endpoint") &&
            response.hasOwnProperty("issuer") &&
            response.hasOwnProperty("jwks_uri"));
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var rawMetdataJSON = { "endpointMetadata": { "https://login.microsoftonline.com/common/": { "token_endpoint": "https://login.microsoftonline.com/common/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.com/common/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.com/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.com/common/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.com/common/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.com/common/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.com/common/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.com", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pas.windows.net" }, "https://login.chinacloudapi.cn/common/": { "token_endpoint": "https://login.chinacloudapi.cn/common/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.chinacloudapi.cn/common/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.partner.microsoftonline.cn/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://microsoftgraph.chinacloudapi.cn/oidc/userinfo", "authorization_endpoint": "https://login.chinacloudapi.cn/common/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.chinacloudapi.cn/common/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.chinacloudapi.cn/common/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.chinacloudapi.cn/common/kerberos", "tenant_region_scope": null, "cloud_instance_name": "partner.microsoftonline.cn", "cloud_graph_host_name": "graph.chinacloudapi.cn", "msgraph_host": "microsoftgraph.chinacloudapi.cn", "rbac_url": "https://pas.chinacloudapi.cn" }, "https://login.microsoftonline.us/common/": { "token_endpoint": "https://login.microsoftonline.us/common/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.us/common/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.us/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.us/common/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.us/common/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.us/common/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.us/common/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.us", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pasff.usgovcloudapi.net" }, "https://login.microsoftonline.com/consumers/": { "token_endpoint": "https://login.microsoftonline.com/consumers/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.com/consumers/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.com/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.com/consumers/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.com/consumers/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.com/consumers/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.com", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pas.windows.net" }, "https://login.chinacloudapi.cn/consumers/": { "token_endpoint": "https://login.chinacloudapi.cn/consumers/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.chinacloudapi.cn/consumers/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.partner.microsoftonline.cn/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://microsoftgraph.chinacloudapi.cn/oidc/userinfo", "authorization_endpoint": "https://login.chinacloudapi.cn/consumers/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.chinacloudapi.cn/consumers/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.chinacloudapi.cn/consumers/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.chinacloudapi.cn/consumers/kerberos", "tenant_region_scope": null, "cloud_instance_name": "partner.microsoftonline.cn", "cloud_graph_host_name": "graph.chinacloudapi.cn", "msgraph_host": "microsoftgraph.chinacloudapi.cn", "rbac_url": "https://pas.chinacloudapi.cn" }, "https://login.microsoftonline.us/consumers/": { "token_endpoint": "https://login.microsoftonline.us/consumers/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.us/consumers/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.us/9188040d-6c67-4c5b-b112-36a304b66dad/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.us/consumers/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.us/consumers/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.us/consumers/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.us/consumers/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.us", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pasff.usgovcloudapi.net" }, "https://login.microsoftonline.com/organizations/": { "token_endpoint": "https://login.microsoftonline.com/organizations/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.com/organizations/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.com/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.com/organizations/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.com/organizations/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.com/organizations/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.com", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pas.windows.net" }, "https://login.chinacloudapi.cn/organizations/": { "token_endpoint": "https://login.chinacloudapi.cn/organizations/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.chinacloudapi.cn/organizations/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.partner.microsoftonline.cn/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://microsoftgraph.chinacloudapi.cn/oidc/userinfo", "authorization_endpoint": "https://login.chinacloudapi.cn/organizations/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.chinacloudapi.cn/organizations/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.chinacloudapi.cn/organizations/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.chinacloudapi.cn/organizations/kerberos", "tenant_region_scope": null, "cloud_instance_name": "partner.microsoftonline.cn", "cloud_graph_host_name": "graph.chinacloudapi.cn", "msgraph_host": "microsoftgraph.chinacloudapi.cn", "rbac_url": "https://pas.chinacloudapi.cn" }, "https://login.microsoftonline.us/organizations/": { "token_endpoint": "https://login.microsoftonline.us/organizations/oauth2/v2.0/token", "token_endpoint_auth_methods_supported": ["client_secret_post", "private_key_jwt", "client_secret_basic"], "jwks_uri": "https://login.microsoftonline.us/organizations/discovery/v2.0/keys", "response_modes_supported": ["query", "fragment", "form_post"], "subject_types_supported": ["pairwise"], "id_token_signing_alg_values_supported": ["RS256"], "response_types_supported": ["code", "id_token", "code id_token", "id_token token"], "scopes_supported": ["openid", "profile", "email", "offline_access"], "issuer": "https://login.microsoftonline.us/{tenantid}/v2.0", "request_uri_parameter_supported": false, "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo", "authorization_endpoint": "https://login.microsoftonline.us/organizations/oauth2/v2.0/authorize", "device_authorization_endpoint": "https://login.microsoftonline.us/organizations/oauth2/v2.0/devicecode", "http_logout_supported": true, "frontchannel_logout_supported": true, "end_session_endpoint": "https://login.microsoftonline.us/organizations/oauth2/v2.0/logout", "claims_supported": ["sub", "iss", "cloud_instance_name", "cloud_instance_host_name", "cloud_graph_host_name", "msgraph_host", "aud", "exp", "iat", "auth_time", "acr", "nonce", "preferred_username", "name", "tid", "ver", "at_hash", "c_hash", "email"], "kerberos_endpoint": "https://login.microsoftonline.us/organizations/kerberos", "tenant_region_scope": null, "cloud_instance_name": "microsoftonline.us", "cloud_graph_host_name": "graph.windows.net", "msgraph_host": "graph.microsoft.com", "rbac_url": "https://pasff.usgovcloudapi.net" } }, "instanceDiscoveryMetadata": { "https://login.microsoftonline.com/common/": { "tenant_discovery_endpoint": "https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.chinacloudapi.cn/common/": { "tenant_discovery_endpoint": "https://login.chinacloudapi.cn/common/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.microsoftonline.us/common/": { "tenant_discovery_endpoint": "https://login.microsoftonline.us/common/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.microsoftonline.com/consumers/": { "tenant_discovery_endpoint": "https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.chinacloudapi.cn/consumers/": { "tenant_discovery_endpoint": "https://login.chinacloudapi.cn/consumers/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.microsoftonline.us/consumers/": { "tenant_discovery_endpoint": "https://login.microsoftonline.us/consumers/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.microsoftonline.com/organizations/": { "tenant_discovery_endpoint": "https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.chinacloudapi.cn/organizations/": { "tenant_discovery_endpoint": "https://login.chinacloudapi.cn/organizations/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] }, "https://login.microsoftonline.us/organizations/": { "tenant_discovery_endpoint": "https://login.microsoftonline.us/organizations/v2.0/.well-known/openid-configuration", "api-version": "1.1", "metadata": [{ "preferred_network": "login.microsoftonline.com", "preferred_cache": "login.windows.net", "aliases": ["login.microsoftonline.com", "login.windows.net", "login.microsoft.com", "sts.windows.net"] }, { "preferred_network": "login.partner.microsoftonline.cn", "preferred_cache": "login.partner.microsoftonline.cn", "aliases": ["login.partner.microsoftonline.cn", "login.chinacloudapi.cn"] }, { "preferred_network": "login.microsoftonline.de", "preferred_cache": "login.microsoftonline.de", "aliases": ["login.microsoftonline.de"] }, { "preferred_network": "login.microsoftonline.us", "preferred_cache": "login.microsoftonline.us", "aliases": ["login.microsoftonline.us", "login.usgovcloudapi.net"] }, { "preferred_network": "login-us.microsoftonline.com", "preferred_cache": "login-us.microsoftonline.com", "aliases": ["login-us.microsoftonline.com"] }] } } };
    var EndpointMetadata = rawMetdataJSON.endpointMetadata;
    var InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Protocol modes supported by MSAL.
     */
    exports.ProtocolMode = void 0;
    (function (ProtocolMode) {
        ProtocolMode["AAD"] = "AAD";
        ProtocolMode["OIDC"] = "OIDC";
    })(exports.ProtocolMode || (exports.ProtocolMode = {}));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AuthorityMetadataEntity = /** @class */ (function () {
        function AuthorityMetadataEntity() {
            this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
        }
        /**
         * Update the entity with new aliases, preferred_cache and preferred_network values
         * @param metadata
         * @param fromNetwork
         */
        AuthorityMetadataEntity.prototype.updateCloudDiscoveryMetadata = function (metadata, fromNetwork) {
            this.aliases = metadata.aliases;
            this.preferred_cache = metadata.preferred_cache;
            this.preferred_network = metadata.preferred_network;
            this.aliasesFromNetwork = fromNetwork;
        };
        /**
         * Update the entity with new endpoints
         * @param metadata
         * @param fromNetwork
         */
        AuthorityMetadataEntity.prototype.updateEndpointMetadata = function (metadata, fromNetwork) {
            this.authorization_endpoint = metadata.authorization_endpoint;
            this.token_endpoint = metadata.token_endpoint;
            this.end_session_endpoint = metadata.end_session_endpoint;
            this.issuer = metadata.issuer;
            this.endpointsFromNetwork = fromNetwork;
            this.jwks_uri = metadata.jwks_uri;
        };
        /**
         * Save the authority that was used to create this cache entry
         * @param authority
         */
        AuthorityMetadataEntity.prototype.updateCanonicalAuthority = function (authority) {
            this.canonical_authority = authority;
        };
        /**
         * Reset the exiresAt value
         */
        AuthorityMetadataEntity.prototype.resetExpiresAt = function () {
            this.expiresAt = TimeUtils.nowSeconds() + AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS;
        };
        /**
         * Returns whether or not the data needs to be refreshed
         */
        AuthorityMetadataEntity.prototype.isExpired = function () {
            return this.expiresAt <= TimeUtils.nowSeconds();
        };
        /**
         * Validates an entity: checks for all expected params
         * @param entity
         */
        AuthorityMetadataEntity.isAuthorityMetadataEntity = function (key, entity) {
            if (!entity) {
                return false;
            }
            return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&
                entity.hasOwnProperty("aliases") &&
                entity.hasOwnProperty("preferred_cache") &&
                entity.hasOwnProperty("preferred_network") &&
                entity.hasOwnProperty("canonical_authority") &&
                entity.hasOwnProperty("authorization_endpoint") &&
                entity.hasOwnProperty("token_endpoint") &&
                entity.hasOwnProperty("issuer") &&
                entity.hasOwnProperty("aliasesFromNetwork") &&
                entity.hasOwnProperty("endpointsFromNetwork") &&
                entity.hasOwnProperty("expiresAt") &&
                entity.hasOwnProperty("jwks_uri"));
        };
        return AuthorityMetadataEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    function isCloudInstanceDiscoveryResponse(response) {
        return (response.hasOwnProperty("tenant_discovery_endpoint") &&
            response.hasOwnProperty("metadata"));
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    function isCloudInstanceDiscoveryErrorResponse(response) {
        return (response.hasOwnProperty("error") &&
            response.hasOwnProperty("error_description"));
    }

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RegionDiscovery = /** @class */ (function () {
        function RegionDiscovery(networkInterface, performanceClient, correlationId) {
            this.networkInterface = networkInterface;
            this.performanceClient = performanceClient;
            this.correlationId = correlationId;
        }
        /**
         * Detect the region from the application's environment.
         *
         * @returns Promise<string | null>
         */
        RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var autodetectedRegionName, options, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);
                            autodetectedRegionName = environmentRegion;
                            if (!!autodetectedRegionName) return [3 /*break*/, 8];
                            options = RegionDiscovery.IMDS_OPTIONS;
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 6, , 7]);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);
                            return [4 /*yield*/, this.getRegionFromIMDS(Constants.IMDS_VERSION, options)];
                        case 2:
                            localIMDSVersionResponse = _e.sent();
                            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {
                                autodetectedRegionName = localIMDSVersionResponse.body;
                                regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;
                            }
                            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3 /*break*/, 5];
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);
                            return [4 /*yield*/, this.getCurrentVersion(options)];
                        case 3:
                            currentIMDSVersion = _e.sent();
                            if (!currentIMDSVersion) {
                                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;
                                return [2 /*return*/, null];
                            }
                            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);
                            return [4 /*yield*/, this.getRegionFromIMDS(currentIMDSVersion, options)];
                        case 4:
                            currentIMDSVersionResponse = _e.sent();
                            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {
                                autodetectedRegionName = currentIMDSVersionResponse.body;
                                regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;
                            }
                            _e.label = 5;
                        case 5: return [3 /*break*/, 7];
                        case 6:
                            _e.sent();
                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;
                            return [2 /*return*/, null];
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;
                            _e.label = 9;
                        case 9:
                            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION
                            if (!autodetectedRegionName) {
                                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;
                            }
                            return [2 /*return*/, autodetectedRegionName || null];
                    }
                });
            });
        };
        /**
         * Make the call to the IMDS endpoint
         *
         * @param imdsEndpointUrl
         * @returns Promise<NetworkResponse<string>>
         */
        RegionDiscovery.prototype.getRegionFromIMDS = function (version, options) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_b) {
                    (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);
                    return [2 /*return*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + "?api-version=" + version + "&format=text", options, Constants.IMDS_TIMEOUT)];
                });
            });
        };
        /**
         * Get the most recent version of the IMDS endpoint available
         *
         * @returns Promise<string | null>
         */
        RegionDiscovery.prototype.getCurrentVersion = function (options) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var response;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(Constants.IMDS_ENDPOINT + "?format=json", options)];
                        case 2:
                            response = _b.sent();
                            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.
                            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body["newest-versions"] && response.body["newest-versions"].length > 0) {
                                return [2 /*return*/, response.body["newest-versions"][0]];
                            }
                            return [2 /*return*/, null];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, null];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        // Options for the IMDS endpoint request
        RegionDiscovery.IMDS_OPTIONS = {
            headers: {
                Metadata: "true",
            },
        };
        return RegionDiscovery;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the
     * endpoint. It will store the pertinent config data in this object for use during token calls.
     */
    var Authority = /** @class */ (function () {
        function Authority(authority, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {
            this.canonicalAuthority = authority;
            this._canonicalAuthority.validateAsUri();
            this.networkInterface = networkInterface;
            this.cacheManager = cacheManager;
            this.authorityOptions = authorityOptions;
            this.regionDiscoveryMetadata = { region_used: undefined, region_source: undefined, region_outcome: undefined };
            this.logger = logger;
            this.performanceClient = performanceClient;
            this.correlationId = correlationId;
            this.regionDiscovery = new RegionDiscovery(networkInterface, this.performanceClient, this.correlationId);
        }
        Object.defineProperty(Authority.prototype, "authorityType", {
            // See above for AuthorityType
            get: function () {
                // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com
                if (this.canonicalAuthorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {
                    return AuthorityType.Ciam;
                }
                var pathSegments = this.canonicalAuthorityUrlComponents.PathSegments;
                if (pathSegments.length) {
                    switch (pathSegments[0].toLowerCase()) {
                        case Constants.ADFS:
                            return AuthorityType.Adfs;
                        case Constants.DSTS:
                            return AuthorityType.Dsts;
                    }
                }
                return AuthorityType.Default;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "protocolMode", {
            /**
             * ProtocolMode enum representing the way endpoints are constructed.
             */
            get: function () {
                return this.authorityOptions.protocolMode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "options", {
            /**
             * Returns authorityOptions which can be used to reinstantiate a new authority instance
             */
            get: function () {
                return this.authorityOptions;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "canonicalAuthority", {
            /**
             * A URL that is the authority set by the developer
             */
            get: function () {
                return this._canonicalAuthority.urlString;
            },
            /**
             * Sets canonical authority.
             */
            set: function (url) {
                this._canonicalAuthority = new UrlString(url);
                this._canonicalAuthority.validateAsUri();
                this._canonicalAuthorityUrlComponents = null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "canonicalAuthorityUrlComponents", {
            /**
             * Get authority components.
             */
            get: function () {
                if (!this._canonicalAuthorityUrlComponents) {
                    this._canonicalAuthorityUrlComponents = this._canonicalAuthority.getUrlComponents();
                }
                return this._canonicalAuthorityUrlComponents;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "hostnameAndPort", {
            /**
             * Get hostname and port i.e. login.microsoftonline.com
             */
            get: function () {
                return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "tenant", {
            /**
             * Get tenant for authority.
             */
            get: function () {
                return this.canonicalAuthorityUrlComponents.PathSegments[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "authorizationEndpoint", {
            /**
             * OAuth /authorize endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    var endpoint = this.replacePath(this.metadata.authorization_endpoint);
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "tokenEndpoint", {
            /**
             * OAuth /token endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    var endpoint = this.replacePath(this.metadata.token_endpoint);
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "deviceCodeEndpoint", {
            get: function () {
                if (this.discoveryComplete()) {
                    var endpoint = this.replacePath(this.metadata.token_endpoint.replace("/token", "/devicecode"));
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "endSessionEndpoint", {
            /**
             * OAuth logout endpoint for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    // ROPC policies may not have end_session_endpoint set
                    if (!this.metadata.end_session_endpoint) {
                        throw ClientAuthError.createLogoutNotSupportedError();
                    }
                    var endpoint = this.replacePath(this.metadata.end_session_endpoint);
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "selfSignedJwtAudience", {
            /**
             * OAuth issuer for requests
             */
            get: function () {
                if (this.discoveryComplete()) {
                    var endpoint = this.replacePath(this.metadata.issuer);
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Authority.prototype, "jwksUri", {
            /**
             * Jwks_uri for token signing keys
             */
            get: function () {
                if (this.discoveryComplete()) {
                    var endpoint = this.replacePath(this.metadata.jwks_uri);
                    return this.replaceTenant(endpoint);
                }
                else {
                    throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Replaces tenant in url path with current tenant. Defaults to common.
         * @param urlString
         */
        Authority.prototype.replaceTenant = function (urlString) {
            return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);
        };
        /**
         * Replaces path such as tenant or policy with the current tenant or policy.
         * @param urlString
         */
        Authority.prototype.replacePath = function (urlString) {
            var endpoint = urlString;
            var cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);
            var cachedAuthorityParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
            var currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;
            currentAuthorityParts.forEach(function (currentPart, index) {
                var cachedPart = cachedAuthorityParts[index];
                if (currentPart !== cachedPart) {
                    endpoint = endpoint.replace("/" + cachedPart + "/", "/" + currentPart + "/");
                }
            });
            return endpoint;
        };
        Object.defineProperty(Authority.prototype, "defaultOpenIdConfigurationEndpoint", {
            /**
             * The default open id configuration endpoint for any canonical authority.
             */
            get: function () {
                if (this.authorityType === AuthorityType.Adfs ||
                    this.authorityType === AuthorityType.Dsts ||
                    this.protocolMode === exports.ProtocolMode.OIDC) {
                    return this.canonicalAuthority + ".well-known/openid-configuration";
                }
                return this.canonicalAuthority + "v2.0/.well-known/openid-configuration";
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Boolean that returns whethr or not tenant discovery has been completed.
         */
        Authority.prototype.discoveryComplete = function () {
            return !!this.metadata;
        };
        /**
         * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network
         * and the /authorize, /token and logout endpoints.
         */
        Authority.prototype.resolveEndpointsAsync = function () {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var metadataEntity, cloudDiscoverySource, endpointSource, cacheKey;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);
                            metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);
                            if (!metadataEntity) {
                                metadataEntity = new AuthorityMetadataEntity();
                                metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                            }
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);
                            return [4 /*yield*/, this.updateCloudDiscoveryMetadata(metadataEntity)];
                        case 1:
                            cloudDiscoverySource = _d.sent();
                            this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);
                            (_c = this.performanceClient) === null || _c === void 0 ? void 0 : _c.setPreQueueTime(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);
                            return [4 /*yield*/, this.updateEndpointMetadata(metadataEntity)];
                        case 2:
                            endpointSource = _d.sent();
                            if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE && endpointSource !== AuthorityMetadataSource.CACHE) {
                                // Reset the expiration time unless both values came from a successful cache lookup
                                metadataEntity.resetExpiresAt();
                                metadataEntity.updateCanonicalAuthority(this.canonicalAuthority);
                            }
                            cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);
                            this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);
                            this.metadata = metadataEntity;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Update AuthorityMetadataEntity with new endpoints and return where the information came from
         * @param metadataEntity
         */
        Authority.prototype.updateEndpointMetadata = function (metadataEntity) {
            var _a, _b, _c, _d, _e, _f;
            return __awaiter(this, void 0, void 0, function () {
                var metadata, harcodedMetadata;
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);
                            metadata = this.getEndpointMetadataFromConfig();
                            if (metadata) {
                                metadataEntity.updateEndpointMetadata(metadata, false);
                                return [2 /*return*/, AuthorityMetadataSource.CONFIG];
                            }
                            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.endpointsFromNetwork && !metadataEntity.isExpired()) {
                                // No need to update
                                return [2 /*return*/, AuthorityMetadataSource.CACHE];
                            }
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);
                            return [4 /*yield*/, this.getEndpointMetadataFromNetwork()];
                        case 1:
                            metadata = _g.sent();
                            if (!metadata) return [3 /*break*/, 4];
                            if (!((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.azureRegion)) return [3 /*break*/, 3];
                            (_d = this.performanceClient) === null || _d === void 0 ? void 0 : _d.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);
                            return [4 /*yield*/, this.updateMetadataWithRegionalInformation(metadata)];
                        case 2:
                            metadata = _g.sent();
                            _g.label = 3;
                        case 3:
                            metadataEntity.updateEndpointMetadata(metadata, true);
                            return [2 /*return*/, AuthorityMetadataSource.NETWORK];
                        case 4:
                            harcodedMetadata = this.getEndpointMetadataFromHardcodedValues();
                            if (!(harcodedMetadata && !this.authorityOptions.skipAuthorityMetadataCache)) return [3 /*break*/, 7];
                            if (!((_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion)) return [3 /*break*/, 6];
                            (_f = this.performanceClient) === null || _f === void 0 ? void 0 : _f.setPreQueueTime(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);
                            return [4 /*yield*/, this.updateMetadataWithRegionalInformation(harcodedMetadata)];
                        case 5:
                            harcodedMetadata = _g.sent();
                            _g.label = 6;
                        case 6:
                            metadataEntity.updateEndpointMetadata(harcodedMetadata, false);
                            return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];
                        case 7: throw ClientAuthError.createUnableToGetOpenidConfigError(this.defaultOpenIdConfigurationEndpoint);
                    }
                });
            });
        };
        /**
         * Compares the number of url components after the domain to determine if the cached
         * authority metadata can be used for the requested authority. Protects against same domain different
         * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy
         * @param metadataEntity
         */
        Authority.prototype.isAuthoritySameType = function (metadataEntity) {
            var cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);
            var cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;
            return cachedParts.length === this.canonicalAuthorityUrlComponents.PathSegments.length;
        };
        /**
         * Parse authorityMetadata config option
         */
        Authority.prototype.getEndpointMetadataFromConfig = function () {
            if (this.authorityOptions.authorityMetadata) {
                try {
                    return JSON.parse(this.authorityOptions.authorityMetadata);
                }
                catch (e) {
                    throw ClientConfigurationError.createInvalidAuthorityMetadataError();
                }
            }
            return null;
        };
        /**
         * Gets OAuth endpoints from the given OpenID configuration endpoint.
         *
         * @param hasHardcodedMetadata boolean
         */
        Authority.prototype.getEndpointMetadataFromNetwork = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var options, response;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);
                            options = {};
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.networkInterface.
                                    sendGetRequestAsync(this.defaultOpenIdConfigurationEndpoint, options)];
                        case 2:
                            response = _b.sent();
                            return [2 /*return*/, isOpenIdConfigResponse(response.body) ? response.body : null];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, null];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get OAuth endpoints for common authorities.
         */
        Authority.prototype.getEndpointMetadataFromHardcodedValues = function () {
            if (this.canonicalAuthority in EndpointMetadata) {
                return EndpointMetadata[this.canonicalAuthority];
            }
            return null;
        };
        /**
         * Update the retrieved metadata with regional information.
         */
        Authority.prototype.updateMetadataWithRegionalInformation = function (metadata) {
            var _a, _b, _c, _d, _e, _f, _g;
            return __awaiter(this, void 0, void 0, function () {
                var autodetectedRegionName, azureRegion;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);
                            return [4 /*yield*/, this.regionDiscovery.detectRegion((_c = this.authorityOptions.azureRegionConfiguration) === null || _c === void 0 ? void 0 : _c.environmentRegion, this.regionDiscoveryMetadata)];
                        case 1:
                            autodetectedRegionName = _h.sent();
                            azureRegion = ((_d = this.authorityOptions.azureRegionConfiguration) === null || _d === void 0 ? void 0 : _d.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG
                                ? autodetectedRegionName
                                : (_e = this.authorityOptions.azureRegionConfiguration) === null || _e === void 0 ? void 0 : _e.azureRegion;
                            if (((_f = this.authorityOptions.azureRegionConfiguration) === null || _f === void 0 ? void 0 : _f.azureRegion) === Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {
                                this.regionDiscoveryMetadata.region_outcome = autodetectedRegionName ?
                                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL :
                                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;
                            }
                            else {
                                if (autodetectedRegionName) {
                                    this.regionDiscoveryMetadata.region_outcome = (((_g = this.authorityOptions.azureRegionConfiguration) === null || _g === void 0 ? void 0 : _g.azureRegion) === autodetectedRegionName) ?
                                        RegionDiscoveryOutcomes.CONFIGURED_MATCHES_DETECTED :
                                        RegionDiscoveryOutcomes.CONFIGURED_NOT_DETECTED;
                                }
                                else {
                                    this.regionDiscoveryMetadata.region_outcome = RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;
                                }
                            }
                            if (azureRegion) {
                                this.regionDiscoveryMetadata.region_used = azureRegion;
                                return [2 /*return*/, Authority.replaceWithRegionalInformation(metadata, azureRegion)];
                            }
                            return [2 /*return*/, metadata];
                    }
                });
            });
        };
        /**
         * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache
         * and returns where the information was retrieved from
         * @param metadataEntity
         * @returns AuthorityMetadataSource
         */
        Authority.prototype.updateCloudDiscoveryMetadata = function (metadataEntity) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var metadata, metadataEntityExpired, harcodedMetadata;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);
                            // attempt to read metadata from the config
                            this.logger.verbose("Attempting to get cloud discovery metadata in the config");
                            this.logger.verbosePii("Known Authorities: " + (this.authorityOptions.knownAuthorities || Constants.NOT_APPLICABLE));
                            this.logger.verbosePii("Authority Metadata: " + (this.authorityOptions.authorityMetadata || Constants.NOT_APPLICABLE));
                            this.logger.verbosePii("Canonical Authority: " + (metadataEntity.canonical_authority || Constants.NOT_APPLICABLE));
                            metadata = this.getCloudDiscoveryMetadataFromConfig();
                            if (metadata) {
                                this.logger.verbose("Found cloud discovery metadata in the config.");
                                metadataEntity.updateCloudDiscoveryMetadata(metadata, false);
                                return [2 /*return*/, AuthorityMetadataSource.CONFIG];
                            }
                            // If the cached metadata came from config but that config was not passed to this instance, we must go to the network
                            this.logger.verbose("Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the cache.");
                            metadataEntityExpired = metadataEntity.isExpired();
                            if (this.isAuthoritySameType(metadataEntity) && metadataEntity.aliasesFromNetwork && !metadataEntityExpired) {
                                this.logger.verbose("Found metadata in the cache.");
                                // No need to update
                                return [2 /*return*/, AuthorityMetadataSource.CACHE];
                            }
                            else if (metadataEntityExpired) {
                                this.logger.verbose("The metadata entity is expired.");
                            }
                            this.logger.verbose("Did not find cloud discovery metadata in the cache... Attempting to get cloud discovery metadata from the network.");
                            (_b = this.performanceClient) === null || _b === void 0 ? void 0 : _b.setPreQueueTime(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);
                            return [4 /*yield*/, this.getCloudDiscoveryMetadataFromNetwork()];
                        case 1:
                            metadata = _c.sent();
                            if (metadata) {
                                this.logger.verbose("cloud discovery metadata was successfully returned from getCloudDiscoveryMetadataFromNetwork()");
                                metadataEntity.updateCloudDiscoveryMetadata(metadata, true);
                                return [2 /*return*/, AuthorityMetadataSource.NETWORK];
                            }
                            this.logger.verbose("Did not find cloud discovery metadata from the network... Attempting to get cloud discovery metadata from hardcoded values.");
                            harcodedMetadata = this.getCloudDiscoveryMetadataFromHarcodedValues();
                            if (harcodedMetadata && !this.options.skipAuthorityMetadataCache) {
                                this.logger.verbose("Found cloud discovery metadata from hardcoded values.");
                                metadataEntity.updateCloudDiscoveryMetadata(harcodedMetadata, false);
                                return [2 /*return*/, AuthorityMetadataSource.HARDCODED_VALUES];
                            }
                            // Metadata could not be obtained from the config, cache, network or hardcoded values
                            this.logger.error("Did not find cloud discovery metadata from hardcoded values... Metadata could not be obtained from config, cache, network or hardcoded values. Throwing Untrusted Authority Error.");
                            throw ClientConfigurationError.createUntrustedAuthorityError();
                    }
                });
            });
        };
        /**
         * Parse cloudDiscoveryMetadata config or check knownAuthorities
         */
        Authority.prototype.getCloudDiscoveryMetadataFromConfig = function () {
            // CIAM does not support cloud discovery metadata
            if (this.authorityType === AuthorityType.Ciam) {
                this.logger.verbose("CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.");
                return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
            }
            // Check if network response was provided in config
            if (this.authorityOptions.cloudDiscoveryMetadata) {
                this.logger.verbose("The cloud discovery metadata has been provided as a network response, in the config.");
                try {
                    this.logger.verbose("Attempting to parse the cloud discovery metadata.");
                    var parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);
                    var metadata = Authority.getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);
                    this.logger.verbose("Parsed the cloud discovery metadata.");
                    if (metadata) {
                        this.logger.verbose("There is returnable metadata attached to the parsed cloud discovery metadata.");
                        return metadata;
                    }
                    else {
                        this.logger.verbose("There is no metadata attached to the parsed cloud discovery metadata.");
                    }
                }
                catch (e) {
                    this.logger.verbose("Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.");
                    throw ClientConfigurationError.createInvalidCloudDiscoveryMetadataError();
                }
            }
            // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities
            if (this.isInKnownAuthorities()) {
                this.logger.verbose("The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.");
                return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
            }
            return null;
        };
        /**
         * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config
         *
         * @param hasHardcodedMetadata boolean
         */
        Authority.prototype.getCloudDiscoveryMetadataFromNetwork = function () {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var instanceDiscoveryEndpoint, options, match, response, typedResponseBody, metadata, error_1, typedError;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);
                            instanceDiscoveryEndpoint = "" + Constants.AAD_INSTANCE_DISCOVERY_ENDPT + this.canonicalAuthority + "oauth2/v2.0/authorize";
                            options = {};
                            match = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options)];
                        case 2:
                            response = _b.sent();
                            typedResponseBody = void 0;
                            metadata = void 0;
                            if (isCloudInstanceDiscoveryResponse(response.body)) {
                                typedResponseBody = response.body;
                                metadata = typedResponseBody.metadata;
                                this.logger.verbosePii("tenant_discovery_endpoint is: " + typedResponseBody.tenant_discovery_endpoint);
                            }
                            else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {
                                this.logger.warning("A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: " + response.status);
                                typedResponseBody = response.body;
                                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {
                                    this.logger.error("The CloudInstanceDiscoveryErrorResponse error is invalid_instance.");
                                    return [2 /*return*/, null];
                                }
                                this.logger.warning("The CloudInstanceDiscoveryErrorResponse error is " + typedResponseBody.error);
                                this.logger.warning("The CloudInstanceDiscoveryErrorResponse error description is " + typedResponseBody.error_description);
                                this.logger.warning("Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []");
                                metadata = [];
                            }
                            else {
                                this.logger.error("AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse");
                                return [2 /*return*/, null];
                            }
                            this.logger.verbose("Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.");
                            match = Authority.getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _b.sent();
                            if (error_1 instanceof AuthError) {
                                this.logger.error("There was a network error while attempting to get the cloud discovery instance metadata.\r\nError: " + error_1.errorCode + "\r\nError Description: " + error_1.errorMessage);
                            }
                            else {
                                typedError = error_1;
                                this.logger.error("A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\r\nError: " + typedError.name + "\r\nError Description: " + typedError.message);
                            }
                            return [2 /*return*/, null];
                        case 4:
                            // Custom Domain scenario, host is trusted because Instance Discovery call succeeded
                            if (!match) {
                                this.logger.warning("The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.");
                                this.logger.verbose("Creating custom Authority for custom domain scenario.");
                                match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);
                            }
                            return [2 /*return*/, match];
                    }
                });
            });
        };
        /**
         * Get cloud discovery metadata for common authorities
         */
        Authority.prototype.getCloudDiscoveryMetadataFromHarcodedValues = function () {
            if (this.canonicalAuthority in InstanceDiscoveryMetadata) {
                return InstanceDiscoveryMetadata[this.canonicalAuthority];
            }
            return null;
        };
        /**
         * Helper function to determine if this host is included in the knownAuthorities config option
         */
        Authority.prototype.isInKnownAuthorities = function () {
            var _this = this;
            var matches = this.authorityOptions.knownAuthorities.filter(function (authority) {
                return UrlString.getDomainFromUrl(authority).toLowerCase() === _this.hostnameAndPort;
            });
            return matches.length > 0;
        };
        /**
         * helper function to populate the authority based on azureCloudOptions
         * @param authorityString
         * @param azureCloudOptions
         */
        Authority.generateAuthority = function (authorityString, azureCloudOptions) {
            var authorityAzureCloudInstance;
            if (azureCloudOptions && azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {
                var tenant = azureCloudOptions.tenant ? azureCloudOptions.tenant : Constants.DEFAULT_COMMON_TENANT;
                authorityAzureCloudInstance = azureCloudOptions.azureCloudInstance + "/" + tenant + "/";
            }
            return authorityAzureCloudInstance ? authorityAzureCloudInstance : authorityString;
        };
        /**
         * Creates cloud discovery metadata object from a given host
         * @param host
         */
        Authority.createCloudDiscoveryMetadataFromHost = function (host) {
            return {
                preferred_network: host,
                preferred_cache: host,
                aliases: [host]
            };
        };
        /**
         * Searches instance discovery network response for the entry that contains the host in the aliases list
         * @param response
         * @param authority
         */
        Authority.getCloudDiscoveryMetadataFromNetworkResponse = function (response, authority) {
            for (var i = 0; i < response.length; i++) {
                var metadata = response[i];
                if (metadata.aliases.indexOf(authority) > -1) {
                    return metadata;
                }
            }
            return null;
        };
        /**
         * helper function to generate environment from authority object
         */
        Authority.prototype.getPreferredCache = function () {
            if (this.discoveryComplete()) {
                return this.metadata.preferred_cache;
            }
            else {
                throw ClientAuthError.createEndpointDiscoveryIncompleteError("Discovery incomplete.");
            }
        };
        /**
         * Returns whether or not the provided host is an alias of this authority instance
         * @param host
         */
        Authority.prototype.isAlias = function (host) {
            return this.metadata.aliases.indexOf(host) > -1;
        };
        /**
         * Checks whether the provided host is that of a public cloud authority
         *
         * @param authority string
         * @returns bool
         */
        Authority.isPublicCloudAuthority = function (host) {
            return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;
        };
        /**
         * Rebuild the authority string with the region
         *
         * @param host string
         * @param region string
         */
        Authority.buildRegionalAuthorityString = function (host, region, queryString) {
            // Create and validate a Url string object with the initial authority string
            var authorityUrlInstance = new UrlString(host);
            authorityUrlInstance.validateAsUri();
            var authorityUrlParts = authorityUrlInstance.getUrlComponents();
            var hostNameAndPort = region + "." + authorityUrlParts.HostNameAndPort;
            if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {
                hostNameAndPort = region + "." + Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX;
            }
            // Include the query string portion of the url
            var url = UrlString.constructAuthorityUriFromObject(__assign(__assign({}, authorityUrlInstance.getUrlComponents()), { HostNameAndPort: hostNameAndPort })).urlString;
            // Add the query string if a query string was provided
            if (queryString)
                return url + "?" + queryString;
            return url;
        };
        /**
         * Replace the endpoints in the metadata object with their regional equivalents.
         *
         * @param metadata OpenIdConfigResponse
         * @param azureRegion string
         */
        Authority.replaceWithRegionalInformation = function (metadata, azureRegion) {
            metadata.authorization_endpoint = Authority.buildRegionalAuthorityString(metadata.authorization_endpoint, azureRegion);
            // TODO: Enquire on whether we should leave the query string or remove it before releasing the feature
            metadata.token_endpoint = Authority.buildRegionalAuthorityString(metadata.token_endpoint, azureRegion, Constants.REGIONAL_AUTH_NON_MSI_QUERY_STRING);
            if (metadata.end_session_endpoint) {
                metadata.end_session_endpoint = Authority.buildRegionalAuthorityString(metadata.end_session_endpoint, azureRegion);
            }
            return metadata;
        };
        /**
         * Transform CIAM_AUTHORIY as per the below rules:
         * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it
         *
         * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`
         * `ciamlogin.com` can also change in the future and we should accommodate the same
         *
         * @param authority
         */
        Authority.transformCIAMAuthority = function (authority) {
            var ciamAuthority = authority.endsWith(Constants.FORWARD_SLASH) ? authority : "" + authority + Constants.FORWARD_SLASH;
            var authorityUrl = new UrlString(authority);
            var authorityUrlComponents = authorityUrl.getUrlComponents();
            // check if transformation is needed
            if (authorityUrlComponents.PathSegments.length === 0 && (authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL))) {
                var tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(".")[0];
                ciamAuthority = "" + ciamAuthority + tenantIdOrDomain + Constants.AAD_TENANT_DOMAIN_SUFFIX;
            }
            return ciamAuthority;
        };
        return Authority;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var AuthorityFactory = /** @class */ (function () {
        function AuthorityFactory() {
        }
        /**
         * Create an authority object of the correct type based on the url
         * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
         *
         * Also performs endpoint discovery.
         *
         * @param authorityUri
         * @param networkClient
         * @param protocolMode
         */
        AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId) {
            return __awaiter(this, void 0, void 0, function () {
                var authorityUriFinal, acquireTokenAuthority, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);
                            authorityUriFinal = Authority.transformCIAMAuthority(authorityUri);
                            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, performanceClient, correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            performanceClient === null || performanceClient === void 0 ? void 0 : performanceClient.setPreQueueTime(PerformanceEvents.AuthorityResolveEndpointsAsync, correlationId);
                            return [4 /*yield*/, acquireTokenAuthority.resolveEndpointsAsync()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, acquireTokenAuthority];
                        case 3:
                            e_1 = _a.sent();
                            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e_1);
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Create an authority object of the correct type based on the url
         * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)
         *
         * Does not perform endpoint discovery.
         *
         * @param authorityUrl
         * @param networkInterface
         * @param protocolMode
         */
        AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId) {
            // Throw error if authority url is empty
            if (StringUtils.isEmpty(authorityUrl)) {
                throw ClientConfigurationError.createUrlEmptyError();
            }
            return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions, logger, performanceClient, correlationId);
        };
        return AuthorityFactory;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ServerTelemetryEntity = /** @class */ (function () {
        function ServerTelemetryEntity() {
            this.failedRequests = [];
            this.errors = [];
            this.cacheHits = 0;
        }
        /**
         * validates if a given cache entry is "Telemetry", parses <key,value>
         * @param key
         * @param entity
         */
        ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {
            var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;
            var validateEntity = true;
            if (entity) {
                validateEntity =
                    entity.hasOwnProperty("failedRequests") &&
                        entity.hasOwnProperty("errors") &&
                        entity.hasOwnProperty("cacheHits");
            }
            return validateKey && validateEntity;
        };
        return ServerTelemetryEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ThrottlingEntity = /** @class */ (function () {
        function ThrottlingEntity() {
        }
        /**
         * validates if a given cache entry is "Throttling", parses <key,value>
         * @param key
         * @param entity
         */
        ThrottlingEntity.isThrottlingEntity = function (key, entity) {
            var validateKey = false;
            if (key) {
                validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;
            }
            var validateEntity = true;
            if (entity) {
                validateEntity = entity.hasOwnProperty("throttleTime");
            }
            return validateKey && validateEntity;
        };
        return ThrottlingEntity;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var StubbedNetworkModule = {
        sendGetRequestAsync: function () {
            var notImplErr = "Network interface - sendGetRequestAsync() has not been implemented for the Network interface.";
            return Promise.reject(AuthError.createUnexpectedError(notImplErr));
        },
        sendPostRequestAsync: function () {
            var notImplErr = "Network interface - sendPostRequestAsync() has not been implemented for the Network interface.";
            return Promise.reject(AuthError.createUnexpectedError(notImplErr));
        }
    };

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * ClientAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var JoseHeaderErrorMessage = {
        missingKidError: {
            code: "missing_kid_error",
            desc: "The JOSE Header for the requested JWT, JWS or JWK object requires a keyId to be configured as the 'kid' header claim. No 'kid' value was provided."
        },
        missingAlgError: {
            code: "missing_alg_error",
            desc: "The JOSE Header for the requested JWT, JWS or JWK object requires an algorithm to be specified as the 'alg' header claim. No 'alg' value was provided."
        },
    };
    /**
     * Error thrown when there is an error in the client code running on the browser.
     */
    var JoseHeaderError = /** @class */ (function (_super) {
        __extends(JoseHeaderError, _super);
        function JoseHeaderError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "JoseHeaderError";
            Object.setPrototypeOf(_this, JoseHeaderError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when keyId isn't set on JOSE header.
         */
        JoseHeaderError.createMissingKidError = function () {
            return new JoseHeaderError(JoseHeaderErrorMessage.missingKidError.code, JoseHeaderErrorMessage.missingKidError.desc);
        };
        /**
         * Creates an error thrown when algorithm isn't set on JOSE header.
         */
        JoseHeaderError.createMissingAlgError = function () {
            return new JoseHeaderError(JoseHeaderErrorMessage.missingAlgError.code, JoseHeaderErrorMessage.missingAlgError.desc);
        };
        return JoseHeaderError;
    }(AuthError));

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var JoseHeader = /** @class */ (function () {
        function JoseHeader(options) {
            this.typ = options.typ;
            this.alg = options.alg;
            this.kid = options.kid;
        }
        /**
         * Builds SignedHttpRequest formatted JOSE Header from the
         * JOSE Header options provided or previously set on the object and returns
         * the stringified header object.
         * Throws if keyId or algorithm aren't provided since they are required for Access Token Binding.
         * @param shrHeaderOptions
         * @returns
         */
        JoseHeader.getShrHeaderString = function (shrHeaderOptions) {
            // KeyID is required on the SHR header
            if (!shrHeaderOptions.kid) {
                throw JoseHeaderError.createMissingKidError();
            }
            // Alg is required on the SHR header
            if (!shrHeaderOptions.alg) {
                throw JoseHeaderError.createMissingAlgError();
            }
            var shrHeader = new JoseHeader({
                // Access Token PoP headers must have type pop, but the type header can be overriden for special cases
                typ: shrHeaderOptions.typ || JsonTypes.Pop,
                kid: shrHeaderOptions.kid,
                alg: shrHeaderOptions.alg
            });
            return JSON.stringify(shrHeader);
        };
        return JoseHeader;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This is a helper class that parses supported HTTP response authentication headers to extract and return
     * header challenge values that can be used outside the basic authorization flows.
     */
    var AuthenticationHeaderParser = /** @class */ (function () {
        function AuthenticationHeaderParser(headers) {
            this.headers = headers;
        }
        /**
         * This method parses the SHR nonce value out of either the Authentication-Info or WWW-Authenticate authentication headers.
         * @returns
         */
        AuthenticationHeaderParser.prototype.getShrNonce = function () {
            // Attempt to parse nonce from Authentiacation-Info
            var authenticationInfo = this.headers[HeaderNames.AuthenticationInfo];
            if (authenticationInfo) {
                var authenticationInfoChallenges = this.parseChallenges(authenticationInfo);
                if (authenticationInfoChallenges.nextnonce) {
                    return authenticationInfoChallenges.nextnonce;
                }
                throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.AuthenticationInfo, "nextnonce challenge is missing.");
            }
            // Attempt to parse nonce from WWW-Authenticate
            var wwwAuthenticate = this.headers[HeaderNames.WWWAuthenticate];
            if (wwwAuthenticate) {
                var wwwAuthenticateChallenges = this.parseChallenges(wwwAuthenticate);
                if (wwwAuthenticateChallenges.nonce) {
                    return wwwAuthenticateChallenges.nonce;
                }
                throw ClientConfigurationError.createInvalidAuthenticationHeaderError(HeaderNames.WWWAuthenticate, "nonce challenge is missing.");
            }
            // If neither header is present, throw missing headers error
            throw ClientConfigurationError.createMissingNonceAuthenticationHeadersError();
        };
        /**
         * Parses an HTTP header's challenge set into a key/value map.
         * @param header
         * @returns
         */
        AuthenticationHeaderParser.prototype.parseChallenges = function (header) {
            var schemeSeparator = header.indexOf(" ");
            var challenges = header.substr(schemeSeparator + 1).split(",");
            var challengeMap = {};
            challenges.forEach(function (challenge) {
                var _a = challenge.split("="), key = _a[0], value = _a[1];
                // Remove escaped quotation marks (', ") from challenge string to keep only the challenge value
                challengeMap[key] = unescape(value.replace(/['"]+/g, Constants.EMPTY_STRING));
            });
            return challengeMap;
        };
        return AuthenticationHeaderParser;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ServerTelemetryManager = /** @class */ (function () {
        function ServerTelemetryManager(telemetryRequest, cacheManager) {
            this.cacheOutcome = CacheOutcome.NO_CACHE_HIT;
            this.cacheManager = cacheManager;
            this.apiId = telemetryRequest.apiId;
            this.correlationId = telemetryRequest.correlationId;
            this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;
            this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;
            this.telemetryCacheKey = SERVER_TELEM_CONSTANTS.CACHE_KEY + Separators.CACHE_KEY_SEPARATOR + telemetryRequest.clientId;
        }
        /**
         * API to add MSER Telemetry to request
         */
        ServerTelemetryManager.prototype.generateCurrentRequestHeaderValue = function () {
            var request = "" + this.apiId + SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR + this.cacheOutcome;
            var platformFields = [this.wrapperSKU, this.wrapperVer].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            var regionDiscoveryFields = this.getRegionDiscoveryFields();
            var requestWithRegionDiscoveryFields = [request, regionDiscoveryFields].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, requestWithRegionDiscoveryFields, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
        };
        /**
         * API to add MSER Telemetry for the last failed request
         */
        ServerTelemetryManager.prototype.generateLastRequestHeaderValue = function () {
            var lastRequests = this.getLastRequests();
            var maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);
            var failedRequests = lastRequests.failedRequests.slice(0, 2 * maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            var errors = lastRequests.errors.slice(0, maxErrors).join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            var errorCount = lastRequests.errors.length;
            // Indicate whether this header contains all data or partial data
            var overflow = maxErrors < errorCount ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;
            var platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);
            return [SERVER_TELEM_CONSTANTS.SCHEMA_VERSION, lastRequests.cacheHits, failedRequests, errors, platformFields].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);
        };
        /**
         * API to cache token failures for MSER data capture
         * @param error
         */
        ServerTelemetryManager.prototype.cacheFailedRequest = function (error) {
            var lastRequests = this.getLastRequests();
            if (lastRequests.errors.length >= SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {
                // Remove a cached error to make room, first in first out
                lastRequests.failedRequests.shift(); // apiId
                lastRequests.failedRequests.shift(); // correlationId
                lastRequests.errors.shift();
            }
            lastRequests.failedRequests.push(this.apiId, this.correlationId);
            if (!StringUtils.isEmpty(error.subError)) {
                lastRequests.errors.push(error.subError);
            }
            else if (!StringUtils.isEmpty(error.errorCode)) {
                lastRequests.errors.push(error.errorCode);
            }
            else if (!!error && error.toString()) {
                lastRequests.errors.push(error.toString());
            }
            else {
                lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);
            }
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
            return;
        };
        /**
         * Update server telemetry cache entry by incrementing cache hit counter
         */
        ServerTelemetryManager.prototype.incrementCacheHits = function () {
            var lastRequests = this.getLastRequests();
            lastRequests.cacheHits += 1;
            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests);
            return lastRequests.cacheHits;
        };
        /**
         * Get the server telemetry entity from cache or initialize a new one
         */
        ServerTelemetryManager.prototype.getLastRequests = function () {
            var initialValue = new ServerTelemetryEntity();
            var lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);
            return lastRequests || initialValue;
        };
        /**
         * Remove server telemetry cache entry
         */
        ServerTelemetryManager.prototype.clearTelemetryCache = function () {
            var lastRequests = this.getLastRequests();
            var numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);
            var errorCount = lastRequests.errors.length;
            if (numErrorsFlushed === errorCount) {
                // All errors were sent on last request, clear Telemetry cache
                this.cacheManager.removeItem(this.telemetryCacheKey);
            }
            else {
                // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed
                var serverTelemEntity = new ServerTelemetryEntity();
                serverTelemEntity.failedRequests = lastRequests.failedRequests.slice(numErrorsFlushed * 2); // failedRequests contains 2 items for each error
                serverTelemEntity.errors = lastRequests.errors.slice(numErrorsFlushed);
                this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity);
            }
        };
        /**
         * Returns the maximum number of errors that can be flushed to the server in the next network request
         * @param serverTelemetryEntity
         */
        ServerTelemetryManager.maxErrorsToSend = function (serverTelemetryEntity) {
            var i;
            var maxErrors = 0;
            var dataSize = 0;
            var errorCount = serverTelemetryEntity.errors.length;
            for (i = 0; i < errorCount; i++) {
                // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs
                var apiId = serverTelemetryEntity.failedRequests[2 * i] || Constants.EMPTY_STRING;
                var correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] || Constants.EMPTY_STRING;
                var errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;
                // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators
                dataSize += apiId.toString().length + correlationId.toString().length + errorCode.length + 3;
                if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {
                    // Adding this entry to the header would still keep header size below the limit
                    maxErrors += 1;
                }
                else {
                    break;
                }
            }
            return maxErrors;
        };
        /**
         * Get the region discovery fields
         *
         * @returns string
         */
        ServerTelemetryManager.prototype.getRegionDiscoveryFields = function () {
            var regionDiscoveryFields = [];
            regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);
            regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);
            regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);
            return regionDiscoveryFields.join(",");
        };
        /**
         * Update the region discovery metadata
         *
         * @param regionDiscoveryMetadata
         * @returns void
         */
        ServerTelemetryManager.prototype.updateRegionDiscoveryMetadata = function (regionDiscoveryMetadata) {
            this.regionUsed = regionDiscoveryMetadata.region_used;
            this.regionSource = regionDiscoveryMetadata.region_source;
            this.regionOutcome = regionDiscoveryMetadata.region_outcome;
        };
        /**
         * Set cache outcome
         */
        ServerTelemetryManager.prototype.setCacheOutcome = function (cacheOutcome) {
            this.cacheOutcome = cacheOutcome;
        };
        return ServerTelemetryManager;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var PerformanceClient = /** @class */ (function () {
        /**
         * Creates an instance of PerformanceClient,
         * an abstract class containing core performance telemetry logic.
         *
         * @constructor
         * @param {string} clientId Client ID of the application
         * @param {string} authority Authority used by the application
         * @param {Logger} logger Logger used by the application
         * @param {string} libraryName Name of the library
         * @param {string} libraryVersion Version of the library
         */
        function PerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) {
            this.authority = authority;
            this.libraryName = libraryName;
            this.libraryVersion = libraryVersion;
            this.applicationTelemetry = applicationTelemetry;
            this.clientId = clientId;
            this.logger = logger;
            this.callbacks = new Map();
            this.eventsByCorrelationId = new Map();
            this.queueMeasurements = new Map();
            this.preQueueTimeByCorrelationId = new Map();
        }
        /**
         * Starts and returns an platform-specific implementation of IPerformanceMeasurement.
         * Note: this function can be changed to abstract at the next major version bump.
         *
         * @param {string} measureName
         * @param {string} correlationId
         * @returns {IPerformanceMeasurement}
         */
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        PerformanceClient.prototype.startPerformanceMeasurement = function (measureName, correlationId) {
            return {};
        };
        /**
         * Starts and returns an platform-specific implementation of IPerformanceMeasurement.
         * Note: this incorrectly-named function will be removed at the next major version bump.
         *
         * @param {string} measureName
         * @param {string} correlationId
         * @returns {IPerformanceMeasurement}
         */
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        PerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {
            return {};
        };
        /**
         * Get integral fields.
         * Override to change the set.
         */
        PerformanceClient.prototype.getIntFields = function () {
            return IntFields;
        };
        /**
         * Gets map of pre-queue times by correlation Id
         *
         * @param {PerformanceEvents} eventName
         * @param {string} correlationId
         * @returns {number}
         */
        PerformanceClient.prototype.getPreQueueTime = function (eventName, correlationId) {
            var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);
            if (!preQueueEvent) {
                this.logger.trace("PerformanceClient.getPreQueueTime: no pre-queue times found for correlationId: " + correlationId + ", unable to add queue measurement");
                return;
            }
            else if (preQueueEvent.name !== eventName) {
                this.logger.trace("PerformanceClient.getPreQueueTime: no pre-queue time found for " + eventName + ", unable to add queue measurement");
                return;
            }
            return preQueueEvent.time;
        };
        /**
         * Calculates the difference between current time and time when function was queued.
         * Note: It is possible to have 0 as the queue time if the current time and the queued time was the same.
         *
         * @param {number} preQueueTime
         * @param {number} currentTime
         * @returns {number}
         */
        PerformanceClient.prototype.calculateQueuedTime = function (preQueueTime, currentTime) {
            if (preQueueTime < 1) {
                this.logger.trace("PerformanceClient: preQueueTime should be a positive integer and not " + preQueueTime);
                return 0;
            }
            if (currentTime < 1) {
                this.logger.trace("PerformanceClient: currentTime should be a positive integer and not " + currentTime);
                return 0;
            }
            if (currentTime < preQueueTime) {
                this.logger.trace("PerformanceClient: currentTime is less than preQueueTime, check how time is being retrieved");
                return 0;
            }
            return currentTime - preQueueTime;
        };
        /**
         * Adds queue measurement time to QueueMeasurements array for given correlation ID.
         *
         * @param {PerformanceEvents} eventName
         * @param {?string} correlationId
         * @param {?number} queueTime
         * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements
         * @returns
         */
        PerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {
            if (!correlationId) {
                this.logger.trace("PerformanceClient.addQueueMeasurement: correlationId not provided for " + eventName + ", cannot add queue measurement");
                return;
            }
            if (queueTime === 0) {
                // Possible for there to be no queue time after calculation
                this.logger.trace("PerformanceClient.addQueueMeasurement: queue time provided for " + eventName + " is " + queueTime);
            }
            else if (!queueTime) {
                this.logger.trace("PerformanceClient.addQueueMeasurement: no queue time provided for " + eventName);
                return;
            }
            var queueMeasurement = { eventName: eventName, queueTime: queueTime, manuallyCompleted: manuallyCompleted };
            // Adds to existing correlation Id if present in queueMeasurements
            var existingMeasurements = this.queueMeasurements.get(correlationId);
            if (existingMeasurements) {
                existingMeasurements.push(queueMeasurement);
                this.queueMeasurements.set(correlationId, existingMeasurements);
            }
            else {
                // Sets new correlation Id if not present in queueMeasurements
                this.logger.trace("PerformanceClient.addQueueMeasurement: adding correlationId " + correlationId + " to queue measurements");
                var measurementArray = [queueMeasurement];
                this.queueMeasurements.set(correlationId, measurementArray);
            }
            // Delete processed pre-queue event.
            this.preQueueTimeByCorrelationId.delete(correlationId);
        };
        /**
         * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.
         *
         * @param {PerformanceEvents} measureName
         * @param {?string} [correlationId]
         * @returns {InProgressPerformanceEvent}
         */
        PerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {
            var _this = this;
            var _a, _b;
            // Generate a placeholder correlation if the request does not provide one
            var eventCorrelationId = correlationId || this.generateId();
            if (!correlationId) {
                this.logger.info("PerformanceClient: No correlation id provided for " + measureName + ", generating", eventCorrelationId);
            }
            // Duplicate code to address spelling error will be removed at the next major version bump.
            this.logger.trace("PerformanceClient: Performance measurement started for " + measureName, eventCorrelationId);
            var performanceMeasurement = this.startPerformanceMeasuremeant(measureName, eventCorrelationId);
            performanceMeasurement.startMeasurement();
            var inProgressEvent = {
                eventId: this.generateId(),
                status: PerformanceEventStatus.InProgress,
                authority: this.authority,
                libraryName: this.libraryName,
                libraryVersion: this.libraryVersion,
                clientId: this.clientId,
                name: measureName,
                startTimeMs: Date.now(),
                correlationId: eventCorrelationId,
                appName: (_a = this.applicationTelemetry) === null || _a === void 0 ? void 0 : _a.appName,
                appVersion: (_b = this.applicationTelemetry) === null || _b === void 0 ? void 0 : _b.appVersion,
            };
            // Store in progress events so they can be discarded if not ended properly
            this.cacheEventByCorrelationId(inProgressEvent);
            // Return the event and functions the caller can use to properly end/flush the measurement
            return {
                endMeasurement: function (event) {
                    return _this.endMeasurement(__assign(__assign({}, inProgressEvent), event), performanceMeasurement);
                },
                discardMeasurement: function () {
                    return _this.discardMeasurements(inProgressEvent.correlationId);
                },
                addStaticFields: function (fields) {
                    return _this.addStaticFields(fields, inProgressEvent.correlationId);
                },
                increment: function (counters) {
                    return _this.increment(counters, inProgressEvent.correlationId);
                },
                measurement: performanceMeasurement,
                event: inProgressEvent
            };
        };
        /**
         * Stops measuring the performance for an operation. Should only be called directly by PerformanceClient classes,
         * as consumers should instead use the function returned by startMeasurement.
         * Adds a new field named as "[event name]DurationMs" for sub-measurements, completes and emits an event
         * otherwise.
         *
         * @param {PerformanceEvent} event
         * @param {IPerformanceMeasurement} measurement
         * @returns {(PerformanceEvent | null)}
         */
        PerformanceClient.prototype.endMeasurement = function (event, measurement) {
            var _this = this;
            var _a, _b;
            var rootEvent = this.eventsByCorrelationId.get(event.correlationId);
            if (!rootEvent) {
                this.logger.trace("PerformanceClient: Measurement not found for " + event.eventId, event.correlationId);
                return null;
            }
            var isRoot = event.eventId === rootEvent.eventId;
            var queueInfo = {
                totalQueueTime: 0,
                totalQueueCount: 0,
                manuallyCompletedCount: 0
            };
            if (isRoot) {
                queueInfo = this.getQueueInfo(event.correlationId);
                this.discardCache(rootEvent.correlationId);
            }
            else {
                (_a = rootEvent.incompleteSubMeasurements) === null || _a === void 0 ? void 0 : _a.delete(event.eventId);
            }
            measurement === null || measurement === void 0 ? void 0 : measurement.endMeasurement();
            var durationMs = measurement === null || measurement === void 0 ? void 0 : measurement.flushMeasurement();
            // null indicates no measurement was taken (e.g. needed performance APIs not present)
            if (!durationMs) {
                this.logger.trace("PerformanceClient: Performance measurement not taken", rootEvent.correlationId);
                return null;
            }
            this.logger.trace("PerformanceClient: Performance measurement ended for " + event.name + ": " + durationMs + " ms", event.correlationId);
            // Add sub-measurement attribute to root event.
            if (!isRoot) {
                rootEvent[event.name + "DurationMs"] = Math.floor(durationMs);
                return __assign({}, rootEvent);
            }
            var finalEvent = __assign(__assign({}, rootEvent), event);
            var incompleteSubsCount = 0;
            // Incomplete sub-measurements are discarded. They are likely an instrumentation bug that should be fixed.
            (_b = finalEvent.incompleteSubMeasurements) === null || _b === void 0 ? void 0 : _b.forEach(function (subMeasurement) {
                _this.logger.trace("PerformanceClient: Incomplete submeasurement " + subMeasurement.name + " found for " + event.name, finalEvent.correlationId);
                incompleteSubsCount++;
            });
            finalEvent.incompleteSubMeasurements = undefined;
            finalEvent = __assign(__assign({}, finalEvent), { durationMs: Math.round(durationMs), queuedTimeMs: queueInfo.totalQueueTime, queuedCount: queueInfo.totalQueueCount, queuedManuallyCompletedCount: queueInfo.manuallyCompletedCount, status: PerformanceEventStatus.Completed, incompleteSubsCount: incompleteSubsCount });
            this.truncateIntegralFields(finalEvent, this.getIntFields());
            this.emitEvents([finalEvent], event.correlationId);
            return finalEvent;
        };
        /**
         * Saves extra information to be emitted when the measurements are flushed
         * @param fields
         * @param correlationId
         */
        PerformanceClient.prototype.addStaticFields = function (fields, correlationId) {
            this.logger.trace("PerformanceClient: Updating static fields");
            var event = this.eventsByCorrelationId.get(correlationId);
            if (event) {
                this.eventsByCorrelationId.set(correlationId, __assign(__assign({}, event), fields));
            }
            else {
                this.logger.trace("PerformanceClient: Event not found for", correlationId);
            }
        };
        /**
         * Increment counters to be emitted when the measurements are flushed
         * @param counters {Counters}
         * @param correlationId {string} correlation identifier
         */
        PerformanceClient.prototype.increment = function (counters, correlationId) {
            this.logger.trace("PerformanceClient: Updating counters");
            var event = this.eventsByCorrelationId.get(correlationId);
            if (event) {
                for (var counter in counters) {
                    if (!event.hasOwnProperty(counter)) {
                        event[counter] = 0;
                    }
                    event[counter] += counters[counter];
                }
            }
            else {
                this.logger.trace("PerformanceClient: Event not found for", correlationId);
            }
        };
        /**
         * Upserts event into event cache.
         * First key is the correlation id, second key is the event id.
         * Allows for events to be grouped by correlation id,
         * and to easily allow for properties on them to be updated.
         *
         * @private
         * @param {PerformanceEvent} event
         */
        PerformanceClient.prototype.cacheEventByCorrelationId = function (event) {
            var rootEvent = this.eventsByCorrelationId.get(event.correlationId);
            if (rootEvent) {
                this.logger.trace("PerformanceClient: Performance measurement for " + event.name + " added/updated", event.correlationId);
                rootEvent.incompleteSubMeasurements = rootEvent.incompleteSubMeasurements || new Map();
                rootEvent.incompleteSubMeasurements.set(event.eventId, { name: event.name, startTimeMs: event.startTimeMs });
            }
            else {
                this.logger.trace("PerformanceClient: Performance measurement for " + event.name + " started", event.correlationId);
                this.eventsByCorrelationId.set(event.correlationId, __assign({}, event));
            }
        };
        PerformanceClient.prototype.getQueueInfo = function (correlationId) {
            var queueMeasurementForCorrelationId = this.queueMeasurements.get(correlationId);
            if (!queueMeasurementForCorrelationId) {
                this.logger.trace("PerformanceClient: no queue measurements found for for correlationId: " + correlationId);
            }
            var totalQueueTime = 0;
            var totalQueueCount = 0;
            var manuallyCompletedCount = 0;
            queueMeasurementForCorrelationId === null || queueMeasurementForCorrelationId === void 0 ? void 0 : queueMeasurementForCorrelationId.forEach(function (measurement) {
                totalQueueTime += measurement.queueTime;
                totalQueueCount++;
                manuallyCompletedCount += measurement.manuallyCompleted ? 1 : 0;
            });
            return {
                totalQueueTime: totalQueueTime,
                totalQueueCount: totalQueueCount,
                manuallyCompletedCount: manuallyCompletedCount
            };
        };
        /**
         * Removes measurements for a given correlation id.
         *
         * @param {string} correlationId
         */
        PerformanceClient.prototype.discardMeasurements = function (correlationId) {
            this.logger.trace("PerformanceClient: Performance measurements discarded", correlationId);
            this.eventsByCorrelationId.delete(correlationId);
        };
        /**
         * Removes cache for a given correlation id.
         *
         * @param {string} correlationId correlation identifier
         */
        PerformanceClient.prototype.discardCache = function (correlationId) {
            this.discardMeasurements(correlationId);
            this.logger.trace("PerformanceClient: QueueMeasurements discarded", correlationId);
            this.queueMeasurements.delete(correlationId);
            this.logger.trace("PerformanceClient: Pre-queue times discarded", correlationId);
            this.preQueueTimeByCorrelationId.delete(correlationId);
        };
        /**
         * Registers a callback function to receive performance events.
         *
         * @param {PerformanceCallbackFunction} callback
         * @returns {string}
         */
        PerformanceClient.prototype.addPerformanceCallback = function (callback) {
            var callbackId = this.generateId();
            this.callbacks.set(callbackId, callback);
            this.logger.verbose("PerformanceClient: Performance callback registered with id: " + callbackId);
            return callbackId;
        };
        /**
         * Removes a callback registered with addPerformanceCallback.
         *
         * @param {string} callbackId
         * @returns {boolean}
         */
        PerformanceClient.prototype.removePerformanceCallback = function (callbackId) {
            var result = this.callbacks.delete(callbackId);
            if (result) {
                this.logger.verbose("PerformanceClient: Performance callback " + callbackId + " removed.");
            }
            else {
                this.logger.verbose("PerformanceClient: Performance callback " + callbackId + " not removed.");
            }
            return result;
        };
        /**
         * Emits events to all registered callbacks.
         *
         * @param {PerformanceEvent[]} events
         * @param {?string} [correlationId]
         */
        PerformanceClient.prototype.emitEvents = function (events, correlationId) {
            var _this = this;
            this.logger.verbose("PerformanceClient: Emitting performance events", correlationId);
            this.callbacks.forEach(function (callback, callbackId) {
                _this.logger.trace("PerformanceClient: Emitting event to callback " + callbackId, correlationId);
                callback.apply(null, [events]);
            });
        };
        /**
         * Enforce truncation of integral fields in performance event.
         * @param {PerformanceEvent} event performance event to update.
         * @param {Set<string>} intFields integral fields.
         */
        PerformanceClient.prototype.truncateIntegralFields = function (event, intFields) {
            intFields.forEach(function (key) {
                if (key in event && typeof event[key] === "number") {
                    event[key] = Math.floor(event[key]);
                }
            });
        };
        return PerformanceClient;
    }());

    /*! @azure/msal-common v13.0.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var StubPerformanceMeasurement = /** @class */ (function () {
        function StubPerformanceMeasurement() {
        }
        /* eslint-disable-next-line @typescript-eslint/no-empty-function */
        StubPerformanceMeasurement.prototype.startMeasurement = function () { };
        /* eslint-disable-next-line @typescript-eslint/no-empty-function */
        StubPerformanceMeasurement.prototype.endMeasurement = function () { };
        StubPerformanceMeasurement.prototype.flushMeasurement = function () {
            return null;
        };
        return StubPerformanceMeasurement;
    }());
    var StubPerformanceClient = /** @class */ (function (_super) {
        __extends(StubPerformanceClient, _super);
        function StubPerformanceClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        StubPerformanceClient.prototype.generateId = function () {
            return "callback-id";
        };
        StubPerformanceClient.prototype.startPerformanceMeasuremeant = function () {
            return new StubPerformanceMeasurement();
        };
        StubPerformanceClient.prototype.startPerformanceMeasurement = function () {
            return new StubPerformanceMeasurement();
        };
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        StubPerformanceClient.prototype.calculateQueuedTime = function (preQueueTime, currentTime) {
            return 0;
        };
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        StubPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime) {
            return;
        };
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        StubPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {
            return;
        };
        return StubPerformanceClient;
    }(PerformanceClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var BrowserAuthErrorMessage = {
        pkceNotGenerated: {
            code: "pkce_not_created",
            desc: "The PKCE code challenge and verifier could not be generated."
        },
        cryptoDoesNotExist: {
            code: "crypto_nonexistent",
            desc: "The crypto object or function is not available."
        },
        httpMethodNotImplementedError: {
            code: "http_method_not_implemented",
            desc: "The HTTP method given has not been implemented in this library."
        },
        emptyNavigateUriError: {
            code: "empty_navigate_uri",
            desc: "Navigation URI is empty. Please check stack trace for more info."
        },
        hashEmptyError: {
            code: "hash_empty_error",
            desc: "Hash value cannot be processed because it is empty. Please verify that your redirectUri is not clearing the hash. For more visit: aka.ms/msaljs/browser-errors."
        },
        hashDoesNotContainStateError: {
            code: "no_state_in_hash",
            desc: "Hash does not contain state. Please verify that the request originated from msal."
        },
        hashDoesNotContainKnownPropertiesError: {
            code: "hash_does_not_contain_known_properties",
            desc: "Hash does not contain known properites. Please verify that your redirectUri is not changing the hash. For more visit: aka.ms/msaljs/browser-errors."
        },
        unableToParseStateError: {
            code: "unable_to_parse_state",
            desc: "Unable to parse state. Please verify that the request originated from msal."
        },
        stateInteractionTypeMismatchError: {
            code: "state_interaction_type_mismatch",
            desc: "Hash contains state but the interaction type does not match the caller."
        },
        interactionInProgress: {
            code: "interaction_in_progress",
            desc: "Interaction is currently in progress. Please ensure that this interaction has been completed before calling an interactive API.  For more visit: aka.ms/msaljs/browser-errors."
        },
        popupWindowError: {
            code: "popup_window_error",
            desc: "Error opening popup window. This can happen if you are using IE or if popups are blocked in the browser."
        },
        emptyWindowError: {
            code: "empty_window_error",
            desc: "window.open returned null or undefined window object."
        },
        userCancelledError: {
            code: "user_cancelled",
            desc: "User cancelled the flow."
        },
        monitorPopupTimeoutError: {
            code: "monitor_window_timeout",
            desc: "Token acquisition in popup failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
        },
        monitorIframeTimeoutError: {
            code: "monitor_window_timeout",
            desc: "Token acquisition in iframe failed due to timeout. For more visit: aka.ms/msaljs/browser-errors."
        },
        redirectInIframeError: {
            code: "redirect_in_iframe",
            desc: "Redirects are not supported for iframed or brokered applications. Please ensure you are using MSAL.js in a top frame of the window if using the redirect APIs, or use the popup APIs."
        },
        blockTokenRequestsInHiddenIframeError: {
            code: "block_iframe_reload",
            desc: "Request was blocked inside an iframe because MSAL detected an authentication response. For more visit: aka.ms/msaljs/browser-errors"
        },
        blockAcquireTokenInPopupsError: {
            code: "block_nested_popups",
            desc: "Request was blocked inside a popup because MSAL detected it was running in a popup."
        },
        iframeClosedPrematurelyError: {
            code: "iframe_closed_prematurely",
            desc: "The iframe being monitored was closed prematurely."
        },
        silentLogoutUnsupportedError: {
            code: "silent_logout_unsupported",
            desc: "Silent logout not supported. Please call logoutRedirect or logoutPopup instead."
        },
        noAccountError: {
            code: "no_account_error",
            desc: "No account object provided to acquireTokenSilent and no active account has been set. Please call setActiveAccount or provide an account on the request."
        },
        silentPromptValueError: {
            code: "silent_prompt_value_error",
            desc: "The value given for the prompt value is not valid for silent requests - must be set to 'none' or 'no_session'."
        },
        noTokenRequestCacheError: {
            code: "no_token_request_cache_error",
            desc: "No token request found in cache."
        },
        unableToParseTokenRequestCacheError: {
            code: "unable_to_parse_token_request_cache_error",
            desc: "The cached token request could not be parsed."
        },
        noCachedAuthorityError: {
            code: "no_cached_authority_error",
            desc: "No cached authority found."
        },
        authRequestNotSet: {
            code: "auth_request_not_set_error",
            desc: "Auth Request not set. Please ensure initiateAuthRequest was called from the InteractionHandler"
        },
        invalidCacheType: {
            code: "invalid_cache_type",
            desc: "Invalid cache type"
        },
        notInBrowserEnvironment: {
            code: "non_browser_environment",
            desc: "Login and token requests are not supported in non-browser environments."
        },
        databaseNotOpen: {
            code: "database_not_open",
            desc: "Database is not open!"
        },
        noNetworkConnectivity: {
            code: "no_network_connectivity",
            desc: "No network connectivity. Check your internet connection."
        },
        postRequestFailed: {
            code: "post_request_failed",
            desc: "Network request failed: If the browser threw a CORS error, check that the redirectUri is registered in the Azure App Portal as type 'SPA'"
        },
        getRequestFailed: {
            code: "get_request_failed",
            desc: "Network request failed. Please check the network trace to determine root cause."
        },
        failedToParseNetworkResponse: {
            code: "failed_to_parse_response",
            desc: "Failed to parse network response. Check network trace."
        },
        unableToLoadTokenError: {
            code: "unable_to_load_token",
            desc: "Error loading token to cache."
        },
        signingKeyNotFoundInStorage: {
            code: "crypto_key_not_found",
            desc: "Cryptographic Key or Keypair not found in browser storage."
        },
        authCodeRequired: {
            code: "auth_code_required",
            desc: "An authorization code must be provided (as the `code` property on the request) to this flow."
        },
        authCodeOrNativeAccountRequired: {
            code: "auth_code_or_nativeAccountId_required",
            desc: "An authorization code or nativeAccountId must be provided to this flow."
        },
        spaCodeAndNativeAccountPresent: {
            code: "spa_code_and_nativeAccountId_present",
            desc: "Request cannot contain both spa code and native account id."
        },
        databaseUnavailable: {
            code: "database_unavailable",
            desc: "IndexedDB, which is required for persistent cryptographic key storage, is unavailable. This may be caused by browser privacy features which block persistent storage in third-party contexts."
        },
        unableToAcquireTokenFromNativePlatform: {
            code: "unable_to_acquire_token_from_native_platform",
            desc: "Unable to acquire token from native platform. For a list of possible reasons visit aka.ms/msaljs/browser-errors."
        },
        nativeHandshakeTimeout: {
            code: "native_handshake_timeout",
            desc: "Timed out while attempting to establish connection to browser extension"
        },
        nativeExtensionNotInstalled: {
            code: "native_extension_not_installed",
            desc: "Native extension is not installed. If you think this is a mistake call the initialize function."
        },
        nativeConnectionNotEstablished: {
            code: "native_connection_not_established",
            desc: "Connection to native platform has not been established. Please install a compatible browser extension and run initialize(). For more please visit aka.ms/msaljs/browser-errors."
        },
        nativeBrokerCalledBeforeInitialize: {
            code: "native_broker_called_before_initialize",
            desc: "You must call and await the initialize function before attempting to call any other MSAL API when native brokering is enabled. For more please visit aka.ms/msaljs/browser-errors."
        },
        nativePromptNotSupported: {
            code: "native_prompt_not_supported",
            desc: "The provided prompt is not supported by the native platform. This request should be routed to the web based flow."
        }
    };
    /**
     * Browser library error class thrown by the MSAL.js library for SPAs
     */
    var BrowserAuthError = /** @class */ (function (_super) {
        __extends$1(BrowserAuthError, _super);
        function BrowserAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            Object.setPrototypeOf(_this, BrowserAuthError.prototype);
            _this.name = "BrowserAuthError";
            return _this;
        }
        /**
         * Creates an error thrown when PKCE is not implemented.
         * @param errDetail
         */
        BrowserAuthError.createPkceNotGeneratedError = function (errDetail) {
            return new BrowserAuthError(BrowserAuthErrorMessage.pkceNotGenerated.code, BrowserAuthErrorMessage.pkceNotGenerated.desc + " Detail:" + errDetail);
        };
        /**
         * Creates an error thrown when the crypto object is unavailable.
         * @param errDetail
         */
        BrowserAuthError.createCryptoNotAvailableError = function (errDetail) {
            return new BrowserAuthError(BrowserAuthErrorMessage.cryptoDoesNotExist.code, BrowserAuthErrorMessage.cryptoDoesNotExist.desc + " Detail:" + errDetail);
        };
        /**
         * Creates an error thrown when an HTTP method hasn't been implemented by the browser class.
         * @param method
         */
        BrowserAuthError.createHttpMethodNotImplementedError = function (method) {
            return new BrowserAuthError(BrowserAuthErrorMessage.httpMethodNotImplementedError.code, BrowserAuthErrorMessage.httpMethodNotImplementedError.desc + " Given Method: " + method);
        };
        /**
         * Creates an error thrown when the navigation URI is empty.
         */
        BrowserAuthError.createEmptyNavigationUriError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.emptyNavigateUriError.code, BrowserAuthErrorMessage.emptyNavigateUriError.desc);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         * @param hashValue
         */
        BrowserAuthError.createEmptyHashError = function (hashValue) {
            return new BrowserAuthError(BrowserAuthErrorMessage.hashEmptyError.code, BrowserAuthErrorMessage.hashEmptyError.desc + " Given Url: " + hashValue);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         */
        BrowserAuthError.createHashDoesNotContainStateError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainStateError.code, BrowserAuthErrorMessage.hashDoesNotContainStateError.desc);
        };
        /**
         * Creates an error thrown when the hash string value does not contain known properties
         */
        BrowserAuthError.createHashDoesNotContainKnownPropertiesError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.code, BrowserAuthErrorMessage.hashDoesNotContainKnownPropertiesError.desc);
        };
        /**
         * Creates an error thrown when the hash string value is unexpectedly empty.
         */
        BrowserAuthError.createUnableToParseStateError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseStateError.code, BrowserAuthErrorMessage.unableToParseStateError.desc);
        };
        /**
         * Creates an error thrown when the state value in the hash does not match the interaction type of the API attempting to consume it.
         */
        BrowserAuthError.createStateInteractionTypeMismatchError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.stateInteractionTypeMismatchError.code, BrowserAuthErrorMessage.stateInteractionTypeMismatchError.desc);
        };
        /**
         * Creates an error thrown when a browser interaction (redirect or popup) is in progress.
         */
        BrowserAuthError.createInteractionInProgressError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.interactionInProgress.code, BrowserAuthErrorMessage.interactionInProgress.desc);
        };
        /**
         * Creates an error thrown when the popup window could not be opened.
         * @param errDetail
         */
        BrowserAuthError.createPopupWindowError = function (errDetail) {
            var errorMessage = BrowserAuthErrorMessage.popupWindowError.desc;
            errorMessage = !StringUtils.isEmpty(errDetail) ? errorMessage + " Details: " + errDetail : errorMessage;
            return new BrowserAuthError(BrowserAuthErrorMessage.popupWindowError.code, errorMessage);
        };
        /**
         * Creates an error thrown when window.open returns an empty window object.
         * @param errDetail
         */
        BrowserAuthError.createEmptyWindowCreatedError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.emptyWindowError.code, BrowserAuthErrorMessage.emptyWindowError.desc);
        };
        /**
         * Creates an error thrown when the user closes a popup.
         */
        BrowserAuthError.createUserCancelledError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.userCancelledError.code, BrowserAuthErrorMessage.userCancelledError.desc);
        };
        /**
         * Creates an error thrown when monitorPopupFromHash times out for a given popup.
         */
        BrowserAuthError.createMonitorPopupTimeoutError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.monitorPopupTimeoutError.code, BrowserAuthErrorMessage.monitorPopupTimeoutError.desc);
        };
        /**
         * Creates an error thrown when monitorIframeFromHash times out for a given iframe.
         */
        BrowserAuthError.createMonitorIframeTimeoutError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.monitorIframeTimeoutError.code, BrowserAuthErrorMessage.monitorIframeTimeoutError.desc);
        };
        /**
         * Creates an error thrown when navigateWindow is called inside an iframe or brokered applications.
         * @param windowParentCheck
         */
        BrowserAuthError.createRedirectInIframeError = function (windowParentCheck) {
            return new BrowserAuthError(BrowserAuthErrorMessage.redirectInIframeError.code, BrowserAuthErrorMessage.redirectInIframeError.desc + " (window.parent !== window) => " + windowParentCheck);
        };
        /**
         * Creates an error thrown when an auth reload is done inside an iframe.
         */
        BrowserAuthError.createBlockReloadInHiddenIframeError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.code, BrowserAuthErrorMessage.blockTokenRequestsInHiddenIframeError.desc);
        };
        /**
         * Creates an error thrown when a popup attempts to call an acquireToken API
         * @returns
         */
        BrowserAuthError.createBlockAcquireTokenInPopupsError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.code, BrowserAuthErrorMessage.blockAcquireTokenInPopupsError.desc);
        };
        /**
         * Creates an error thrown when an iframe is found to be closed before the timeout is reached.
         */
        BrowserAuthError.createIframeClosedPrematurelyError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.iframeClosedPrematurelyError.code, BrowserAuthErrorMessage.iframeClosedPrematurelyError.desc);
        };
        /**
         * Creates an error thrown when the logout API is called on any of the silent interaction clients
         */
        BrowserAuthError.createSilentLogoutUnsupportedError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.silentLogoutUnsupportedError.code, BrowserAuthErrorMessage.silentLogoutUnsupportedError.desc);
        };
        /**
         * Creates an error thrown when the account object is not provided in the acquireTokenSilent API.
         */
        BrowserAuthError.createNoAccountError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noAccountError.code, BrowserAuthErrorMessage.noAccountError.desc);
        };
        /**
         * Creates an error thrown when a given prompt value is invalid for silent requests.
         */
        BrowserAuthError.createSilentPromptValueError = function (givenPrompt) {
            return new BrowserAuthError(BrowserAuthErrorMessage.silentPromptValueError.code, BrowserAuthErrorMessage.silentPromptValueError.desc + " Given value: " + givenPrompt);
        };
        /**
         * Creates an error thrown when the cached token request could not be retrieved from the cache
         */
        BrowserAuthError.createUnableToParseTokenRequestCacheError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.code, BrowserAuthErrorMessage.unableToParseTokenRequestCacheError.desc);
        };
        /**
         * Creates an error thrown when the token request could not be retrieved from the cache
         */
        BrowserAuthError.createNoTokenRequestCacheError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noTokenRequestCacheError.code, BrowserAuthErrorMessage.noTokenRequestCacheError.desc);
        };
        /**
         * Creates an error thrown when handleCodeResponse is called before initiateAuthRequest (InteractionHandler)
         */
        BrowserAuthError.createAuthRequestNotSetError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.authRequestNotSet.code, BrowserAuthErrorMessage.authRequestNotSet.desc);
        };
        /**
         * Creates an error thrown when the authority could not be retrieved from the cache
         */
        BrowserAuthError.createNoCachedAuthorityError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noCachedAuthorityError.code, BrowserAuthErrorMessage.noCachedAuthorityError.desc);
        };
        /**
         * Creates an error thrown if cache type is invalid.
         */
        BrowserAuthError.createInvalidCacheTypeError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.invalidCacheType.code, "" + BrowserAuthErrorMessage.invalidCacheType.desc);
        };
        /**
         * Create an error thrown when login and token requests are made from a non-browser environment
         */
        BrowserAuthError.createNonBrowserEnvironmentError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.notInBrowserEnvironment.code, BrowserAuthErrorMessage.notInBrowserEnvironment.desc);
        };
        /**
         * Create an error thrown when indexDB database is not open
         */
        BrowserAuthError.createDatabaseNotOpenError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.databaseNotOpen.code, BrowserAuthErrorMessage.databaseNotOpen.desc);
        };
        /**
         * Create an error thrown when token fetch fails due to no internet
         */
        BrowserAuthError.createNoNetworkConnectivityError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.noNetworkConnectivity.code, BrowserAuthErrorMessage.noNetworkConnectivity.desc);
        };
        /**
         * Create an error thrown when token fetch fails due to reasons other than internet connectivity
         */
        BrowserAuthError.createPostRequestFailedError = function (errorDesc, endpoint) {
            return new BrowserAuthError(BrowserAuthErrorMessage.postRequestFailed.code, BrowserAuthErrorMessage.postRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
        };
        /**
         * Create an error thrown when get request fails due to reasons other than internet connectivity
         */
        BrowserAuthError.createGetRequestFailedError = function (errorDesc, endpoint) {
            return new BrowserAuthError(BrowserAuthErrorMessage.getRequestFailed.code, BrowserAuthErrorMessage.getRequestFailed.desc + " | Network client threw: " + errorDesc + " | Attempted to reach: " + endpoint.split("?")[0]);
        };
        /**
         * Create an error thrown when network client fails to parse network response
         */
        BrowserAuthError.createFailedToParseNetworkResponseError = function (endpoint) {
            return new BrowserAuthError(BrowserAuthErrorMessage.failedToParseNetworkResponse.code, BrowserAuthErrorMessage.failedToParseNetworkResponse.desc + " | Attempted to reach: " + endpoint.split("?")[0]);
        };
        /**
         * Create an error thrown when the necessary information is not available to sideload tokens
         */
        BrowserAuthError.createUnableToLoadTokenError = function (errorDetail) {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToLoadTokenError.code, BrowserAuthErrorMessage.unableToLoadTokenError.desc + " | " + errorDetail);
        };
        /**
         * Create an error thrown when the queried cryptographic key is not found in IndexedDB
         */
        BrowserAuthError.createSigningKeyNotFoundInStorageError = function (keyId) {
            return new BrowserAuthError(BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code, BrowserAuthErrorMessage.signingKeyNotFoundInStorage.desc + " | No match found for KeyId: " + keyId);
        };
        /**
         * Create an error when an authorization code is required but not provided
         */
        BrowserAuthError.createAuthCodeRequiredError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.authCodeRequired.code, BrowserAuthErrorMessage.authCodeRequired.desc);
        };
        /**
         * Create an error when an authorization code or native account ID is required but not provided
         */
        BrowserAuthError.createAuthCodeOrNativeAccountIdRequiredError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.authCodeOrNativeAccountRequired.code, BrowserAuthErrorMessage.authCodeOrNativeAccountRequired.desc);
        };
        /**
         * Create an error when both authorization code and native account ID are provided
         */
        BrowserAuthError.createSpaCodeAndNativeAccountIdPresentError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.spaCodeAndNativeAccountPresent.code, BrowserAuthErrorMessage.spaCodeAndNativeAccountPresent.desc);
        };
        /**
         * Create an error when IndexedDB is unavailable
         */
        BrowserAuthError.createDatabaseUnavailableError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.databaseUnavailable.code, BrowserAuthErrorMessage.databaseUnavailable.desc);
        };
        /**
         * Create an error when native token acquisition is not possible
         */
        BrowserAuthError.createUnableToAcquireTokenFromNativePlatformError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.unableToAcquireTokenFromNativePlatform.code, BrowserAuthErrorMessage.unableToAcquireTokenFromNativePlatform.desc);
        };
        /**
         * Create an error thrown when Handshake with browser extension times out
         */
        BrowserAuthError.createNativeHandshakeTimeoutError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.nativeHandshakeTimeout.code, BrowserAuthErrorMessage.nativeHandshakeTimeout.desc);
        };
        /**
         * Create an error thrown when browser extension is not installed
         */
        BrowserAuthError.createNativeExtensionNotInstalledError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.nativeExtensionNotInstalled.code, BrowserAuthErrorMessage.nativeExtensionNotInstalled.desc);
        };
        /**
         * Create an error when native connection has not been established
         * @returns
         */
        BrowserAuthError.createNativeConnectionNotEstablishedError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.nativeConnectionNotEstablished.code, BrowserAuthErrorMessage.nativeConnectionNotEstablished.desc);
        };
        /**
         * Create an error thrown when the initialize function hasn't been called
         */
        BrowserAuthError.createNativeBrokerCalledBeforeInitialize = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.nativeBrokerCalledBeforeInitialize.code, BrowserAuthErrorMessage.nativeBrokerCalledBeforeInitialize.desc);
        };
        /**
         * Create an error thrown when requesting a token directly from the native platform with an unsupported prompt parameter e.g. select_account, login or create
         * These requests must go through eSTS to ensure eSTS is aware of the new account
         */
        BrowserAuthError.createNativePromptParameterNotSupportedError = function () {
            return new BrowserAuthError(BrowserAuthErrorMessage.nativePromptNotSupported.code, BrowserAuthErrorMessage.nativePromptNotSupported.desc);
        };
        return BrowserAuthError;
    }(AuthError));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Constants
     */
    var BrowserConstants = {
        /**
         * Interaction in progress cache value
         */
        INTERACTION_IN_PROGRESS_VALUE: "interaction_in_progress",
        /**
         * Invalid grant error code
         */
        INVALID_GRANT_ERROR: "invalid_grant",
        /**
         * Default popup window width
         */
        POPUP_WIDTH: 483,
        /**
         * Default popup window height
         */
        POPUP_HEIGHT: 600,
        /**
         * Name of the popup window starts with
         */
        POPUP_NAME_PREFIX: "msal",
        /**
         * Default popup monitor poll interval in milliseconds
         */
        DEFAULT_POLL_INTERVAL_MS: 30,
        /**
         * Msal-browser SKU
         */
        MSAL_SKU: "msal.js.browser",
    };
    var NativeConstants = {
        CHANNEL_ID: "53ee284d-920a-4b59-9d30-a60315b26836",
        PREFERRED_EXTENSION_ID: "ppnbnpeolgkicgegkbkbjmhlideopiji",
        MATS_TELEMETRY: "MATS"
    };
    var NativeExtensionMethod;
    (function (NativeExtensionMethod) {
        NativeExtensionMethod["HandshakeRequest"] = "Handshake";
        NativeExtensionMethod["HandshakeResponse"] = "HandshakeResponse";
        NativeExtensionMethod["GetToken"] = "GetToken";
        NativeExtensionMethod["Response"] = "Response";
    })(NativeExtensionMethod || (NativeExtensionMethod = {}));
    exports.BrowserCacheLocation = void 0;
    (function (BrowserCacheLocation) {
        BrowserCacheLocation["LocalStorage"] = "localStorage";
        BrowserCacheLocation["SessionStorage"] = "sessionStorage";
        BrowserCacheLocation["MemoryStorage"] = "memoryStorage";
    })(exports.BrowserCacheLocation || (exports.BrowserCacheLocation = {}));
    /**
     * HTTP Request types supported by MSAL.
     */
    var HTTP_REQUEST_TYPE;
    (function (HTTP_REQUEST_TYPE) {
        HTTP_REQUEST_TYPE["GET"] = "GET";
        HTTP_REQUEST_TYPE["POST"] = "POST";
    })(HTTP_REQUEST_TYPE || (HTTP_REQUEST_TYPE = {}));
    /**
     * Temporary cache keys for MSAL, deleted after any request.
     */
    var TemporaryCacheKeys;
    (function (TemporaryCacheKeys) {
        TemporaryCacheKeys["AUTHORITY"] = "authority";
        TemporaryCacheKeys["ACQUIRE_TOKEN_ACCOUNT"] = "acquireToken.account";
        TemporaryCacheKeys["SESSION_STATE"] = "session.state";
        TemporaryCacheKeys["REQUEST_STATE"] = "request.state";
        TemporaryCacheKeys["NONCE_IDTOKEN"] = "nonce.id_token";
        TemporaryCacheKeys["ORIGIN_URI"] = "request.origin";
        TemporaryCacheKeys["RENEW_STATUS"] = "token.renew.status";
        TemporaryCacheKeys["URL_HASH"] = "urlHash";
        TemporaryCacheKeys["REQUEST_PARAMS"] = "request.params";
        TemporaryCacheKeys["SCOPES"] = "scopes";
        TemporaryCacheKeys["INTERACTION_STATUS_KEY"] = "interaction.status";
        TemporaryCacheKeys["CCS_CREDENTIAL"] = "ccs.credential";
        TemporaryCacheKeys["CORRELATION_ID"] = "request.correlationId";
        TemporaryCacheKeys["NATIVE_REQUEST"] = "request.native";
        TemporaryCacheKeys["REDIRECT_CONTEXT"] = "request.redirect.context";
    })(TemporaryCacheKeys || (TemporaryCacheKeys = {}));
    var StaticCacheKeys;
    (function (StaticCacheKeys) {
        StaticCacheKeys["ACCOUNT_KEYS"] = "msal.account.keys";
        StaticCacheKeys["TOKEN_KEYS"] = "msal.token.keys";
    })(StaticCacheKeys || (StaticCacheKeys = {}));
    /**
     * Cache keys stored in-memory
     */
    var InMemoryCacheKeys;
    (function (InMemoryCacheKeys) {
        InMemoryCacheKeys["WRAPPER_SKU"] = "wrapper.sku";
        InMemoryCacheKeys["WRAPPER_VER"] = "wrapper.version";
    })(InMemoryCacheKeys || (InMemoryCacheKeys = {}));
    /**
     * API Codes for Telemetry purposes.
     * Before adding a new code you must claim it in the MSAL Telemetry tracker as these number spaces are shared across all MSALs
     * 0-99 Silent Flow
     * 800-899 Auth Code Flow
     */
    exports.ApiId = void 0;
    (function (ApiId) {
        ApiId[ApiId["acquireTokenRedirect"] = 861] = "acquireTokenRedirect";
        ApiId[ApiId["acquireTokenPopup"] = 862] = "acquireTokenPopup";
        ApiId[ApiId["ssoSilent"] = 863] = "ssoSilent";
        ApiId[ApiId["acquireTokenSilent_authCode"] = 864] = "acquireTokenSilent_authCode";
        ApiId[ApiId["handleRedirectPromise"] = 865] = "handleRedirectPromise";
        ApiId[ApiId["acquireTokenByCode"] = 866] = "acquireTokenByCode";
        ApiId[ApiId["acquireTokenSilent_silentFlow"] = 61] = "acquireTokenSilent_silentFlow";
        ApiId[ApiId["logout"] = 961] = "logout";
        ApiId[ApiId["logoutPopup"] = 962] = "logoutPopup";
    })(exports.ApiId || (exports.ApiId = {}));
    /*
     * Interaction type of the API - used for state and telemetry
     */
    exports.InteractionType = void 0;
    (function (InteractionType) {
        InteractionType["Redirect"] = "redirect";
        InteractionType["Popup"] = "popup";
        InteractionType["Silent"] = "silent";
        InteractionType["None"] = "none";
    })(exports.InteractionType || (exports.InteractionType = {}));
    /**
     * Types of interaction currently in progress.
     * Used in events in wrapper libraries to invoke functions when certain interaction is in progress or all interactions are complete.
     */
    exports.InteractionStatus = void 0;
    (function (InteractionStatus) {
        /**
         * Initial status before interaction occurs
         */
        InteractionStatus["Startup"] = "startup";
        /**
         * Status set when all login calls occuring
         */
        InteractionStatus["Login"] = "login";
        /**
         * Status set when logout call occuring
         */
        InteractionStatus["Logout"] = "logout";
        /**
         * Status set for acquireToken calls
         */
        InteractionStatus["AcquireToken"] = "acquireToken";
        /**
         * Status set for ssoSilent calls
         */
        InteractionStatus["SsoSilent"] = "ssoSilent";
        /**
         * Status set when handleRedirect in progress
         */
        InteractionStatus["HandleRedirect"] = "handleRedirect";
        /**
         * Status set when interaction is complete
         */
        InteractionStatus["None"] = "none";
    })(exports.InteractionStatus || (exports.InteractionStatus = {}));
    var DEFAULT_REQUEST = {
        scopes: OIDC_DEFAULT_SCOPES
    };
    /**
     * JWK Key Format string (Type MUST be defined for window crypto APIs)
     */
    var KEY_FORMAT_JWK = "jwk";
    // Supported wrapper SKUs
    exports.WrapperSKU = void 0;
    (function (WrapperSKU) {
        WrapperSKU["React"] = "@azure/msal-react";
        WrapperSKU["Angular"] = "@azure/msal-angular";
    })(exports.WrapperSKU || (exports.WrapperSKU = {}));
    // DatabaseStorage Constants
    var DB_NAME = "msal.db";
    var DB_VERSION = 1;
    var DB_TABLE_NAME = DB_NAME + ".keys";
    var CacheLookupPolicy;
    (function (CacheLookupPolicy) {
        /*
         * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired
         * or cannot be found the refresh token will be used to acquire a new one. Finally, if the refresh token
         * is expired acquireTokenSilent will attempt to acquire new access and refresh tokens.
         */
        CacheLookupPolicy[CacheLookupPolicy["Default"] = 0] = "Default";
        /*
         * acquireTokenSilent will only look for access tokens in the cache. It will not attempt to renew access or
         * refresh tokens.
         */
        CacheLookupPolicy[CacheLookupPolicy["AccessToken"] = 1] = "AccessToken";
        /*
         * acquireTokenSilent will attempt to retrieve an access token from the cache. If the access token is expired or
         * cannot be found, the refresh token will be used to acquire a new one. If the refresh token is expired, it
         * will not be renewed and acquireTokenSilent will fail.
         */
        CacheLookupPolicy[CacheLookupPolicy["AccessTokenAndRefreshToken"] = 2] = "AccessTokenAndRefreshToken";
        /*
         * acquireTokenSilent will not attempt to retrieve access tokens from the cache and will instead attempt to
         * exchange the cached refresh token for a new access token. If the refresh token is expired, it will not be
         * renewed and acquireTokenSilent will fail.
         */
        CacheLookupPolicy[CacheLookupPolicy["RefreshToken"] = 3] = "RefreshToken";
        /*
         * acquireTokenSilent will not look in the cache for the access token. It will go directly to network with the
         * cached refresh token. If the refresh token is expired an attempt will be made to renew it. This is equivalent to
         * setting "forceRefresh: true".
         */
        CacheLookupPolicy[CacheLookupPolicy["RefreshTokenAndNetwork"] = 4] = "RefreshTokenAndNetwork";
        /*
         * acquireTokenSilent will attempt to renew both access and refresh tokens. It will not look in the cache. This will
         * always fail if 3rd party cookies are blocked by the browser.
         */
        CacheLookupPolicy[CacheLookupPolicy["Skip"] = 5] = "Skip";
    })(CacheLookupPolicy || (CacheLookupPolicy = {}));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var BrowserConfigurationAuthErrorMessage = {
        redirectUriNotSet: {
            code: "redirect_uri_empty",
            desc: "A redirect URI is required for all calls, and none has been set."
        },
        postLogoutUriNotSet: {
            code: "post_logout_uri_empty",
            desc: "A post logout redirect has not been set."
        },
        storageNotSupportedError: {
            code: "storage_not_supported",
            desc: "Given storage configuration option was not supported."
        },
        noRedirectCallbacksSet: {
            code: "no_redirect_callbacks",
            desc: "No redirect callbacks have been set. Please call setRedirectCallbacks() with the appropriate function arguments before continuing. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        invalidCallbackObject: {
            code: "invalid_callback_object",
            desc: "The object passed for the callback was invalid. " +
                "More information is available here: https://github.com/AzureAD/microsoft-authentication-library-for-js/wiki/MSAL-basics."
        },
        stubPcaInstanceCalled: {
            code: "stubbed_public_client_application_called",
            desc: "Stub instance of Public Client Application was called. If using msal-react, please ensure context is not used without a provider. For more visit: aka.ms/msaljs/browser-errors"
        },
        inMemRedirectUnavailable: {
            code: "in_mem_redirect_unavailable",
            desc: "Redirect cannot be supported. In-memory storage was selected and storeAuthStateInCookie=false, which would cause the library to be unable to handle the incoming hash. If you would like to use the redirect API, please use session/localStorage or set storeAuthStateInCookie=true."
        },
        entropyNotProvided: {
            code: "entropy_not_provided",
            desc: "The available browser crypto interface requires entropy set via system.cryptoOptions.entropy configuration option."
        }
    };
    /**
     * Browser library error class thrown by the MSAL.js library for SPAs
     */
    var BrowserConfigurationAuthError = /** @class */ (function (_super) {
        __extends$1(BrowserConfigurationAuthError, _super);
        function BrowserConfigurationAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            _this.name = "BrowserConfigurationAuthError";
            Object.setPrototypeOf(_this, BrowserConfigurationAuthError.prototype);
            return _this;
        }
        /**
         * Creates an error thrown when the redirect uri is empty (not set by caller)
         */
        BrowserConfigurationAuthError.createRedirectUriEmptyError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.redirectUriNotSet.code, BrowserConfigurationAuthErrorMessage.redirectUriNotSet.desc);
        };
        /**
         * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)
         */
        BrowserConfigurationAuthError.createPostLogoutRedirectUriEmptyError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.code, BrowserConfigurationAuthErrorMessage.postLogoutUriNotSet.desc);
        };
        /**
         * Creates error thrown when given storage location is not supported.
         * @param givenStorageLocation
         */
        BrowserConfigurationAuthError.createStorageNotSupportedError = function (givenStorageLocation) {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.storageNotSupportedError.code, BrowserConfigurationAuthErrorMessage.storageNotSupportedError.desc + " Given Location: " + givenStorageLocation);
        };
        /**
         * Creates error thrown when redirect callbacks are not set before calling loginRedirect() or acquireTokenRedirect().
         */
        BrowserConfigurationAuthError.createRedirectCallbacksNotSetError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.code, BrowserConfigurationAuthErrorMessage.noRedirectCallbacksSet.desc);
        };
        /**
         * Creates error thrown when the stub instance of PublicClientApplication is called.
         */
        BrowserConfigurationAuthError.createStubPcaInstanceCalledError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.code, BrowserConfigurationAuthErrorMessage.stubPcaInstanceCalled.desc);
        };
        /*
         * Create an error thrown when in-memory storage is used and storeAuthStateInCookie=false.
         */
        BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.code, BrowserConfigurationAuthErrorMessage.inMemRedirectUnavailable.desc);
        };
        /**
         * Creates an error thrown when a crypto interface that requires entropy is initialized without entropy
         */
        BrowserConfigurationAuthError.createEntropyNotProvided = function () {
            return new BrowserConfigurationAuthError(BrowserConfigurationAuthErrorMessage.entropyNotProvided.code, BrowserConfigurationAuthErrorMessage.entropyNotProvided.desc);
        };
        return BrowserConfigurationAuthError;
    }(AuthError));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserStorage = /** @class */ (function () {
        function BrowserStorage(cacheLocation) {
            this.validateWindowStorage(cacheLocation);
            this.windowStorage = window[cacheLocation];
        }
        BrowserStorage.prototype.validateWindowStorage = function (cacheLocation) {
            if (cacheLocation !== exports.BrowserCacheLocation.LocalStorage && cacheLocation !== exports.BrowserCacheLocation.SessionStorage) {
                throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
            }
            var storageSupported = !!window[cacheLocation];
            if (!storageSupported) {
                throw BrowserConfigurationAuthError.createStorageNotSupportedError(cacheLocation);
            }
        };
        BrowserStorage.prototype.getItem = function (key) {
            return this.windowStorage.getItem(key);
        };
        BrowserStorage.prototype.setItem = function (key, value) {
            this.windowStorage.setItem(key, value);
        };
        BrowserStorage.prototype.removeItem = function (key) {
            this.windowStorage.removeItem(key);
        };
        BrowserStorage.prototype.getKeys = function () {
            return Object.keys(this.windowStorage);
        };
        BrowserStorage.prototype.containsKey = function (key) {
            return this.windowStorage.hasOwnProperty(key);
        };
        return BrowserStorage;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var MemoryStorage = /** @class */ (function () {
        function MemoryStorage() {
            this.cache = new Map();
        }
        MemoryStorage.prototype.getItem = function (key) {
            return this.cache.get(key) || null;
        };
        MemoryStorage.prototype.setItem = function (key, value) {
            this.cache.set(key, value);
        };
        MemoryStorage.prototype.removeItem = function (key) {
            this.cache.delete(key);
        };
        MemoryStorage.prototype.getKeys = function () {
            var cacheKeys = [];
            this.cache.forEach(function (value, key) {
                cacheKeys.push(key);
            });
            return cacheKeys;
        };
        MemoryStorage.prototype.containsKey = function (key) {
            return this.cache.has(key);
        };
        MemoryStorage.prototype.clear = function () {
            this.cache.clear();
        };
        return MemoryStorage;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserProtocolUtils = /** @class */ (function () {
        function BrowserProtocolUtils() {
        }
        /**
         * Extracts the BrowserStateObject from the state string.
         * @param browserCrypto
         * @param state
         */
        BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {
            if (StringUtils.isEmpty(state)) {
                return null;
            }
            try {
                var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);
                return requestStateObj.libraryState.meta;
            }
            catch (e) {
                throw ClientAuthError.createInvalidStateError(state, e);
            }
        };
        /**
         * Parses properties of server response from url hash
         * @param locationHash Hash from url
         */
        BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {
            if (!locationHash) {
                return {};
            }
            var hashUrlString = new UrlString(locationHash);
            return UrlString.getDeserializedHash(hashUrlString.getHash());
        };
        return BrowserProtocolUtils;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements the cache storage interface for MSAL through browser local or session storage.
     * Cookies are only used if storeAuthStateInCookie is true, and are only used for
     * parameters such as state and nonce, generally.
     */
    var BrowserCacheManager = /** @class */ (function (_super) {
        __extends$1(BrowserCacheManager, _super);
        function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {
            var _this = _super.call(this, clientId, cryptoImpl, logger) || this;
            // Cookie life calculation (hours * minutes * seconds * ms)
            _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;
            _this.cacheConfig = cacheConfig;
            _this.logger = logger;
            _this.internalStorage = new MemoryStorage();
            _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);
            _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.temporaryCacheLocation, _this.cacheConfig.cacheLocation);
            // Migrate cache entries from older versions of MSAL.
            if (cacheConfig.cacheMigrationEnabled) {
                _this.migrateCacheEntries();
                _this.createKeyMaps();
            }
            return _this;
        }
        /**
         * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.
         * @param cacheLocation
         */
        BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {
            switch (cacheLocation) {
                case exports.BrowserCacheLocation.LocalStorage:
                case exports.BrowserCacheLocation.SessionStorage:
                    try {
                        return new BrowserStorage(cacheLocation);
                    }
                    catch (e) {
                        this.logger.verbose(e);
                        break;
                    }
            }
            this.cacheConfig.cacheLocation = exports.BrowserCacheLocation.MemoryStorage;
            return new MemoryStorage();
        };
        /**
         * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured temporaryCacheLocation.
         * @param temporaryCacheLocation
         * @param cacheLocation
         */
        BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (temporaryCacheLocation, cacheLocation) {
            switch (cacheLocation) {
                case exports.BrowserCacheLocation.LocalStorage:
                case exports.BrowserCacheLocation.SessionStorage:
                    try {
                        /*
                         * When users do not explicitly choose their own temporaryCacheLocation,
                         * temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs
                         */
                        return new BrowserStorage(temporaryCacheLocation || exports.BrowserCacheLocation.SessionStorage);
                    }
                    catch (e) {
                        this.logger.verbose(e);
                        return this.internalStorage;
                    }
                case exports.BrowserCacheLocation.MemoryStorage:
                default:
                    return this.internalStorage;
            }
        };
        /**
         * Migrate all old cache entries to new schema. No rollback supported.
         * @param storeAuthStateInCookie
         */
        BrowserCacheManager.prototype.migrateCacheEntries = function () {
            var _this = this;
            var idTokenKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ID_TOKEN;
            var clientInfoKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.CLIENT_INFO;
            var errorKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR;
            var errorDescKey = Constants.CACHE_PREFIX + "." + PersistentCacheKeys.ERROR_DESC;
            var idTokenValue = this.browserStorage.getItem(idTokenKey);
            var clientInfoValue = this.browserStorage.getItem(clientInfoKey);
            var errorValue = this.browserStorage.getItem(errorKey);
            var errorDescValue = this.browserStorage.getItem(errorDescKey);
            var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];
            var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];
            keysToMigrate.forEach(function (cacheKey, index) { return _this.migrateCacheEntry(cacheKey, values[index]); });
        };
        /**
         * Utility function to help with migration.
         * @param newKey
         * @param value
         * @param storeAuthStateInCookie
         */
        BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {
            if (value) {
                this.setTemporaryCache(newKey, value, true);
            }
        };
        /**
         * Searches all cache entries for MSAL accounts and creates the account key map
         * This is used to migrate users from older versions of MSAL which did not create the map.
         * @returns
         */
        BrowserCacheManager.prototype.createKeyMaps = function () {
            var _this = this;
            this.logger.trace("BrowserCacheManager - createKeyMaps called.");
            var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);
            var tokenKeys = this.getItem(StaticCacheKeys.TOKEN_KEYS + "." + this.clientId);
            if (accountKeys && tokenKeys) {
                this.logger.verbose("BrowserCacheManager:createKeyMaps - account and token key maps already exist, skipping migration.");
                // Key maps already exist, no need to iterate through cache
                return;
            }
            var allKeys = this.browserStorage.getKeys();
            allKeys.forEach(function (key) {
                if (_this.isCredentialKey(key)) {
                    // Get item, parse, validate and write key to map
                    var value = _this.getItem(key);
                    if (value) {
                        var credObj = _this.validateAndParseJson(value);
                        if (credObj && credObj.hasOwnProperty("credentialType")) {
                            switch (credObj["credentialType"]) {
                                case CredentialType.ID_TOKEN:
                                    if (IdTokenEntity.isIdTokenEntity(credObj)) {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - idToken found, saving key to token key map");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - idToken with key: " + key + " found, saving key to token key map");
                                        var idTokenEntity = CacheManager.toObject(new IdTokenEntity(), credObj);
                                        var newKey = _this.updateCredentialCacheKey(key, idTokenEntity);
                                        _this.addTokenKey(newKey, CredentialType.ID_TOKEN);
                                        return;
                                    }
                                    else {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching idToken schema with value containing idToken credentialType field but value failed IdTokenEntity validation, skipping.");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - failed idToken validation on key: " + key);
                                    }
                                    break;
                                case CredentialType.ACCESS_TOKEN:
                                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:
                                    if (AccessTokenEntity.isAccessTokenEntity(credObj)) {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - accessToken found, saving key to token key map");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - accessToken with key: " + key + " found, saving key to token key map");
                                        var accessTokenEntity = CacheManager.toObject(new AccessTokenEntity(), credObj);
                                        var newKey = _this.updateCredentialCacheKey(key, accessTokenEntity);
                                        _this.addTokenKey(newKey, CredentialType.ACCESS_TOKEN);
                                        return;
                                    }
                                    else {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching accessToken schema with value containing accessToken credentialType field but value failed AccessTokenEntity validation, skipping.");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - failed accessToken validation on key: " + key);
                                    }
                                    break;
                                case CredentialType.REFRESH_TOKEN:
                                    if (RefreshTokenEntity.isRefreshTokenEntity(credObj)) {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - refreshToken found, saving key to token key map");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - refreshToken with key: " + key + " found, saving key to token key map");
                                        var refreshTokenEntity = CacheManager.toObject(new RefreshTokenEntity(), credObj);
                                        var newKey = _this.updateCredentialCacheKey(key, refreshTokenEntity);
                                        _this.addTokenKey(newKey, CredentialType.REFRESH_TOKEN);
                                        return;
                                    }
                                    else {
                                        _this.logger.trace("BrowserCacheManager:createKeyMaps - key found matching refreshToken schema with value containing refreshToken credentialType field but value failed RefreshTokenEntity validation, skipping.");
                                        _this.logger.tracePii("BrowserCacheManager:createKeyMaps - failed refreshToken validation on key: " + key);
                                    }
                                    break;
                                // If credentialType isn't one of our predefined ones, it may not be an MSAL cache value. Ignore.
                            }
                        }
                    }
                }
                if (_this.isAccountKey(key)) {
                    var value = _this.getItem(key);
                    if (value) {
                        var accountObj = _this.validateAndParseJson(value);
                        if (accountObj && AccountEntity.isAccountEntity(accountObj)) {
                            _this.logger.trace("BrowserCacheManager:createKeyMaps - account found, saving key to account key map");
                            _this.logger.tracePii("BrowserCacheManager:createKeyMaps - account with key: " + key + " found, saving key to account key map");
                            _this.addAccountKeyToMap(key);
                        }
                    }
                }
            });
        };
        /**
         * Parses passed value as JSON object, JSON.parse() will throw an error.
         * @param input
         */
        BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {
            try {
                var parsedJson = JSON.parse(jsonValue);
                /**
                 * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object
                 * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check
                 * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.
                 *
                 */
                return (parsedJson && typeof parsedJson === "object") ? parsedJson : null;
            }
            catch (error) {
                return null;
            }
        };
        /**
         * fetches the entry from the browser storage based off the key
         * @param key
         */
        BrowserCacheManager.prototype.getItem = function (key) {
            return this.browserStorage.getItem(key);
        };
        /**
         * sets the entry in the browser storage
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setItem = function (key, value) {
            this.browserStorage.setItem(key, value);
        };
        /**
         * fetch the account entity from the platform cache
         * @param accountKey
         */
        BrowserCacheManager.prototype.getAccount = function (accountKey) {
            this.logger.trace("BrowserCacheManager.getAccount called");
            var account = this.getItem(accountKey);
            if (!account) {
                this.removeAccountKeyFromMap(accountKey);
                return null;
            }
            var parsedAccount = this.validateAndParseJson(account);
            if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {
                this.removeAccountKeyFromMap(accountKey);
                return null;
            }
            return CacheManager.toObject(new AccountEntity(), parsedAccount);
        };
        /**
         * set account entity in the platform cache
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setAccount = function (account) {
            this.logger.trace("BrowserCacheManager.setAccount called");
            var key = account.generateAccountKey();
            this.setItem(key, JSON.stringify(account));
            this.addAccountKeyToMap(key);
        };
        /**
         * Returns the array of account keys currently cached
         * @returns
         */
        BrowserCacheManager.prototype.getAccountKeys = function () {
            this.logger.trace("BrowserCacheManager.getAccountKeys called");
            var accountKeys = this.getItem(StaticCacheKeys.ACCOUNT_KEYS);
            if (accountKeys) {
                return JSON.parse(accountKeys);
            }
            this.logger.verbose("BrowserCacheManager.getAccountKeys - No account keys found");
            return [];
        };
        /**
         * Add a new account to the key map
         * @param key
         */
        BrowserCacheManager.prototype.addAccountKeyToMap = function (key) {
            this.logger.trace("BrowserCacheManager.addAccountKeyToMap called");
            this.logger.tracePii("BrowserCacheManager.addAccountKeyToMap called with key: " + key);
            var accountKeys = this.getAccountKeys();
            if (accountKeys.indexOf(key) === -1) {
                // Only add key if it does not already exist in the map
                accountKeys.push(key);
                this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));
                this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key added");
            }
            else {
                this.logger.verbose("BrowserCacheManager.addAccountKeyToMap account key already exists in map");
            }
        };
        /**
         * Remove an account from the key map
         * @param key
         */
        BrowserCacheManager.prototype.removeAccountKeyFromMap = function (key) {
            this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap called");
            this.logger.tracePii("BrowserCacheManager.removeAccountKeyFromMap called with key: " + key);
            var accountKeys = this.getAccountKeys();
            var removalIndex = accountKeys.indexOf(key);
            if (removalIndex > -1) {
                accountKeys.splice(removalIndex, 1);
                this.setItem(StaticCacheKeys.ACCOUNT_KEYS, JSON.stringify(accountKeys));
                this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap account key removed");
            }
            else {
                this.logger.trace("BrowserCacheManager.removeAccountKeyFromMap key not found in existing map");
            }
        };
        /**
         * Extends inherited removeAccount function to include removal of the account key from the map
         * @param key
         */
        BrowserCacheManager.prototype.removeAccount = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    _super.prototype.removeAccount.call(this, key);
                    this.removeAccountKeyFromMap(key);
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Removes given idToken from the cache and from the key map
         * @param key
         */
        BrowserCacheManager.prototype.removeIdToken = function (key) {
            _super.prototype.removeIdToken.call(this, key);
            this.removeTokenKey(key, CredentialType.ID_TOKEN);
        };
        /**
         * Removes given accessToken from the cache and from the key map
         * @param key
         */
        BrowserCacheManager.prototype.removeAccessToken = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    _super.prototype.removeAccessToken.call(this, key);
                    this.removeTokenKey(key, CredentialType.ACCESS_TOKEN);
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Removes given refreshToken from the cache and from the key map
         * @param key
         */
        BrowserCacheManager.prototype.removeRefreshToken = function (key) {
            _super.prototype.removeRefreshToken.call(this, key);
            this.removeTokenKey(key, CredentialType.REFRESH_TOKEN);
        };
        /**
         * Gets the keys for the cached tokens associated with this clientId
         * @returns
         */
        BrowserCacheManager.prototype.getTokenKeys = function () {
            this.logger.trace("BrowserCacheManager.getTokenKeys called");
            var item = this.getItem(StaticCacheKeys.TOKEN_KEYS + "." + this.clientId);
            if (item) {
                var tokenKeys = this.validateAndParseJson(item);
                if (tokenKeys &&
                    tokenKeys.hasOwnProperty("idToken") &&
                    tokenKeys.hasOwnProperty("accessToken") &&
                    tokenKeys.hasOwnProperty("refreshToken")) {
                    return tokenKeys;
                }
                else {
                    this.logger.error("BrowserCacheManager.getTokenKeys - Token keys found but in an unknown format. Returning empty key map.");
                }
            }
            else {
                this.logger.verbose("BrowserCacheManager.getTokenKeys - No token keys found");
            }
            return {
                idToken: [],
                accessToken: [],
                refreshToken: []
            };
        };
        /**
         * Adds the given key to the token key map
         * @param key
         * @param type
         */
        BrowserCacheManager.prototype.addTokenKey = function (key, type) {
            this.logger.trace("BrowserCacheManager addTokenKey called");
            var tokenKeys = this.getTokenKeys();
            switch (type) {
                case CredentialType.ID_TOKEN:
                    if (tokenKeys.idToken.indexOf(key) === -1) {
                        this.logger.info("BrowserCacheManager: addTokenKey - idToken added to map");
                        tokenKeys.idToken.push(key);
                    }
                    break;
                case CredentialType.ACCESS_TOKEN:
                    if (tokenKeys.accessToken.indexOf(key) === -1) {
                        this.logger.info("BrowserCacheManager: addTokenKey - accessToken added to map");
                        tokenKeys.accessToken.push(key);
                    }
                    break;
                case CredentialType.REFRESH_TOKEN:
                    if (tokenKeys.refreshToken.indexOf(key) === -1) {
                        this.logger.info("BrowserCacheManager: addTokenKey - refreshToken added to map");
                        tokenKeys.refreshToken.push(key);
                    }
                    break;
                default:
                    this.logger.error("BrowserCacheManager:addTokenKey - CredentialType provided invalid. CredentialType: " + type);
                    ClientAuthError.createUnexpectedCredentialTypeError();
            }
            this.setItem(StaticCacheKeys.TOKEN_KEYS + "." + this.clientId, JSON.stringify(tokenKeys));
        };
        /**
         * Removes the given key from the token key map
         * @param key
         * @param type
         */
        BrowserCacheManager.prototype.removeTokenKey = function (key, type) {
            this.logger.trace("BrowserCacheManager removeTokenKey called");
            var tokenKeys = this.getTokenKeys();
            switch (type) {
                case CredentialType.ID_TOKEN:
                    this.logger.infoPii("BrowserCacheManager: removeTokenKey - attempting to remove idToken with key: " + key + " from map");
                    var idRemoval = tokenKeys.idToken.indexOf(key);
                    if (idRemoval > -1) {
                        this.logger.info("BrowserCacheManager: removeTokenKey - idToken removed from map");
                        tokenKeys.idToken.splice(idRemoval, 1);
                    }
                    else {
                        this.logger.info("BrowserCacheManager: removeTokenKey - idToken does not exist in map. Either it was previously removed or it was never added.");
                    }
                    break;
                case CredentialType.ACCESS_TOKEN:
                    this.logger.infoPii("BrowserCacheManager: removeTokenKey - attempting to remove accessToken with key: " + key + " from map");
                    var accessRemoval = tokenKeys.accessToken.indexOf(key);
                    if (accessRemoval > -1) {
                        this.logger.info("BrowserCacheManager: removeTokenKey - accessToken removed from map");
                        tokenKeys.accessToken.splice(accessRemoval, 1);
                    }
                    else {
                        this.logger.info("BrowserCacheManager: removeTokenKey - accessToken does not exist in map. Either it was previously removed or it was never added.");
                    }
                    break;
                case CredentialType.REFRESH_TOKEN:
                    this.logger.infoPii("BrowserCacheManager: removeTokenKey - attempting to remove refreshToken with key: " + key + " from map");
                    var refreshRemoval = tokenKeys.refreshToken.indexOf(key);
                    if (refreshRemoval > -1) {
                        this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken removed from map");
                        tokenKeys.refreshToken.splice(refreshRemoval, 1);
                    }
                    else {
                        this.logger.info("BrowserCacheManager: removeTokenKey - refreshToken does not exist in map. Either it was previously removed or it was never added.");
                    }
                    break;
                default:
                    this.logger.error("BrowserCacheManager:removeTokenKey - CredentialType provided invalid. CredentialType: " + type);
                    ClientAuthError.createUnexpectedCredentialTypeError();
            }
            this.setItem(StaticCacheKeys.TOKEN_KEYS + "." + this.clientId, JSON.stringify(tokenKeys));
        };
        /**
         * generates idToken entity from a string
         * @param idTokenKey
         */
        BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {
            var value = this.getItem(idTokenKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
                this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);
                return null;
            }
            var parsedIdToken = this.validateAndParseJson(value);
            if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {
                this.logger.trace("BrowserCacheManager.getIdTokenCredential: called, no cache hit");
                this.removeTokenKey(idTokenKey, CredentialType.ID_TOKEN);
                return null;
            }
            this.logger.trace("BrowserCacheManager.getIdTokenCredential: cache hit");
            return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);
        };
        /**
         * set IdToken credential to the platform cache
         * @param idToken
         */
        BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {
            this.logger.trace("BrowserCacheManager.setIdTokenCredential called");
            var idTokenKey = idToken.generateCredentialKey();
            this.setItem(idTokenKey, JSON.stringify(idToken));
            this.addTokenKey(idTokenKey, CredentialType.ID_TOKEN);
        };
        /**
         * generates accessToken entity from a string
         * @param key
         */
        BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {
            var value = this.getItem(accessTokenKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
                this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);
                return null;
            }
            var parsedAccessToken = this.validateAndParseJson(value);
            if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {
                this.logger.trace("BrowserCacheManager.getAccessTokenCredential: called, no cache hit");
                this.removeTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);
                return null;
            }
            this.logger.trace("BrowserCacheManager.getAccessTokenCredential: cache hit");
            return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);
        };
        /**
         * set accessToken credential to the platform cache
         * @param accessToken
         */
        BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {
            this.logger.trace("BrowserCacheManager.setAccessTokenCredential called");
            var accessTokenKey = accessToken.generateCredentialKey();
            this.setItem(accessTokenKey, JSON.stringify(accessToken));
            this.addTokenKey(accessTokenKey, CredentialType.ACCESS_TOKEN);
        };
        /**
         * generates refreshToken entity from a string
         * @param refreshTokenKey
         */
        BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {
            var value = this.getItem(refreshTokenKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
                this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);
                return null;
            }
            var parsedRefreshToken = this.validateAndParseJson(value);
            if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {
                this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: called, no cache hit");
                this.removeTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);
                return null;
            }
            this.logger.trace("BrowserCacheManager.getRefreshTokenCredential: cache hit");
            return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);
        };
        /**
         * set refreshToken credential to the platform cache
         * @param refreshToken
         */
        BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {
            this.logger.trace("BrowserCacheManager.setRefreshTokenCredential called");
            var refreshTokenKey = refreshToken.generateCredentialKey();
            this.setItem(refreshTokenKey, JSON.stringify(refreshToken));
            this.addTokenKey(refreshTokenKey, CredentialType.REFRESH_TOKEN);
        };
        /**
         * fetch appMetadata entity from the platform cache
         * @param appMetadataKey
         */
        BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {
            var value = this.getItem(appMetadataKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
                return null;
            }
            var parsedMetadata = this.validateAndParseJson(value);
            if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {
                this.logger.trace("BrowserCacheManager.getAppMetadata: called, no cache hit");
                return null;
            }
            this.logger.trace("BrowserCacheManager.getAppMetadata: cache hit");
            return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);
        };
        /**
         * set appMetadata entity to the platform cache
         * @param appMetadata
         */
        BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {
            this.logger.trace("BrowserCacheManager.setAppMetadata called");
            var appMetadataKey = appMetadata.generateAppMetadataKey();
            this.setItem(appMetadataKey, JSON.stringify(appMetadata));
        };
        /**
         * fetch server telemetry entity from the platform cache
         * @param serverTelemetryKey
         */
        BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {
            var value = this.getItem(serverTelemetryKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
                return null;
            }
            var parsedMetadata = this.validateAndParseJson(value);
            if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {
                this.logger.trace("BrowserCacheManager.getServerTelemetry: called, no cache hit");
                return null;
            }
            this.logger.trace("BrowserCacheManager.getServerTelemetry: cache hit");
            return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);
        };
        /**
         * set server telemetry entity to the platform cache
         * @param serverTelemetryKey
         * @param serverTelemetry
         */
        BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {
            this.logger.trace("BrowserCacheManager.setServerTelemetry called");
            this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));
        };
        /**
         *
         */
        BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {
            var value = this.internalStorage.getItem(key);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getAuthorityMetadata: called, no cache hit");
                return null;
            }
            var parsedMetadata = this.validateAndParseJson(value);
            if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {
                this.logger.trace("BrowserCacheManager.getAuthorityMetadata: cache hit");
                return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);
            }
            return null;
        };
        /**
         *
         */
        BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {
            var _this = this;
            var allKeys = this.internalStorage.getKeys();
            return allKeys.filter(function (key) {
                return _this.isAuthorityMetadata(key);
            });
        };
        /**
         * Sets wrapper metadata in memory
         * @param wrapperSKU
         * @param wrapperVersion
         */
        BrowserCacheManager.prototype.setWrapperMetadata = function (wrapperSKU, wrapperVersion) {
            this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_SKU, wrapperSKU);
            this.internalStorage.setItem(InMemoryCacheKeys.WRAPPER_VER, wrapperVersion);
        };
        /**
         * Returns wrapper metadata from in-memory storage
         */
        BrowserCacheManager.prototype.getWrapperMetadata = function () {
            var sku = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_SKU) || Constants.EMPTY_STRING;
            var version = this.internalStorage.getItem(InMemoryCacheKeys.WRAPPER_VER) || Constants.EMPTY_STRING;
            return [sku, version];
        };
        /**
         *
         * @param entity
         */
        BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {
            this.logger.trace("BrowserCacheManager.setAuthorityMetadata called");
            this.internalStorage.setItem(key, JSON.stringify(entity));
        };
        /**
         * Gets the active account
         */
        BrowserCacheManager.prototype.getActiveAccount = function () {
            var activeAccountKeyFilters = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);
            var activeAccountValueFilters = this.getItem(activeAccountKeyFilters);
            if (!activeAccountValueFilters) {
                // if new active account cache type isn't found, it's an old version, so look for that instead
                this.logger.trace("BrowserCacheManager.getActiveAccount: No active account filters cache schema found, looking for legacy schema");
                var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);
                var activeAccountValueLocal = this.getItem(activeAccountKeyLocal);
                if (!activeAccountValueLocal) {
                    this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found");
                    return null;
                }
                var activeAccount = this.getAccountInfoByFilter({ localAccountId: activeAccountValueLocal })[0] || null;
                if (activeAccount) {
                    this.logger.trace("BrowserCacheManager.getActiveAccount: Legacy active account cache schema found");
                    this.logger.trace("BrowserCacheManager.getActiveAccount: Adding active account filters cache schema");
                    this.setActiveAccount(activeAccount);
                    return activeAccount;
                }
                return null;
            }
            var activeAccountValueObj = this.validateAndParseJson(activeAccountValueFilters);
            if (activeAccountValueObj) {
                this.logger.trace("BrowserCacheManager.getActiveAccount: Active account filters schema found");
                return this.getAccountInfoByFilter({
                    homeAccountId: activeAccountValueObj.homeAccountId,
                    localAccountId: activeAccountValueObj.localAccountId
                })[0] || null;
            }
            this.logger.trace("BrowserCacheManager.getActiveAccount: No active account found");
            return null;
        };
        /**
         * Sets the active account's localAccountId in cache
         * @param account
         */
        BrowserCacheManager.prototype.setActiveAccount = function (account) {
            var activeAccountKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT_FILTERS);
            var activeAccountKeyLocal = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);
            if (account) {
                this.logger.verbose("setActiveAccount: Active account set");
                var activeAccountValue = {
                    homeAccountId: account.homeAccountId,
                    localAccountId: account.localAccountId
                };
                this.browserStorage.setItem(activeAccountKey, JSON.stringify(activeAccountValue));
                this.browserStorage.setItem(activeAccountKeyLocal, account.localAccountId);
            }
            else {
                this.logger.verbose("setActiveAccount: No account passed, active account not set");
                this.browserStorage.removeItem(activeAccountKey);
                this.browserStorage.removeItem(activeAccountKeyLocal);
            }
        };
        /**
         * Gets a list of accounts that match all of the filters provided
         * @param account
         */
        BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {
            var allAccounts = this.getAllAccounts();
            this.logger.trace("BrowserCacheManager.getAccountInfoByFilter: total " + allAccounts.length + " accounts found");
            return allAccounts.filter(function (accountObj) {
                if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {
                    return false;
                }
                if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {
                    return false;
                }
                if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {
                    return false;
                }
                if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {
                    return false;
                }
                if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {
                    return false;
                }
                return true;
            });
        };
        /**
         * Checks the cache for accounts matching loginHint or SID
         * @param loginHint
         * @param sid
         */
        BrowserCacheManager.prototype.getAccountInfoByHints = function (loginHint, sid) {
            var matchingAccounts = this.getAllAccounts().filter(function (accountInfo) {
                if (sid) {
                    var accountSid = accountInfo.idTokenClaims && accountInfo.idTokenClaims["sid"];
                    return sid === accountSid;
                }
                if (loginHint) {
                    return loginHint === accountInfo.username;
                }
                return false;
            });
            if (matchingAccounts.length === 1) {
                return matchingAccounts[0];
            }
            else if (matchingAccounts.length > 1) {
                throw ClientAuthError.createMultipleMatchingAccountsInCacheError();
            }
            return null;
        };
        /**
         * fetch throttling entity from the platform cache
         * @param throttlingCacheKey
         */
        BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {
            var value = this.getItem(throttlingCacheKey);
            if (!value) {
                this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
                return null;
            }
            var parsedThrottlingCache = this.validateAndParseJson(value);
            if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {
                this.logger.trace("BrowserCacheManager.getThrottlingCache: called, no cache hit");
                return null;
            }
            this.logger.trace("BrowserCacheManager.getThrottlingCache: cache hit");
            return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);
        };
        /**
         * set throttling entity to the platform cache
         * @param throttlingCacheKey
         * @param throttlingCache
         */
        BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {
            this.logger.trace("BrowserCacheManager.setThrottlingCache called");
            this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));
        };
        /**
         * Gets cache item with given key.
         * Will retrieve from cookies if storeAuthStateInCookie is set to true.
         * @param key
         */
        BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {
            var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
            if (this.cacheConfig.storeAuthStateInCookie) {
                var itemCookie = this.getItemCookie(key);
                if (itemCookie) {
                    this.logger.trace("BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies");
                    return itemCookie;
                }
            }
            var value = this.temporaryCacheStorage.getItem(key);
            if (!value) {
                // If temp cache item not found in session/memory, check local storage for items set by old versions
                if (this.cacheConfig.cacheLocation === exports.BrowserCacheLocation.LocalStorage) {
                    var item = this.browserStorage.getItem(key);
                    if (item) {
                        this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage");
                        return item;
                    }
                }
                this.logger.trace("BrowserCacheManager.getTemporaryCache: No cache item found in local storage");
                return null;
            }
            this.logger.trace("BrowserCacheManager.getTemporaryCache: Temporary cache item returned");
            return value;
        };
        /**
         * Sets the cache item with the key and value given.
         * Stores in cookie if storeAuthStateInCookie is set to true.
         * This can cause cookie overflow if used incorrectly.
         * @param key
         * @param value
         */
        BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {
            var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;
            this.temporaryCacheStorage.setItem(key, value);
            if (this.cacheConfig.storeAuthStateInCookie) {
                this.logger.trace("BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie");
                this.setItemCookie(key, value);
            }
        };
        /**
         * Removes the cache item with the given key.
         * Will also clear the cookie item if storeAuthStateInCookie is set to true.
         * @param key
         */
        BrowserCacheManager.prototype.removeItem = function (key) {
            this.browserStorage.removeItem(key);
            this.temporaryCacheStorage.removeItem(key);
            if (this.cacheConfig.storeAuthStateInCookie) {
                this.logger.trace("BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie");
                this.clearItemCookie(key);
            }
        };
        /**
         * Checks whether key is in cache.
         * @param key
         */
        BrowserCacheManager.prototype.containsKey = function (key) {
            return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);
        };
        /**
         * Gets all keys in window.
         */
        BrowserCacheManager.prototype.getKeys = function () {
            return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());
        };
        /**
         * Clears all cache entries created by MSAL.
         */
        BrowserCacheManager.prototype.clear = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                        // Removes all accounts and their credentials
                        return [4 /*yield*/, this.removeAllAccounts()];
                        case 1:
                            // Removes all accounts and their credentials
                            _a.sent();
                            this.removeAppMetadata();
                            // Removes all remaining MSAL cache items
                            this.getKeys().forEach(function (cacheKey) {
                                // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js
                                if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(_this.clientId) !== -1))) {
                                    _this.removeItem(cacheKey);
                                }
                            });
                            this.internalStorage.clear();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Add value to cookies
         * @param cookieName
         * @param cookieValue
         * @param expires
         */
        BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {
            var cookieStr = encodeURIComponent(cookieName) + "=" + encodeURIComponent(cookieValue) + ";path=/;SameSite=Lax;";
            if (expires) {
                var expireTime = this.getCookieExpirationTime(expires);
                cookieStr += "expires=" + expireTime + ";";
            }
            if (this.cacheConfig.secureCookies) {
                cookieStr += "Secure;";
            }
            document.cookie = cookieStr;
        };
        /**
         * Get one item by key from cookies
         * @param cookieName
         */
        BrowserCacheManager.prototype.getItemCookie = function (cookieName) {
            var name = encodeURIComponent(cookieName) + "=";
            var cookieList = document.cookie.split(";");
            for (var i = 0; i < cookieList.length; i++) {
                var cookie = cookieList[i];
                while (cookie.charAt(0) === " ") {
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(name) === 0) {
                    return decodeURIComponent(cookie.substring(name.length, cookie.length));
                }
            }
            return Constants.EMPTY_STRING;
        };
        /**
         * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.
         */
        BrowserCacheManager.prototype.clearMsalCookies = function () {
            var _this = this;
            var cookiePrefix = Constants.CACHE_PREFIX + "." + this.clientId;
            var cookieList = document.cookie.split(";");
            cookieList.forEach(function (cookie) {
                while (cookie.charAt(0) === " ") {
                    // eslint-disable-next-line no-param-reassign
                    cookie = cookie.substring(1);
                }
                if (cookie.indexOf(cookiePrefix) === 0) {
                    var cookieKey = cookie.split("=")[0];
                    _this.clearItemCookie(cookieKey);
                }
            });
        };
        /**
         * Clear an item in the cookies by key
         * @param cookieName
         */
        BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {
            this.setItemCookie(cookieName, Constants.EMPTY_STRING, -1);
        };
        /**
         * Get cookie expiration time
         * @param cookieLifeDays
         */
        BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {
            var today = new Date();
            var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);
            return expr.toUTCString();
        };
        /**
         * Gets the cache object referenced by the browser
         */
        BrowserCacheManager.prototype.getCache = function () {
            return this.browserStorage;
        };
        /**
         * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser
         */
        BrowserCacheManager.prototype.setCache = function () {
            // sets nothing
        };
        /**
         * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)
         * @param key
         * @param addInstanceId
         */
        BrowserCacheManager.prototype.generateCacheKey = function (key) {
            var generatedKey = this.validateAndParseJson(key);
            if (!generatedKey) {
                if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {
                    return key;
                }
                return Constants.CACHE_PREFIX + "." + this.clientId + "." + key;
            }
            return JSON.stringify(key);
        };
        /**
         * Create authorityKey to cache authority
         * @param state
         */
        BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + "." + stateId);
        };
        /**
         * Create Nonce key to cache nonce
         * @param state
         */
        BrowserCacheManager.prototype.generateNonceKey = function (stateString) {
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + "." + stateId);
        };
        /**
         * Creates full cache key for the request state
         * @param stateString State string for the request
         */
        BrowserCacheManager.prototype.generateStateKey = function (stateString) {
            // Use the library state id to key temp storage for uniqueness for multiple concurrent requests
            var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;
            return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + "." + stateId);
        };
        /**
         * Gets the cached authority based on the cached state. Returns empty if no cached state found.
         */
        BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {
            var stateCacheKey = this.generateStateKey(cachedState);
            var state = this.getTemporaryCache(stateCacheKey);
            if (!state) {
                return null;
            }
            var authorityCacheKey = this.generateAuthorityKey(state);
            return this.getTemporaryCache(authorityCacheKey);
        };
        /**
         * Updates account, authority, and state in cache
         * @param serverAuthenticationRequest
         * @param account
         */
        BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {
            this.logger.trace("BrowserCacheManager.updateCacheEntries called");
            // Cache the request state
            var stateCacheKey = this.generateStateKey(state);
            this.setTemporaryCache(stateCacheKey, state, false);
            // Cache the nonce
            var nonceCacheKey = this.generateNonceKey(state);
            this.setTemporaryCache(nonceCacheKey, nonce, false);
            // Cache authorityKey
            var authorityCacheKey = this.generateAuthorityKey(state);
            this.setTemporaryCache(authorityCacheKey, authorityInstance, false);
            if (account) {
                var ccsCredential = {
                    credential: account.homeAccountId,
                    type: CcsCredentialType.HOME_ACCOUNT_ID
                };
                this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
            }
            else if (!StringUtils.isEmpty(loginHint)) {
                var ccsCredential = {
                    credential: loginHint,
                    type: CcsCredentialType.UPN
                };
                this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);
            }
        };
        /**
         * Reset all temporary cache items
         * @param state
         */
        BrowserCacheManager.prototype.resetRequestCache = function (state) {
            var _this = this;
            this.logger.trace("BrowserCacheManager.resetRequestCache called");
            // check state and remove associated cache items
            if (!StringUtils.isEmpty(state)) {
                this.getKeys().forEach(function (key) {
                    if (key.indexOf(state) !== -1) {
                        _this.removeItem(key);
                    }
                });
            }
            // delete generic interactive request parameters
            if (state) {
                this.removeItem(this.generateStateKey(state));
                this.removeItem(this.generateNonceKey(state));
                this.removeItem(this.generateAuthorityKey(state));
            }
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CORRELATION_ID));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));
            this.setInteractionInProgress(false);
        };
        /**
         * Removes temporary cache for the provided state
         * @param stateString
         */
        BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {
            this.logger.trace("BrowserCacheManager.cleanRequestByState called");
            // Interaction is completed - remove interaction status.
            if (stateString) {
                var stateKey = this.generateStateKey(stateString);
                var cachedState = this.temporaryCacheStorage.getItem(stateKey);
                this.logger.infoPii("BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: " + cachedState);
                this.resetRequestCache(cachedState || Constants.EMPTY_STRING);
            }
            this.clearMsalCookies();
        };
        /**
         * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state
         * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.
         * @param interactionType
         */
        BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {
            var _this = this;
            this.logger.trace("BrowserCacheManager.cleanRequestByInteractionType called");
            // Loop through all keys to find state key
            this.getKeys().forEach(function (key) {
                // If this key is not the state key, move on
                if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {
                    return;
                }
                // Retrieve state value, return if not a valid value
                var stateValue = _this.temporaryCacheStorage.getItem(key);
                if (!stateValue) {
                    return;
                }
                // Extract state and ensure it matches given InteractionType, then clean request cache
                var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);
                if (parsedState && parsedState.interactionType === interactionType) {
                    _this.logger.infoPii("BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: " + stateValue);
                    _this.resetRequestCache(stateValue);
                }
            });
            this.clearMsalCookies();
            this.setInteractionInProgress(false);
        };
        BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {
            this.logger.trace("BrowserCacheManager.cacheCodeRequest called");
            var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));
            this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);
        };
        /**
         * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
         */
        BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {
            this.logger.trace("BrowserCacheManager.getCachedRequest called");
            // Get token request from cache and parse as TokenExchangeParameters.
            var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);
            if (!encodedTokenRequest) {
                throw BrowserAuthError.createNoTokenRequestCacheError();
            }
            var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));
            if (!parsedRequest) {
                throw BrowserAuthError.createUnableToParseTokenRequestCacheError();
            }
            this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));
            // Get cached authority and use if no authority is cached with request.
            if (StringUtils.isEmpty(parsedRequest.authority)) {
                var authorityCacheKey = this.generateAuthorityKey(state);
                var cachedAuthority = this.getTemporaryCache(authorityCacheKey);
                if (!cachedAuthority) {
                    throw BrowserAuthError.createNoCachedAuthorityError();
                }
                parsedRequest.authority = cachedAuthority;
            }
            return parsedRequest;
        };
        /**
         * Gets cached native request for redirect flows
         */
        BrowserCacheManager.prototype.getCachedNativeRequest = function () {
            this.logger.trace("BrowserCacheManager.getCachedNativeRequest called");
            var cachedRequest = this.getTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, true);
            if (!cachedRequest) {
                this.logger.trace("BrowserCacheManager.getCachedNativeRequest: No cached native request found");
                return null;
            }
            var parsedRequest = this.validateAndParseJson(cachedRequest);
            if (!parsedRequest) {
                this.logger.error("BrowserCacheManager.getCachedNativeRequest: Unable to parse native request");
                return null;
            }
            return parsedRequest;
        };
        BrowserCacheManager.prototype.isInteractionInProgress = function (matchClientId) {
            var clientId = this.getInteractionInProgress();
            if (matchClientId) {
                return clientId === this.clientId;
            }
            else {
                return !!clientId;
            }
        };
        BrowserCacheManager.prototype.getInteractionInProgress = function () {
            var key = Constants.CACHE_PREFIX + "." + TemporaryCacheKeys.INTERACTION_STATUS_KEY;
            return this.getTemporaryCache(key, false);
        };
        BrowserCacheManager.prototype.setInteractionInProgress = function (inProgress) {
            // Ensure we don't overwrite interaction in progress for a different clientId
            var key = Constants.CACHE_PREFIX + "." + TemporaryCacheKeys.INTERACTION_STATUS_KEY;
            if (inProgress) {
                if (this.getInteractionInProgress()) {
                    throw BrowserAuthError.createInteractionInProgressError();
                }
                else {
                    // No interaction is in progress
                    this.setTemporaryCache(key, this.clientId, false);
                }
            }
            else if (!inProgress && this.getInteractionInProgress() === this.clientId) {
                this.removeItem(key);
            }
        };
        /**
         * Returns username retrieved from ADAL or MSAL v1 idToken
         */
        BrowserCacheManager.prototype.getLegacyLoginHint = function () {
            // Only check for adal/msal token if no SSO params are being used
            var adalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ADAL_ID_TOKEN);
            if (adalIdTokenString) {
                this.browserStorage.removeItem(PersistentCacheKeys.ADAL_ID_TOKEN);
                this.logger.verbose("Cached ADAL id token retrieved.");
            }
            // Check for cached MSAL v1 id token
            var msalIdTokenString = this.getTemporaryCache(PersistentCacheKeys.ID_TOKEN, true);
            if (msalIdTokenString) {
                this.removeItem(this.generateCacheKey(PersistentCacheKeys.ID_TOKEN));
                this.logger.verbose("Cached MSAL.js v1 id token retrieved");
            }
            var cachedIdTokenString = msalIdTokenString || adalIdTokenString;
            if (cachedIdTokenString) {
                var cachedIdToken = new AuthToken(cachedIdTokenString, this.cryptoImpl);
                if (cachedIdToken.claims && cachedIdToken.claims.preferred_username) {
                    this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 preferred_username as loginHint");
                    return cachedIdToken.claims.preferred_username;
                }
                else if (cachedIdToken.claims && cachedIdToken.claims.upn) {
                    this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, setting ADAL/MSAL v1 upn as loginHint");
                    return cachedIdToken.claims.upn;
                }
                else {
                    this.logger.verbose("No SSO params used and ADAL/MSAL v1 token retrieved, however, no account hint claim found. Enable preferred_username or upn id token claim to get SSO.");
                }
            }
            return null;
        };
        /**
         * Updates a credential's cache key if the current cache key is outdated
         */
        BrowserCacheManager.prototype.updateCredentialCacheKey = function (currentCacheKey, credential) {
            var updatedCacheKey = credential.generateCredentialKey();
            if (currentCacheKey !== updatedCacheKey) {
                var cacheItem = this.getItem(currentCacheKey);
                if (cacheItem) {
                    this.removeItem(currentCacheKey);
                    this.setItem(updatedCacheKey, cacheItem);
                    this.logger.verbose("Updated an outdated " + credential.credentialType + " cache key");
                    return updatedCacheKey;
                }
                else {
                    this.logger.error("Attempted to update an outdated " + credential.credentialType + " cache key but no item matching the outdated key was found in storage");
                }
            }
            return currentCacheKey;
        };
        /**
         * Returns application id as redirect context during AcquireTokenRedirect flow.
         */
        BrowserCacheManager.prototype.getRedirectRequestContext = function () {
            return this.getTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, true);
        };
        /**
         * Sets application id as the redirect context during AcquireTokenRedirect flow.
         * @param value
         */
        BrowserCacheManager.prototype.setRedirectRequestContext = function (value) {
            this.setTemporaryCache(TemporaryCacheKeys.REDIRECT_CONTEXT, value, true);
        };
        return BrowserCacheManager;
    }(CacheManager));
    var DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {
        var cacheOptions = {
            cacheLocation: exports.BrowserCacheLocation.MemoryStorage,
            temporaryCacheLocation: exports.BrowserCacheLocation.MemoryStorage,
            storeAuthStateInCookie: false,
            secureCookies: false,
            cacheMigrationEnabled: false
        };
        return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);
    };

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /* eslint-disable header/header */
    var name = "@azure/msal-browser";
    var version$1 = "2.37.0";

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
     */
    var FetchClient = /** @class */ (function () {
        function FetchClient() {
        }
        /**
         * Fetch Client for REST endpoints - Get request
         * @param url
         * @param headers
         * @param body
         */
        FetchClient.prototype.sendGetRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                var response, e_1, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, fetch(url, {
                                    method: HTTP_REQUEST_TYPE.GET,
                                    headers: this.getFetchHeaders(options)
                                })];
                        case 1:
                            response = _b.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _b.sent();
                            if (window.navigator.onLine) {
                                throw BrowserAuthError.createGetRequestFailedError(e_1, url);
                            }
                            else {
                                throw BrowserAuthError.createNoNetworkConnectivityError();
                            }
                        case 3:
                            _b.trys.push([3, 5, , 6]);
                            _a = {
                                headers: this.getHeaderDict(response.headers)
                            };
                            return [4 /*yield*/, response.json()];
                        case 4: return [2 /*return*/, (_a.body = (_b.sent()),
                                _a.status = response.status,
                                _a)];
                        case 5:
                            _b.sent();
                            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Fetch Client for REST endpoints - Post request
         * @param url
         * @param headers
         * @param body
         */
        FetchClient.prototype.sendPostRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                var reqBody, response, e_3, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            reqBody = (options && options.body) || Constants.EMPTY_STRING;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, fetch(url, {
                                    method: HTTP_REQUEST_TYPE.POST,
                                    headers: this.getFetchHeaders(options),
                                    body: reqBody
                                })];
                        case 2:
                            response = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _b.sent();
                            if (window.navigator.onLine) {
                                throw BrowserAuthError.createPostRequestFailedError(e_3, url);
                            }
                            else {
                                throw BrowserAuthError.createNoNetworkConnectivityError();
                            }
                        case 4:
                            _b.trys.push([4, 6, , 7]);
                            _a = {
                                headers: this.getHeaderDict(response.headers)
                            };
                            return [4 /*yield*/, response.json()];
                        case 5: return [2 /*return*/, (_a.body = (_b.sent()),
                                _a.status = response.status,
                                _a)];
                        case 6:
                            _b.sent();
                            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get Fetch API Headers object from string map
         * @param inputHeaders
         */
        FetchClient.prototype.getFetchHeaders = function (options) {
            var headers = new Headers();
            if (!(options && options.headers)) {
                return headers;
            }
            var optionsHeaders = options.headers;
            Object.keys(optionsHeaders).forEach(function (key) {
                headers.append(key, optionsHeaders[key]);
            });
            return headers;
        };
        FetchClient.prototype.getHeaderDict = function (headers) {
            var headerDict = {};
            headers.forEach(function (value, key) {
                headerDict[key] = value;
            });
            return headerDict;
        };
        return FetchClient;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This client implements the XMLHttpRequest class to send GET and POST requests.
     */
    var XhrClient = /** @class */ (function () {
        function XhrClient() {
        }
        /**
         * XhrClient for REST endpoints - Get request
         * @param url
         * @param headers
         * @param body
         */
        XhrClient.prototype.sendGetRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.GET, options)];
                });
            });
        };
        /**
         * XhrClient for REST endpoints - Post request
         * @param url
         * @param headers
         * @param body
         */
        XhrClient.prototype.sendPostRequestAsync = function (url, options) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.sendRequestAsync(url, HTTP_REQUEST_TYPE.POST, options)];
                });
            });
        };
        /**
         * Helper for XhrClient requests.
         * @param url
         * @param method
         * @param options
         */
        XhrClient.prototype.sendRequestAsync = function (url, method, options) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.open(method, url, /* async: */ true);
                _this.setXhrHeaders(xhr, options);
                xhr.onload = function () {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        if (method === HTTP_REQUEST_TYPE.POST) {
                            reject(BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                        }
                        else {
                            reject(BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                        }
                    }
                    try {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        var networkResponse = {
                            headers: _this.getHeaderDict(xhr),
                            body: jsonResponse,
                            status: xhr.status
                        };
                        resolve(networkResponse);
                    }
                    catch (e) {
                        reject(BrowserAuthError.createFailedToParseNetworkResponseError(url));
                    }
                };
                xhr.onerror = function () {
                    if (window.navigator.onLine) {
                        if (method === HTTP_REQUEST_TYPE.POST) {
                            reject(BrowserAuthError.createPostRequestFailedError("Failed with status " + xhr.status, url));
                        }
                        else {
                            reject(BrowserAuthError.createGetRequestFailedError("Failed with status " + xhr.status, url));
                        }
                    }
                    else {
                        reject(BrowserAuthError.createNoNetworkConnectivityError());
                    }
                };
                if (method === HTTP_REQUEST_TYPE.POST && options && options.body) {
                    xhr.send(options.body);
                }
                else if (method === HTTP_REQUEST_TYPE.GET) {
                    xhr.send();
                }
                else {
                    throw BrowserAuthError.createHttpMethodNotImplementedError(method);
                }
            });
        };
        /**
         * Helper to set XHR headers for request.
         * @param xhr
         * @param options
         */
        XhrClient.prototype.setXhrHeaders = function (xhr, options) {
            if (options && options.headers) {
                var headers_1 = options.headers;
                Object.keys(headers_1).forEach(function (key) {
                    xhr.setRequestHeader(key, headers_1[key]);
                });
            }
        };
        /**
         * Gets a string map of the headers received in the response.
         *
         * Algorithm comes from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
         * @param xhr
         */
        XhrClient.prototype.getHeaderDict = function (xhr) {
            var headerString = xhr.getAllResponseHeaders();
            var headerArr = headerString.trim().split(/[\r\n]+/);
            var headerDict = {};
            headerArr.forEach(function (value) {
                var parts = value.split(": ");
                var headerName = parts.shift();
                var headerVal = parts.join(": ");
                if (headerName && headerVal) {
                    headerDict[headerName] = headerVal;
                }
            });
            return headerDict;
        };
        return XhrClient;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class for browser specific functions
     */
    var BrowserUtils = /** @class */ (function () {
        function BrowserUtils() {
        }
        // #region Window Navigation and URL management
        /**
         * Clears hash from window url.
         */
        BrowserUtils.clearHash = function (contentWindow) {
            // Office.js sets history.replaceState to null
            contentWindow.location.hash = Constants.EMPTY_STRING;
            if (typeof contentWindow.history.replaceState === "function") {
                // Full removes "#" from url
                contentWindow.history.replaceState(null, Constants.EMPTY_STRING, "" + contentWindow.location.origin + contentWindow.location.pathname + contentWindow.location.search);
            }
        };
        /**
         * Replaces current hash with hash from provided url
         */
        BrowserUtils.replaceHash = function (url) {
            var urlParts = url.split("#");
            urlParts.shift(); // Remove part before the hash
            window.location.hash = urlParts.length > 0 ? urlParts.join("#") : Constants.EMPTY_STRING;
        };
        /**
         * Returns boolean of whether the current window is in an iframe or not.
         */
        BrowserUtils.isInIframe = function () {
            return window.parent !== window;
        };
        /**
         * Returns boolean of whether or not the current window is a popup opened by msal
         */
        BrowserUtils.isInPopup = function () {
            return typeof window !== "undefined" && !!window.opener &&
                window.opener !== window &&
                typeof window.name === "string" &&
                window.name.indexOf(BrowserConstants.POPUP_NAME_PREFIX + ".") === 0;
        };
        // #endregion
        /**
         * Returns current window URL as redirect uri
         */
        BrowserUtils.getCurrentUri = function () {
            return window.location.href.split("?")[0].split("#")[0];
        };
        /**
         * Gets the homepage url for the current window location.
         */
        BrowserUtils.getHomepage = function () {
            var currentUrl = new UrlString(window.location.href);
            var urlComponents = currentUrl.getUrlComponents();
            return urlComponents.Protocol + "//" + urlComponents.HostNameAndPort + "/";
        };
        /**
         * Returns best compatible network client object.
         */
        BrowserUtils.getBrowserNetworkClient = function () {
            if (window.fetch && window.Headers) {
                return new FetchClient();
            }
            else {
                return new XhrClient();
            }
        };
        /**
         * Throws error if we have completed an auth and are
         * attempting another auth request inside an iframe.
         */
        BrowserUtils.blockReloadInHiddenIframes = function () {
            var isResponseHash = UrlString.hashContainsKnownProperties(window.location.hash);
            // return an error if called from the hidden iframe created by the msal js silent calls
            if (isResponseHash && BrowserUtils.isInIframe()) {
                throw BrowserAuthError.createBlockReloadInHiddenIframeError();
            }
        };
        /**
         * Block redirect operations in iframes unless explicitly allowed
         * @param interactionType Interaction type for the request
         * @param allowRedirectInIframe Config value to allow redirects when app is inside an iframe
         */
        BrowserUtils.blockRedirectInIframe = function (interactionType, allowRedirectInIframe) {
            var isIframedApp = BrowserUtils.isInIframe();
            if (interactionType === exports.InteractionType.Redirect && isIframedApp && !allowRedirectInIframe) {
                // If we are not in top frame, we shouldn't redirect. This is also handled by the service.
                throw BrowserAuthError.createRedirectInIframeError(isIframedApp);
            }
        };
        /**
         * Block redirectUri loaded in popup from calling AcquireToken APIs
         */
        BrowserUtils.blockAcquireTokenInPopups = function () {
            // Popups opened by msal popup APIs are given a name that starts with "msal."
            if (BrowserUtils.isInPopup()) {
                throw BrowserAuthError.createBlockAcquireTokenInPopupsError();
            }
        };
        /**
         * Throws error if token requests are made in non-browser environment
         * @param isBrowserEnvironment Flag indicating if environment is a browser.
         */
        BrowserUtils.blockNonBrowserEnvironment = function (isBrowserEnvironment) {
            if (!isBrowserEnvironment) {
                throw BrowserAuthError.createNonBrowserEnvironmentError();
            }
        };
        /**
         * Throws error if native brokering is enabled but initialize hasn't been called
         * @param allowNativeBroker
         * @param initialized
         */
        BrowserUtils.blockNativeBrokerCalledBeforeInitialized = function (allowNativeBroker, initialized) {
            if (allowNativeBroker && !initialized) {
                throw BrowserAuthError.createNativeBrokerCalledBeforeInitialize();
            }
        };
        /**
         * Returns boolean of whether current browser is an Internet Explorer or Edge browser.
         */
        BrowserUtils.detectIEOrEdge = function () {
            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");
            var msie11 = ua.indexOf("Trident/");
            var msedge = ua.indexOf("Edge/");
            var isIE = msie > 0 || msie11 > 0;
            var isEdge = msedge > 0;
            return isIE || isEdge;
        };
        return BrowserUtils;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BaseInteractionClient = /** @class */ (function () {
        function BaseInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) {
            this.config = config;
            this.browserStorage = storageImpl;
            this.browserCrypto = browserCrypto;
            this.networkClient = this.config.system.networkClient;
            this.eventHandler = eventHandler;
            this.navigationClient = navigationClient;
            this.nativeMessageHandler = nativeMessageHandler;
            this.correlationId = correlationId || this.browserCrypto.createNewGuid();
            this.logger = logger.clone(BrowserConstants.MSAL_SKU, version$1, this.correlationId);
            this.performanceClient = performanceClient;
        }
        BaseInteractionClient.prototype.clearCacheOnLogout = function (account) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!account) return [3 /*break*/, 5];
                            if (AccountEntity.accountInfoIsEqual(account, this.browserStorage.getActiveAccount(), false)) {
                                this.logger.verbose("Setting active account to null");
                                this.browserStorage.setActiveAccount(null);
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.browserStorage.removeAccount(AccountEntity.generateAccountCacheKey(account))];
                        case 2:
                            _a.sent();
                            this.logger.verbose("Cleared cache items belonging to the account provided in the logout request.");
                            return [3 /*break*/, 4];
                        case 3:
                            _a.sent();
                            this.logger.error("Account provided in logout request was not found. Local cache unchanged.");
                            return [3 /*break*/, 4];
                        case 4: return [3 /*break*/, 9];
                        case 5:
                            _a.trys.push([5, 8, , 9]);
                            this.logger.verbose("No account provided in logout request, clearing all cache items.", this.correlationId);
                            // Clear all accounts and tokens
                            return [4 /*yield*/, this.browserStorage.clear()];
                        case 6:
                            // Clear all accounts and tokens
                            _a.sent();
                            // Clear any stray keys from IndexedDB
                            return [4 /*yield*/, this.browserCrypto.clearKeystore()];
                        case 7:
                            // Clear any stray keys from IndexedDB
                            _a.sent();
                            return [3 /*break*/, 9];
                        case 8:
                            _a.sent();
                            this.logger.error("Attempted to clear all MSAL cache items and failed. Local cache unchanged.");
                            return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Initializer function for all request APIs
         * @param request
         */
        BaseInteractionClient.prototype.initializeBaseRequest = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var authority, scopes, validatedRequest, _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeBaseRequest, request.correlationId);
                            this.logger.verbose("Initializing BaseAuthRequest");
                            authority = request.authority || this.config.auth.authority;
                            scopes = __spread(((request && request.scopes) || []));
                            validatedRequest = __assign$1(__assign$1({}, request), { correlationId: this.correlationId, authority: authority,
                                scopes: scopes });
                            // Set authenticationScheme to BEARER if not explicitly set in the request
                            if (!validatedRequest.authenticationScheme) {
                                validatedRequest.authenticationScheme = exports.AuthenticationScheme.BEARER;
                                this.logger.verbose("Authentication Scheme wasn't explicitly set in request, defaulting to \"Bearer\" request");
                            }
                            else {
                                if (validatedRequest.authenticationScheme === exports.AuthenticationScheme.SSH) {
                                    if (!request.sshJwk) {
                                        throw ClientConfigurationError.createMissingSshJwkError();
                                    }
                                    if (!request.sshKid) {
                                        throw ClientConfigurationError.createMissingSshKidError();
                                    }
                                }
                                this.logger.verbose("Authentication Scheme set to \"" + validatedRequest.authenticationScheme + "\" as configured in Auth request");
                            }
                            if (!(request.claims && !StringUtils.isEmpty(request.claims))) return [3 /*break*/, 2];
                            _a = validatedRequest;
                            return [4 /*yield*/, this.browserCrypto.hashString(request.claims)];
                        case 1:
                            _a.requestedClaimsHash = _b.sent();
                            _b.label = 2;
                        case 2: return [2 /*return*/, validatedRequest];
                    }
                });
            });
        };
        /**
         *
         * Use to get the redirect uri configured in MSAL or null.
         * @param requestRedirectUri
         * @returns Redirect URL
         *
         */
        BaseInteractionClient.prototype.getRedirectUri = function (requestRedirectUri) {
            this.logger.verbose("getRedirectUri called");
            var redirectUri = requestRedirectUri || this.config.auth.redirectUri || BrowserUtils.getCurrentUri();
            return UrlString.getAbsoluteUrl(redirectUri, BrowserUtils.getCurrentUri());
        };
        /**
         *
         * @param apiId
         * @param correlationId
         * @param forceRefresh
         */
        BaseInteractionClient.prototype.initializeServerTelemetryManager = function (apiId, forceRefresh) {
            this.logger.verbose("initializeServerTelemetryManager called");
            var telemetryPayload = {
                clientId: this.config.auth.clientId,
                correlationId: this.correlationId,
                apiId: apiId,
                forceRefresh: forceRefresh || false,
                wrapperSKU: this.browserStorage.getWrapperMetadata()[0],
                wrapperVer: this.browserStorage.getWrapperMetadata()[1]
            };
            return new ServerTelemetryManager(telemetryPayload, this.browserStorage);
        };
        /**
         * Used to get a discovered version of the default authority.
         * @param requestAuthority
         * @param requestCorrelationId
         */
        BaseInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority) {
            return __awaiter$1(this, void 0, void 0, function () {
                var authorityOptions;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("getDiscoveredAuthority called");
                            authorityOptions = {
                                protocolMode: this.config.auth.protocolMode,
                                knownAuthorities: this.config.auth.knownAuthorities,
                                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                                authorityMetadata: this.config.auth.authorityMetadata
                            };
                            if (!requestAuthority) return [3 /*break*/, 2];
                            this.logger.verbose("Creating discovered authority with request authority");
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(requestAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            this.logger.verbose("Creating discovered authority with configured authority");
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(this.config.auth.authority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger)];
                        case 3: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return BaseInteractionClient;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Defines the class structure and helper functions used by the "standard", non-brokered auth flows (popup, redirect, silent (RT), silent (iframe))
     */
    var StandardInteractionClient = /** @class */ (function (_super) {
        __extends$1(StandardInteractionClient, _super);
        function StandardInteractionClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Generates an auth code request tied to the url request.
         * @param request
         */
        StandardInteractionClient.prototype.initializeAuthorizationCodeRequest = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var generatedPkceParams, authCodeRequest;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);
                            this.logger.verbose("initializeAuthorizationRequest called", request.correlationId);
                            return [4 /*yield*/, this.browserCrypto.generatePkceCodes()];
                        case 1:
                            generatedPkceParams = _a.sent();
                            authCodeRequest = __assign$1(__assign$1({}, request), { redirectUri: request.redirectUri, code: Constants.EMPTY_STRING, codeVerifier: generatedPkceParams.verifier });
                            request.codeChallenge = generatedPkceParams.challenge;
                            request.codeChallengeMethod = Constants.S256_CODE_CHALLENGE_METHOD;
                            return [2 /*return*/, authCodeRequest];
                    }
                });
            });
        };
        /**
         * Initializer for the logout request.
         * @param logoutRequest
         */
        StandardInteractionClient.prototype.initializeLogoutRequest = function (logoutRequest) {
            this.logger.verbose("initializeLogoutRequest called", logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.correlationId);
            var validLogoutRequest = __assign$1({ correlationId: this.correlationId || this.browserCrypto.createNewGuid() }, logoutRequest);
            /**
             * Set logout_hint to be login_hint from ID Token Claims if present
             * and logoutHint attribute wasn't manually set in logout request
             */
            if (logoutRequest) {
                // If logoutHint isn't set and an account was passed in, try to extract logoutHint from ID Token Claims
                if (!logoutRequest.logoutHint) {
                    if (logoutRequest.account) {
                        var logoutHint = this.getLogoutHintFromIdTokenClaims(logoutRequest.account);
                        if (logoutHint) {
                            this.logger.verbose("Setting logoutHint to login_hint ID Token Claim value for the account provided");
                            validLogoutRequest.logoutHint = logoutHint;
                        }
                    }
                    else {
                        this.logger.verbose("logoutHint was not set and account was not passed into logout request, logoutHint will not be set");
                    }
                }
                else {
                    this.logger.verbose("logoutHint has already been set in logoutRequest");
                }
            }
            else {
                this.logger.verbose("logoutHint will not be set since no logout request was configured");
            }
            /*
             * Only set redirect uri if logout request isn't provided or the set uri isn't null.
             * Otherwise, use passed uri, config, or current page.
             */
            if (!logoutRequest || logoutRequest.postLogoutRedirectUri !== null) {
                if (logoutRequest && logoutRequest.postLogoutRedirectUri) {
                    this.logger.verbose("Setting postLogoutRedirectUri to uri set on logout request", validLogoutRequest.correlationId);
                    validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(logoutRequest.postLogoutRedirectUri, BrowserUtils.getCurrentUri());
                }
                else if (this.config.auth.postLogoutRedirectUri === null) {
                    this.logger.verbose("postLogoutRedirectUri configured as null and no uri set on request, not passing post logout redirect", validLogoutRequest.correlationId);
                }
                else if (this.config.auth.postLogoutRedirectUri) {
                    this.logger.verbose("Setting postLogoutRedirectUri to configured uri", validLogoutRequest.correlationId);
                    validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(this.config.auth.postLogoutRedirectUri, BrowserUtils.getCurrentUri());
                }
                else {
                    this.logger.verbose("Setting postLogoutRedirectUri to current page", validLogoutRequest.correlationId);
                    validLogoutRequest.postLogoutRedirectUri = UrlString.getAbsoluteUrl(BrowserUtils.getCurrentUri(), BrowserUtils.getCurrentUri());
                }
            }
            else {
                this.logger.verbose("postLogoutRedirectUri passed as null, not setting post logout redirect uri", validLogoutRequest.correlationId);
            }
            return validLogoutRequest;
        };
        /**
         * Parses login_hint ID Token Claim out of AccountInfo object to be used as
         * logout_hint in end session request.
         * @param account
         */
        StandardInteractionClient.prototype.getLogoutHintFromIdTokenClaims = function (account) {
            var idTokenClaims = account.idTokenClaims;
            if (idTokenClaims) {
                if (idTokenClaims.login_hint) {
                    return idTokenClaims.login_hint;
                }
                else {
                    this.logger.verbose("The ID Token Claims tied to the provided account do not contain a login_hint claim, logoutHint will not be added to logout request");
                }
            }
            else {
                this.logger.verbose("The provided account does not contain ID Token Claims, logoutHint will not be added to logout request");
            }
            return null;
        };
        /**
         * Creates an Authorization Code Client with the given authority, or the default authority.
         * @param serverTelemetryManager
         * @param authorityUrl
         */
        StandardInteractionClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl, requestAzureCloudOptions) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.correlationId);
                            // Create auth module.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);
                            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, requestAzureCloudOptions)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new AuthorizationCodeClient(clientConfig, this.performanceClient)];
                    }
                });
            });
        };
        /**
         * Creates a Client Configuration object with the given request authority, or the default authority.
         * @param serverTelemetryManager
         * @param requestAuthority
         * @param requestCorrelationId
         */
        StandardInteractionClient.prototype.getClientConfiguration = function (serverTelemetryManager, requestAuthority, requestAzureCloudOptions) {
            return __awaiter$1(this, void 0, void 0, function () {
                var discoveredAuthority, logger;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);
                            this.logger.verbose("getClientConfiguration called", this.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);
                            return [4 /*yield*/, this.getDiscoveredAuthority(requestAuthority, requestAzureCloudOptions)];
                        case 1:
                            discoveredAuthority = _a.sent();
                            logger = this.config.system.loggerOptions;
                            return [2 /*return*/, {
                                    authOptions: {
                                        clientId: this.config.auth.clientId,
                                        authority: discoveredAuthority,
                                        clientCapabilities: this.config.auth.clientCapabilities
                                    },
                                    systemOptions: {
                                        tokenRenewalOffsetSeconds: this.config.system.tokenRenewalOffsetSeconds,
                                        preventCorsPreflight: true
                                    },
                                    loggerOptions: {
                                        loggerCallback: logger.loggerCallback,
                                        piiLoggingEnabled: logger.piiLoggingEnabled,
                                        logLevel: logger.logLevel,
                                        correlationId: this.correlationId
                                    },
                                    cryptoInterface: this.browserCrypto,
                                    networkInterface: this.networkClient,
                                    storageInterface: this.browserStorage,
                                    serverTelemetryManager: serverTelemetryManager,
                                    libraryInfo: {
                                        sku: BrowserConstants.MSAL_SKU,
                                        version: version$1,
                                        cpu: Constants.EMPTY_STRING,
                                        os: Constants.EMPTY_STRING
                                    },
                                    telemetry: this.config.telemetry
                                }];
                    }
                });
            });
        };
        /**
         * @param hash
         * @param interactionType
         */
        StandardInteractionClient.prototype.validateAndExtractStateFromHash = function (serverParams, interactionType, requestCorrelationId) {
            this.logger.verbose("validateAndExtractStateFromHash called", requestCorrelationId);
            if (!serverParams.state) {
                throw BrowserAuthError.createHashDoesNotContainStateError();
            }
            var platformStateObj = BrowserProtocolUtils.extractBrowserRequestState(this.browserCrypto, serverParams.state);
            if (!platformStateObj) {
                throw BrowserAuthError.createUnableToParseStateError();
            }
            if (platformStateObj.interactionType !== interactionType) {
                throw BrowserAuthError.createStateInteractionTypeMismatchError();
            }
            this.logger.verbose("Returning state from hash", requestCorrelationId);
            return serverParams.state;
        };
        /**
         * Used to get a discovered version of the default authority.
         * @param requestAuthority
         * @param requestCorrelationId
         */
        StandardInteractionClient.prototype.getDiscoveredAuthority = function (requestAuthority, requestAzureCloudOptions) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var getAuthorityMeasurement, authorityOptions, userAuthority, builtAuthority;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);
                            this.logger.verbose("getDiscoveredAuthority called", this.correlationId);
                            getAuthorityMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.correlationId);
                            authorityOptions = {
                                protocolMode: this.config.auth.protocolMode,
                                knownAuthorities: this.config.auth.knownAuthorities,
                                cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                                authorityMetadata: this.config.auth.authorityMetadata,
                                skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache
                            };
                            userAuthority = requestAuthority ? requestAuthority : this.config.auth.authority;
                            builtAuthority = Authority.generateAuthority(userAuthority, requestAzureCloudOptions || this.config.auth.azureCloudOptions);
                            this.logger.verbose("Creating discovered authority with configured authority", this.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, this.correlationId);
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(builtAuthority, this.config.system.networkClient, this.browserStorage, authorityOptions, this.logger, this.performanceClient, this.correlationId)
                                    .then(function (result) {
                                    getAuthorityMeasurement.endMeasurement({
                                        success: true,
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    getAuthorityMeasurement.endMeasurement({
                                        errorCode: error.errorCode,
                                        subErrorCode: error.subError,
                                        success: false
                                    });
                                    throw error;
                                })];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        /**
         * Helper to initialize required request parameters for interactive APIs and ssoSilent()
         * @param request
         * @param interactionType
         */
        StandardInteractionClient.prototype.initializeAuthorizationRequest = function (request, interactionType) {
            return __awaiter$1(this, void 0, void 0, function () {
                var redirectUri, browserState, state, validatedRequest, _a, account, legacyLoginHint;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.correlationId);
                            this.logger.verbose("initializeAuthorizationRequest called", this.correlationId);
                            redirectUri = this.getRedirectUri(request.redirectUri);
                            browserState = {
                                interactionType: interactionType
                            };
                            state = ProtocolUtils.setRequestState(this.browserCrypto, (request && request.state) || Constants.EMPTY_STRING, browserState);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);
                            _a = [{}];
                            return [4 /*yield*/, this.initializeBaseRequest(request)];
                        case 1:
                            validatedRequest = __assign$1.apply(void 0, [__assign$1.apply(void 0, _a.concat([_b.sent()])), { redirectUri: redirectUri, state: state, nonce: request.nonce || this.browserCrypto.createNewGuid(), responseMode: ResponseMode.FRAGMENT }]);
                            account = request.account || this.browserStorage.getActiveAccount();
                            if (account) {
                                this.logger.verbose("Setting validated request account", this.correlationId);
                                this.logger.verbosePii("Setting validated request account: " + account.homeAccountId, this.correlationId);
                                validatedRequest.account = account;
                            }
                            // Check for ADAL/MSAL v1 SSO
                            if (StringUtils.isEmpty(validatedRequest.loginHint) && !account) {
                                legacyLoginHint = this.browserStorage.getLegacyLoginHint();
                                if (legacyLoginHint) {
                                    validatedRequest.loginHint = legacyLoginHint;
                                }
                            }
                            return [2 /*return*/, validatedRequest];
                    }
                });
            });
        };
        return StandardInteractionClient;
    }(BaseInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Abstract class which defines operations for a browser interaction handling class.
     */
    var InteractionHandler = /** @class */ (function () {
        function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) {
            this.authModule = authCodeModule;
            this.browserStorage = storageImpl;
            this.authCodeRequest = authCodeRequest;
            this.logger = logger;
            this.performanceClient = performanceClient;
        }
        /**
         * Function to handle response parameters from hash.
         * @param locationHash
         */
        InteractionHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {
            return __awaiter$1(this, void 0, void 0, function () {
                var stateKey, requestState, authCodeResponse;
                return __generator$1(this, function (_a) {
                    this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromHash, this.authCodeRequest.correlationId);
                    this.logger.verbose("InteractionHandler.handleCodeResponse called");
                    // Check that location hash isn't empty.
                    if (StringUtils.isEmpty(locationHash)) {
                        throw BrowserAuthError.createEmptyHashError(locationHash);
                    }
                    stateKey = this.browserStorage.generateStateKey(state);
                    requestState = this.browserStorage.getTemporaryCache(stateKey);
                    if (!requestState) {
                        throw ClientAuthError.createStateNotFoundError("Cached State");
                    }
                    try {
                        authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                    }
                    catch (e) {
                        if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {
                            // Translate server error caused by user closing native prompt to corresponding first class MSAL error
                            throw BrowserAuthError.createUserCancelledError();
                        }
                        else {
                            throw e;
                        }
                    }
                    this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);
                    return [2 /*return*/, this.handleCodeResponseFromServer(authCodeResponse, state, authority, networkModule)];
                });
            });
        };
        /**
         * Process auth code response from AAD
         * @param authCodeResponse
         * @param state
         * @param authority
         * @param networkModule
         * @returns
         */
        InteractionHandler.prototype.handleCodeResponseFromServer = function (authCodeResponse, state, authority, networkModule, validateNonce) {
            if (validateNonce === void 0) { validateNonce = true; }
            return __awaiter$1(this, void 0, void 0, function () {
                var stateKey, requestState, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.HandleCodeResponseFromServer, this.authCodeRequest.correlationId);
                            this.logger.trace("InteractionHandler.handleCodeResponseFromServer called");
                            stateKey = this.browserStorage.generateStateKey(state);
                            requestState = this.browserStorage.getTemporaryCache(stateKey);
                            if (!requestState) {
                                throw ClientAuthError.createStateNotFoundError("Cached State");
                            }
                            nonceKey = this.browserStorage.generateNonceKey(requestState);
                            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                            // Assign code to request
                            this.authCodeRequest.code = authCodeResponse.code;
                            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                            this.performanceClient.setPreQueueTime(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);
                            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            // Nonce validation not needed when redirect not involved (e.g. hybrid spa, renewing token via rt)
                            if (validateNonce) {
                                authCodeResponse.nonce = cachedNonce || undefined;
                            }
                            authCodeResponse.state = requestState;
                            // Add CCS parameters if available
                            if (authCodeResponse.client_info) {
                                this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                            }
                            else {
                                cachedCcsCred = this.checkCcsCredentials();
                                if (cachedCcsCred) {
                                    this.authCodeRequest.ccsCredential = cachedCcsCred;
                                }
                            }
                            // Acquire token with retrieved code.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.AuthClientAcquireToken, this.authCodeRequest.correlationId);
                            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                        case 3:
                            tokenResponse = _a.sent();
                            this.browserStorage.cleanRequestByState(state);
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        /**
         * Updates authority based on cloudInstanceHostname
         * @param cloudInstanceHostname
         * @param authority
         * @param networkModule
         */
        InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {
            return __awaiter$1(this, void 0, void 0, function () {
                var cloudInstanceAuthorityUri, cloudInstanceAuthority;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, this.authCodeRequest.correlationId);
                            cloudInstanceAuthorityUri = "https://" + cloudInstanceHostname + "/" + authority.tenant + "/";
                            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options, this.logger, this.performanceClient, this.authCodeRequest.correlationId)];
                        case 1:
                            cloudInstanceAuthority = _a.sent();
                            this.authModule.updateAuthority(cloudInstanceAuthority);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Looks up ccs creds in the cache
         */
        InteractionHandler.prototype.checkCcsCredentials = function () {
            // Look up ccs credential in temp cache
            var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);
            if (cachedCcsCred) {
                try {
                    return JSON.parse(cachedCcsCred);
                }
                catch (e) {
                    this.authModule.logger.error("Cache credential could not be parsed");
                    this.authModule.logger.errorPii("Cache credential could not be parsed: " + cachedCcsCred);
                }
            }
            return null;
        };
        return InteractionHandler;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RedirectHandler = /** @class */ (function (_super) {
        __extends$1(RedirectHandler, _super);
        function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, logger, browserCrypto, performanceClient) {
            var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) || this;
            _this.browserCrypto = browserCrypto;
            return _this;
        }
        /**
         * Redirects window to given URL.
         * @param urlNavigate
         */
        RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {
            return __awaiter$1(this, void 0, void 0, function () {
                var navigationOptions, navigate;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("RedirectHandler.initiateAuthRequest called");
                            if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];
                            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true
                            if (params.redirectStartPage) {
                                this.logger.verbose("RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page");
                                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);
                            }
                            // Set interaction status in the library.
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, this.authCodeRequest.correlationId, true);
                            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);
                            this.logger.infoPii("RedirectHandler.initiateAuthRequest: Navigate to: " + requestUrl);
                            navigationOptions = {
                                apiId: exports.ApiId.acquireTokenRedirect,
                                timeout: params.redirectTimeout,
                                noHistory: false
                            };
                            if (!(typeof params.onRedirectNavigate === "function")) return [3 /*break*/, 4];
                            this.logger.verbose("RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback");
                            navigate = params.onRedirectNavigate(requestUrl);
                            if (!(navigate !== false)) return [3 /*break*/, 2];
                            this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating");
                            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                        case 2:
                            this.logger.verbose("RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation");
                            return [2 /*return*/];
                        case 3: return [3 /*break*/, 6];
                        case 4:
                            // Navigate window to request URL
                            this.logger.verbose("RedirectHandler.initiateAuthRequest: Navigating window to navigate url");
                            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];
                        case 5:
                            _a.sent();
                            return [2 /*return*/];
                        case 6: return [3 /*break*/, 8];
                        case 7:
                            // Throw error if request URL is empty.
                            this.logger.info("RedirectHandler.initiateAuthRequest: Navigate url is empty");
                            throw BrowserAuthError.createEmptyNavigationUriError();
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Handle authorization code response in the window.
         * @param hash
         */
        RedirectHandler.prototype.handleCodeResponseFromHash = function (locationHash, state, authority, networkModule) {
            return __awaiter$1(this, void 0, void 0, function () {
                var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("RedirectHandler.handleCodeResponse called");
                            // Check that location hash isn't empty.
                            if (StringUtils.isEmpty(locationHash)) {
                                throw BrowserAuthError.createEmptyHashError(locationHash);
                            }
                            // Interaction is completed - remove interaction status.
                            this.browserStorage.setInteractionInProgress(false);
                            stateKey = this.browserStorage.generateStateKey(state);
                            requestState = this.browserStorage.getTemporaryCache(stateKey);
                            if (!requestState) {
                                throw ClientAuthError.createStateNotFoundError("Cached State");
                            }
                            try {
                                authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);
                            }
                            catch (e) {
                                if (e instanceof ServerError && e.subError === BrowserAuthErrorMessage.userCancelledError.code) {
                                    // Translate server error caused by user closing native prompt to corresponding first class MSAL error
                                    throw BrowserAuthError.createUserCancelledError();
                                }
                                else {
                                    throw e;
                                }
                            }
                            nonceKey = this.browserStorage.generateNonceKey(requestState);
                            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);
                            // Assign code to request
                            this.authCodeRequest.code = authCodeResponse.code;
                            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            authCodeResponse.nonce = cachedNonce || undefined;
                            authCodeResponse.state = requestState;
                            // Add CCS parameters if available
                            if (authCodeResponse.client_info) {
                                this.authCodeRequest.clientInfo = authCodeResponse.client_info;
                            }
                            else {
                                cachedCcsCred = this.checkCcsCredentials();
                                if (cachedCcsCred) {
                                    this.authCodeRequest.ccsCredential = cachedCcsCred;
                                }
                            }
                            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];
                        case 3:
                            tokenResponse = _a.sent();
                            this.browserStorage.cleanRequestByState(state);
                            return [2 /*return*/, tokenResponse];
                    }
                });
            });
        };
        return RedirectHandler;
    }(InteractionHandler));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    exports.EventType = void 0;
    (function (EventType) {
        EventType["INITIALIZE_START"] = "msal:initializeStart";
        EventType["INITIALIZE_END"] = "msal:initializeEnd";
        EventType["ACCOUNT_ADDED"] = "msal:accountAdded";
        EventType["ACCOUNT_REMOVED"] = "msal:accountRemoved";
        EventType["LOGIN_START"] = "msal:loginStart";
        EventType["LOGIN_SUCCESS"] = "msal:loginSuccess";
        EventType["LOGIN_FAILURE"] = "msal:loginFailure";
        EventType["ACQUIRE_TOKEN_START"] = "msal:acquireTokenStart";
        EventType["ACQUIRE_TOKEN_SUCCESS"] = "msal:acquireTokenSuccess";
        EventType["ACQUIRE_TOKEN_FAILURE"] = "msal:acquireTokenFailure";
        EventType["ACQUIRE_TOKEN_NETWORK_START"] = "msal:acquireTokenFromNetworkStart";
        EventType["SSO_SILENT_START"] = "msal:ssoSilentStart";
        EventType["SSO_SILENT_SUCCESS"] = "msal:ssoSilentSuccess";
        EventType["SSO_SILENT_FAILURE"] = "msal:ssoSilentFailure";
        EventType["ACQUIRE_TOKEN_BY_CODE_START"] = "msal:acquireTokenByCodeStart";
        EventType["ACQUIRE_TOKEN_BY_CODE_SUCCESS"] = "msal:acquireTokenByCodeSuccess";
        EventType["ACQUIRE_TOKEN_BY_CODE_FAILURE"] = "msal:acquireTokenByCodeFailure";
        EventType["HANDLE_REDIRECT_START"] = "msal:handleRedirectStart";
        EventType["HANDLE_REDIRECT_END"] = "msal:handleRedirectEnd";
        EventType["POPUP_OPENED"] = "msal:popupOpened";
        EventType["LOGOUT_START"] = "msal:logoutStart";
        EventType["LOGOUT_SUCCESS"] = "msal:logoutSuccess";
        EventType["LOGOUT_FAILURE"] = "msal:logoutFailure";
        EventType["LOGOUT_END"] = "msal:logoutEnd";
    })(exports.EventType || (exports.EventType = {}));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NativeStatusCode;
    (function (NativeStatusCode) {
        NativeStatusCode["USER_INTERACTION_REQUIRED"] = "USER_INTERACTION_REQUIRED";
        NativeStatusCode["USER_CANCEL"] = "USER_CANCEL";
        NativeStatusCode["NO_NETWORK"] = "NO_NETWORK";
        NativeStatusCode["TRANSIENT_ERROR"] = "TRANSIENT_ERROR";
        NativeStatusCode["PERSISTENT_ERROR"] = "PERSISTENT_ERROR";
        NativeStatusCode["DISABLED"] = "DISABLED";
        NativeStatusCode["ACCOUNT_UNAVAILABLE"] = "ACCOUNT_UNAVAILABLE";
    })(NativeStatusCode || (NativeStatusCode = {}));
    var NativeAuthErrorMessage = {
        extensionError: {
            code: "ContentError"
        },
        userSwitch: {
            code: "user_switch",
            desc: "User attempted to switch accounts in the native broker, which is not allowed. All new accounts must sign-in through the standard web flow first, please try again."
        },
        tokensNotFoundInCache: {
            code: "tokens_not_found_in_internal_memory_cache",
            desc: "Tokens not cached in MSAL JS internal memory, please make the WAM request"
        }
    };
    var NativeAuthError = /** @class */ (function (_super) {
        __extends$1(NativeAuthError, _super);
        function NativeAuthError(errorCode, description, ext) {
            var _this = _super.call(this, errorCode, description) || this;
            Object.setPrototypeOf(_this, NativeAuthError.prototype);
            _this.name = "NativeAuthError";
            _this.ext = ext;
            return _this;
        }
        /**
         * These errors should result in a fallback to the 'standard' browser based auth flow.
         */
        NativeAuthError.prototype.isFatal = function () {
            if (this.ext && this.ext.status && (this.ext.status === NativeStatusCode.PERSISTENT_ERROR || this.ext.status === NativeStatusCode.DISABLED)) {
                return true;
            }
            switch (this.errorCode) {
                case NativeAuthErrorMessage.extensionError.code:
                    return true;
                default:
                    return false;
            }
        };
        /**
         * Create the appropriate error object based on the WAM status code.
         * @param code
         * @param description
         * @param ext
         * @returns
         */
        NativeAuthError.createError = function (code, description, ext) {
            if (ext && ext.status) {
                switch (ext.status) {
                    case NativeStatusCode.ACCOUNT_UNAVAILABLE:
                        return InteractionRequiredAuthError.createNativeAccountUnavailableError();
                    case NativeStatusCode.USER_INTERACTION_REQUIRED:
                        return new InteractionRequiredAuthError(code, description);
                    case NativeStatusCode.USER_CANCEL:
                        return BrowserAuthError.createUserCancelledError();
                    case NativeStatusCode.NO_NETWORK:
                        return BrowserAuthError.createNoNetworkConnectivityError();
                }
            }
            return new NativeAuthError(code, description, ext);
        };
        /**
         * Creates user switch error when the user chooses a different account in the native broker prompt
         * @returns
         */
        NativeAuthError.createUserSwitchError = function () {
            return new NativeAuthError(NativeAuthErrorMessage.userSwitch.code, NativeAuthErrorMessage.userSwitch.desc);
        };
        /**
         * Creates a tokens not found error when the internal cache look up fails
         * @returns NativeAuthError: tokensNotFoundInCache
         */
        NativeAuthError.createTokensNotFoundInCacheError = function () {
            return new NativeAuthError(NativeAuthErrorMessage.tokensNotFoundInCache.code, NativeAuthErrorMessage.tokensNotFoundInCache.desc);
        };
        return NativeAuthError;
    }(AuthError));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentCacheClient = /** @class */ (function (_super) {
        __extends$1(SilentCacheClient, _super);
        function SilentCacheClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Returns unexpired tokens from the cache, if available
         * @param silentRequest
         */
        SilentCacheClient.prototype.acquireToken = function (silentRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var acquireTokenMeasurement, serverTelemetryManager, silentAuthClient, cachedToken, error_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentCacheClientAcquireToken, silentRequest.correlationId);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenSilent_silentFlow);
                            return [4 /*yield*/, this.createSilentFlowClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                        case 1:
                            silentAuthClient = _a.sent();
                            this.logger.verbose("Silent auth client created");
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, silentAuthClient.acquireCachedToken(silentRequest)];
                        case 3:
                            cachedToken = _a.sent();
                            acquireTokenMeasurement.endMeasurement({
                                success: true,
                                fromCache: true
                            });
                            return [2 /*return*/, cachedToken];
                        case 4:
                            error_1 = _a.sent();
                            if (error_1 instanceof BrowserAuthError && error_1.errorCode === BrowserAuthErrorMessage.signingKeyNotFoundInStorage.code) {
                                this.logger.verbose("Signing keypair for bound access token not found. Refreshing bound access token and generating a new crypto keypair.");
                            }
                            acquireTokenMeasurement.endMeasurement({
                                errorCode: error_1 instanceof AuthError && error_1.errorCode || undefined,
                                subErrorCode: error_1 instanceof AuthError && error_1.subError || undefined,
                                success: false
                            });
                            throw error_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Currently Unsupported
         */
        SilentCacheClient.prototype.logout = function () {
            // Synchronous so we must reject
            return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());
        };
        /**
         * Creates an Silent Flow Client with the given authority, or the default authority.
         * @param serverTelemetryManager
         * @param authorityUrl
         */
        SilentCacheClient.prototype.createSilentFlowClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Create auth module.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);
                            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new SilentFlowClient(clientConfig, this.performanceClient)];
                    }
                });
            });
        };
        SilentCacheClient.prototype.initializeSilentRequest = function (request, account) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _a;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.InitializeSilentRequest, this.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, this.correlationId);
                            _a = [__assign$1({}, request)];
                            return [4 /*yield*/, this.initializeBaseRequest(request)];
                        case 1: return [2 /*return*/, __assign$1.apply(void 0, [__assign$1.apply(void 0, _a.concat([_b.sent()])), { account: account, forceRefresh: request.forceRefresh || false }])];
                    }
                });
            });
        };
        return SilentCacheClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NativeInteractionClient = /** @class */ (function (_super) {
        __extends$1(NativeInteractionClient, _super);
        function NativeInteractionClient(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId) {
            var _this = _super.call(this, config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId) || this;
            _this.apiId = apiId;
            _this.accountId = accountId;
            _this.nativeMessageHandler = provider;
            _this.nativeStorageManager = nativeStorageImpl;
            _this.silentCacheClient = new SilentCacheClient(config, _this.nativeStorageManager, browserCrypto, logger, eventHandler, navigationClient, performanceClient, provider, correlationId);
            return _this;
        }
        /**
         * Acquire token from native platform via browser extension
         * @param request
         */
        NativeInteractionClient.prototype.acquireToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var nativeATMeasurement, reqTimestamp, nativeRequest, result, messageBody, response, validatedResponse;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("NativeInteractionClient - acquireToken called.");
                            nativeATMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.NativeInteractionClientAcquireToken, request.correlationId);
                            reqTimestamp = TimeUtils.nowSeconds();
                            return [4 /*yield*/, this.initializeNativeRequest(request)];
                        case 1:
                            nativeRequest = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.acquireTokensFromCache(this.accountId, nativeRequest)];
                        case 3:
                            result = _a.sent();
                            nativeATMeasurement.endMeasurement({
                                success: true,
                                isNativeBroker: false,
                                fromCache: true
                            });
                            return [2 /*return*/, result];
                        case 4:
                            _a.sent();
                            // continue with a native call for any and all errors
                            this.logger.info("MSAL internal Cache does not contain tokens, proceed to make a native call");
                            return [3 /*break*/, 5];
                        case 5:
                            messageBody = {
                                method: NativeExtensionMethod.GetToken,
                                request: nativeRequest
                            };
                            return [4 /*yield*/, this.nativeMessageHandler.sendMessage(messageBody)];
                        case 6:
                            response = _a.sent();
                            validatedResponse = this.validateNativeResponse(response);
                            return [2 /*return*/, this.handleNativeResponse(validatedResponse, nativeRequest, reqTimestamp)
                                    .then(function (result) {
                                    nativeATMeasurement.endMeasurement({
                                        success: true,
                                        isNativeBroker: true,
                                        requestId: result.requestId
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    nativeATMeasurement.endMeasurement({
                                        success: false,
                                        errorCode: error.errorCode,
                                        subErrorCode: error.subError,
                                        isNativeBroker: true
                                    });
                                    throw error;
                                })];
                    }
                });
            });
        };
        /**
         * Creates silent flow request
         * @param request
         * @param cachedAccount
         * @returns CommonSilentFlowRequest
         */
        NativeInteractionClient.prototype.createSilentCacheRequest = function (request, cachedAccount) {
            return {
                authority: request.authority,
                correlationId: this.correlationId,
                scopes: ScopeSet.fromString(request.scope).asArray(),
                account: cachedAccount,
                forceRefresh: false,
            };
        };
        /**
         * Fetches the tokens from the cache if un-expired
         * @param nativeAccountId
         * @param request
         * @returns authenticationResult
         */
        NativeInteractionClient.prototype.acquireTokensFromCache = function (nativeAccountId, request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var account, silentRequest, result, e_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!nativeAccountId) {
                                this.logger.warning("NativeInteractionClient:acquireTokensFromCache - No nativeAccountId provided");
                                throw ClientAuthError.createNoAccountFoundError();
                            }
                            account = this.browserStorage.getAccountInfoFilteredBy({ nativeAccountId: nativeAccountId });
                            if (!account) {
                                throw ClientAuthError.createNoAccountFoundError();
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            silentRequest = this.createSilentCacheRequest(request, account);
                            return [4 /*yield*/, this.silentCacheClient.acquireToken(silentRequest)];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result];
                        case 3:
                            e_2 = _a.sent();
                            throw e_2;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Acquires a token from native platform then redirects to the redirectUri instead of returning the response
         * @param request
         */
        NativeInteractionClient.prototype.acquireTokenRedirect = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var nativeRequest, messageBody, response, e_3, navigationOptions, redirectUri;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("NativeInteractionClient - acquireTokenRedirect called.");
                            return [4 /*yield*/, this.initializeNativeRequest(request)];
                        case 1:
                            nativeRequest = _a.sent();
                            messageBody = {
                                method: NativeExtensionMethod.GetToken,
                                request: nativeRequest
                            };
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.nativeMessageHandler.sendMessage(messageBody)];
                        case 3:
                            response = _a.sent();
                            this.validateNativeResponse(response);
                            return [3 /*break*/, 5];
                        case 4:
                            e_3 = _a.sent();
                            // Only throw fatal errors here to allow application to fallback to regular redirect. Otherwise proceed and the error will be thrown in handleRedirectPromise
                            if (e_3 instanceof NativeAuthError && e_3.isFatal()) {
                                throw e_3;
                            }
                            return [3 /*break*/, 5];
                        case 5:
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.NATIVE_REQUEST, JSON.stringify(nativeRequest), true);
                            navigationOptions = {
                                apiId: exports.ApiId.acquireTokenRedirect,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: false
                            };
                            redirectUri = this.config.auth.navigateToLoginRequestUrl ? window.location.href : this.getRedirectUri(request.redirectUri);
                            return [4 /*yield*/, this.navigationClient.navigateExternal(redirectUri, navigationOptions)];
                        case 6:
                            _a.sent(); // Need to treat this as external to ensure handleRedirectPromise is run again
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * If the previous page called native platform for a token using redirect APIs, send the same request again and return the response
         */
        NativeInteractionClient.prototype.handleRedirectPromise = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var cachedRequest, prompt, request, messageBody, reqTimestamp, response, result, e_4;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("NativeInteractionClient - handleRedirectPromise called.");
                            if (!this.browserStorage.isInteractionInProgress(true)) {
                                this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                                return [2 /*return*/, null];
                            }
                            cachedRequest = this.browserStorage.getCachedNativeRequest();
                            if (!cachedRequest) {
                                this.logger.verbose("NativeInteractionClient - handleRedirectPromise called but there is no cached request, returning null.");
                                return [2 /*return*/, null];
                            }
                            prompt = cachedRequest.prompt, request = __rest(cachedRequest, ["prompt"]);
                            if (prompt) {
                                this.logger.verbose("NativeInteractionClient - handleRedirectPromise called and prompt was included in the original request, removing prompt from cached request to prevent second interaction with native broker window.");
                            }
                            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.NATIVE_REQUEST));
                            messageBody = {
                                method: NativeExtensionMethod.GetToken,
                                request: request
                            };
                            reqTimestamp = TimeUtils.nowSeconds();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this.logger.verbose("NativeInteractionClient - handleRedirectPromise sending message to native broker.");
                            return [4 /*yield*/, this.nativeMessageHandler.sendMessage(messageBody)];
                        case 2:
                            response = _a.sent();
                            this.validateNativeResponse(response);
                            result = this.handleNativeResponse(response, request, reqTimestamp);
                            this.browserStorage.setInteractionInProgress(false);
                            return [2 /*return*/, result];
                        case 3:
                            e_4 = _a.sent();
                            this.browserStorage.setInteractionInProgress(false);
                            throw e_4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Logout from native platform via browser extension
         * @param request
         */
        NativeInteractionClient.prototype.logout = function () {
            this.logger.trace("NativeInteractionClient - logout called.");
            return Promise.reject("Logout not implemented yet");
        };
        /**
         * Transform response from native platform into AuthenticationResult object which will be returned to the end user
         * @param response
         * @param request
         * @param reqTimestamp
         */
        NativeInteractionClient.prototype.handleNativeResponse = function (response, request, reqTimestamp) {
            return __awaiter$1(this, void 0, void 0, function () {
                var authority, authorityPreferredCache, idTokenObj, homeAccountIdentifier, accountEntity, result;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("NativeInteractionClient - handleNativeResponse called.");
                            if (response.account.id !== request.accountId) {
                                // User switch in native broker prompt is not supported. All users must first sign in through web flow to ensure server state is in sync
                                throw NativeAuthError.createUserSwitchError();
                            }
                            return [4 /*yield*/, this.getDiscoveredAuthority(request.authority)];
                        case 1:
                            authority = _a.sent();
                            authorityPreferredCache = authority.getPreferredCache();
                            idTokenObj = this.createIdTokenObj(response);
                            homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenObj);
                            accountEntity = this.createAccountEntity(response, homeAccountIdentifier, idTokenObj, authorityPreferredCache);
                            return [4 /*yield*/, this.generateAuthenticationResult(response, request, idTokenObj, accountEntity, authority.canonicalAuthority, reqTimestamp)];
                        case 2:
                            result = _a.sent();
                            // cache accounts and tokens in the appropriate storage
                            this.cacheAccount(accountEntity);
                            this.cacheNativeTokens(response, request, homeAccountIdentifier, idTokenObj, result.accessToken, result.tenantId, reqTimestamp);
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        /**
         * Create an idToken Object (not entity)
         * @param response
         * @returns
         */
        NativeInteractionClient.prototype.createIdTokenObj = function (response) {
            return new AuthToken(response.id_token || Constants.EMPTY_STRING, this.browserCrypto);
        };
        /**
         * creates an homeAccountIdentifier for the account
         * @param response
         * @param idTokenObj
         * @returns
         */
        NativeInteractionClient.prototype.createHomeAccountIdentifier = function (response, idTokenObj) {
            // Save account in browser storage
            var homeAccountIdentifier = AccountEntity.generateHomeAccountId(response.client_info || Constants.EMPTY_STRING, AuthorityType.Default, this.logger, this.browserCrypto, idTokenObj);
            return homeAccountIdentifier;
        };
        /**
         * Creates account entity
         * @param response
         * @param homeAccountIdentifier
         * @param idTokenObj
         * @param authority
         * @returns
         */
        NativeInteractionClient.prototype.createAccountEntity = function (response, homeAccountIdentifier, idTokenObj, authority) {
            return AccountEntity.createAccount(response.client_info, homeAccountIdentifier, idTokenObj, undefined, undefined, undefined, authority, response.account.id);
        };
        /**
         * Helper to generate scopes
         * @param response
         * @param request
         * @returns
         */
        NativeInteractionClient.prototype.generateScopes = function (response, request) {
            return response.scope ? ScopeSet.fromString(response.scope) : ScopeSet.fromString(request.scope);
        };
        /**
         * If PoP token is requesred, records the PoP token if returned from the WAM, else generates one in the browser
         * @param request
         * @param response
         */
        NativeInteractionClient.prototype.generatePopAccessToken = function (response, request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var popTokenGenerator, shrParameters;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(request.tokenType === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            /**
                             * This code prioritizes SHR returned from the native layer. In case of error/SHR not calculated from WAM and the AT
                             * is still received, SHR is calculated locally
                             */
                            // Check if native layer returned an SHR token
                            if (response.shr) {
                                this.logger.trace("handleNativeServerResponse: SHR is enabled in native layer");
                                return [2 /*return*/, response.shr];
                            }
                            popTokenGenerator = new PopTokenGenerator(this.browserCrypto);
                            shrParameters = {
                                resourceRequestMethod: request.resourceRequestMethod,
                                resourceRequestUri: request.resourceRequestUri,
                                shrClaims: request.shrClaims,
                                shrNonce: request.shrNonce
                            };
                            /**
                             * KeyID must be present in the native request from when the PoP key was generated in order for
                             * PopTokenGenerator to query the full key for signing
                             */
                            if (!request.keyId) {
                                throw ClientAuthError.createKeyIdMissingError();
                            }
                            return [4 /*yield*/, popTokenGenerator.signPopToken(response.access_token, request.keyId, shrParameters)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, response.access_token];
                    }
                });
            });
        };
        /**
         * Generates authentication result
         * @param response
         * @param request
         * @param idTokenObj
         * @param accountEntity
         * @param authority
         * @param reqTimestamp
         * @returns
         */
        NativeInteractionClient.prototype.generateAuthenticationResult = function (response, request, idTokenObj, accountEntity, authority, reqTimestamp) {
            return __awaiter$1(this, void 0, void 0, function () {
                var mats, responseScopes, accountProperties, uid, tid, responseAccessToken, tokenType, result;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mats = this.addTelemetryFromNativeResponse(response);
                            responseScopes = response.scope ? ScopeSet.fromString(response.scope) : ScopeSet.fromString(request.scope);
                            accountProperties = response.account.properties || {};
                            uid = accountProperties["UID"] || idTokenObj.claims.oid || idTokenObj.claims.sub || Constants.EMPTY_STRING;
                            tid = accountProperties["TenantId"] || idTokenObj.claims.tid || Constants.EMPTY_STRING;
                            return [4 /*yield*/, this.generatePopAccessToken(response, request)];
                        case 1:
                            responseAccessToken = _a.sent();
                            tokenType = (request.tokenType === exports.AuthenticationScheme.POP) ? exports.AuthenticationScheme.POP : exports.AuthenticationScheme.BEARER;
                            result = {
                                authority: authority,
                                uniqueId: uid,
                                tenantId: tid,
                                scopes: responseScopes.asArray(),
                                account: accountEntity.getAccountInfo(),
                                idToken: response.id_token,
                                idTokenClaims: idTokenObj.claims,
                                accessToken: responseAccessToken,
                                fromCache: mats ? this.isResponseFromCache(mats) : false,
                                expiresOn: new Date(Number(reqTimestamp + response.expires_in) * 1000),
                                tokenType: tokenType,
                                correlationId: this.correlationId,
                                state: response.state,
                                fromNativeBroker: true
                            };
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        /**
         * cache the account entity in browser storage
         * @param accountEntity
         */
        NativeInteractionClient.prototype.cacheAccount = function (accountEntity) {
            var _this = this;
            // Store the account info and hence `nativeAccountId` in browser cache
            this.browserStorage.setAccount(accountEntity);
            // Remove any existing cached tokens for this account in browser storage
            this.browserStorage.removeAccountContext(accountEntity).catch(function (e) {
                _this.logger.error("Error occurred while removing account context from browser storage. " + e);
            });
        };
        /**
         * Stores the access_token and id_token in inmemory storage
         * @param response
         * @param request
         * @param homeAccountIdentifier
         * @param idTokenObj
         * @param responseAccessToken
         * @param tenantId
         * @param reqTimestamp
         */
        NativeInteractionClient.prototype.cacheNativeTokens = function (response, request, homeAccountIdentifier, idTokenObj, responseAccessToken, tenantId, reqTimestamp) {
            // cache idToken in inmemory storage
            var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountIdentifier, request.authority, response.id_token || Constants.EMPTY_STRING, request.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING);
            this.nativeStorageManager.setIdTokenCredential(idTokenEntity);
            // cache accessToken in inmemory storage
            var expiresIn = (request.tokenType === exports.AuthenticationScheme.POP)
                ? Constants.SHR_NONCE_VALIDITY
                : (typeof response.expires_in === "string"
                    ? parseInt(response.expires_in, 10)
                    : response.expires_in) || 0;
            var tokenExpirationSeconds = reqTimestamp + expiresIn;
            var responseScopes = this.generateScopes(response, request);
            var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountIdentifier, request.authority, responseAccessToken, request.clientId, tenantId, responseScopes.printScopes(), tokenExpirationSeconds, 0, this.browserCrypto);
            this.nativeStorageManager.setAccessTokenCredential(accessTokenEntity);
        };
        NativeInteractionClient.prototype.addTelemetryFromNativeResponse = function (response) {
            var mats = this.getMATSFromResponse(response);
            if (!mats) {
                return null;
            }
            this.performanceClient.addStaticFields({
                extensionId: this.nativeMessageHandler.getExtensionId(),
                extensionVersion: this.nativeMessageHandler.getExtensionVersion(),
                matsBrokerVersion: mats.broker_version,
                matsAccountJoinOnStart: mats.account_join_on_start,
                matsAccountJoinOnEnd: mats.account_join_on_end,
                matsDeviceJoin: mats.device_join,
                matsPromptBehavior: mats.prompt_behavior,
                matsApiErrorCode: mats.api_error_code,
                matsUiVisible: mats.ui_visible,
                matsSilentCode: mats.silent_code,
                matsSilentBiSubCode: mats.silent_bi_sub_code,
                matsSilentMessage: mats.silent_message,
                matsSilentStatus: mats.silent_status,
                matsHttpStatus: mats.http_status,
                matsHttpEventCount: mats.http_event_count
            }, this.correlationId);
            return mats;
        };
        /**
         * Validates native platform response before processing
         * @param response
         */
        NativeInteractionClient.prototype.validateNativeResponse = function (response) {
            if (response.hasOwnProperty("access_token") &&
                response.hasOwnProperty("id_token") &&
                response.hasOwnProperty("client_info") &&
                response.hasOwnProperty("account") &&
                response.hasOwnProperty("scope") &&
                response.hasOwnProperty("expires_in")) {
                return response;
            }
            else {
                throw NativeAuthError.createUnexpectedError("Response missing expected properties.");
            }
        };
        /**
         * Gets MATS telemetry from native response
         * @param response
         * @returns
         */
        NativeInteractionClient.prototype.getMATSFromResponse = function (response) {
            if (response.properties.MATS) {
                try {
                    return JSON.parse(response.properties.MATS);
                }
                catch (e) {
                    this.logger.error("NativeInteractionClient - Error parsing MATS telemetry, returning null instead");
                }
            }
            return null;
        };
        /**
         * Returns whether or not response came from native cache
         * @param response
         * @returns
         */
        NativeInteractionClient.prototype.isResponseFromCache = function (mats) {
            if (typeof mats.is_cached === "undefined") {
                this.logger.verbose("NativeInteractionClient - MATS telemetry does not contain field indicating if response was served from cache. Returning false.");
                return false;
            }
            return !!mats.is_cached;
        };
        /**
         * Translates developer provided request object into NativeRequest object
         * @param request
         */
        NativeInteractionClient.prototype.initializeNativeRequest = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var authority, canonicalAuthority, scopes, remainingProperties, scopeSet, getPrompt, validatedRequest, shrParameters, popTokenGenerator, reqCnfData;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("NativeInteractionClient - initializeNativeRequest called");
                            authority = request.authority || this.config.auth.authority;
                            canonicalAuthority = new UrlString(authority);
                            canonicalAuthority.validateAsUri();
                            scopes = request.scopes, remainingProperties = __rest(request, ["scopes"]);
                            scopeSet = new ScopeSet(scopes || []);
                            scopeSet.appendScopes(OIDC_DEFAULT_SCOPES);
                            getPrompt = function () {
                                // If request is silent, prompt is always none
                                switch (_this.apiId) {
                                    case exports.ApiId.ssoSilent:
                                    case exports.ApiId.acquireTokenSilent_silentFlow:
                                        _this.logger.trace("initializeNativeRequest: silent request sets prompt to none");
                                        return PromptValue.NONE;
                                }
                                // Prompt not provided, request may proceed and native broker decides if it needs to prompt
                                if (!request.prompt) {
                                    _this.logger.trace("initializeNativeRequest: prompt was not provided");
                                    return undefined;
                                }
                                // If request is interactive, check if prompt provided is allowed to go directly to native broker
                                switch (request.prompt) {
                                    case PromptValue.NONE:
                                    case PromptValue.CONSENT:
                                    case PromptValue.LOGIN:
                                        _this.logger.trace("initializeNativeRequest: prompt is compatible with native flow");
                                        return request.prompt;
                                    default:
                                        _this.logger.trace("initializeNativeRequest: prompt = " + request.prompt + " is not compatible with native flow");
                                        throw BrowserAuthError.createNativePromptParameterNotSupportedError();
                                }
                            };
                            validatedRequest = __assign$1(__assign$1({}, remainingProperties), { accountId: this.accountId, clientId: this.config.auth.clientId, authority: canonicalAuthority.urlString, scope: scopeSet.printScopes(), redirectUri: this.getRedirectUri(request.redirectUri), prompt: getPrompt(), correlationId: this.correlationId, tokenType: request.authenticationScheme, windowTitleSubstring: document.title, extraParameters: __assign$1(__assign$1(__assign$1({}, request.extraQueryParameters), request.tokenQueryParameters), { telemetry: NativeConstants.MATS_TELEMETRY }), extendedExpiryToken: false // Make this configurable?
                             });
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            shrParameters = {
                                resourceRequestUri: request.resourceRequestUri,
                                resourceRequestMethod: request.resourceRequestMethod,
                                shrClaims: request.shrClaims,
                                shrNonce: request.shrNonce
                            };
                            popTokenGenerator = new PopTokenGenerator(this.browserCrypto);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(shrParameters)];
                        case 1:
                            reqCnfData = _a.sent();
                            // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string
                            validatedRequest.reqCnf = reqCnfData.reqCnfHash;
                            validatedRequest.keyId = reqCnfData.kid;
                            _a.label = 2;
                        case 2: return [2 /*return*/, validatedRequest];
                    }
                });
            });
        };
        return NativeInteractionClient;
    }(BaseInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NativeMessageHandler = /** @class */ (function () {
        function NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, extensionId) {
            this.logger = logger;
            this.handshakeTimeoutMs = handshakeTimeoutMs;
            this.extensionId = extensionId;
            this.resolvers = new Map(); // Used for non-handshake messages
            this.handshakeResolvers = new Map(); // Used for handshake messages
            this.responseId = 0;
            this.messageChannel = new MessageChannel();
            this.windowListener = this.onWindowMessage.bind(this); // Window event callback doesn't have access to 'this' unless it's bound
            this.performanceClient = performanceClient;
            this.handshakeEvent = performanceClient.startMeasurement(PerformanceEvents.NativeMessageHandlerHandshake);
        }
        /**
         * Sends a given message to the extension and resolves with the extension response
         * @param body
         */
        NativeMessageHandler.prototype.sendMessage = function (body) {
            return __awaiter$1(this, void 0, void 0, function () {
                var req;
                var _this = this;
                return __generator$1(this, function (_a) {
                    this.logger.trace("NativeMessageHandler - sendMessage called.");
                    req = {
                        channel: NativeConstants.CHANNEL_ID,
                        extensionId: this.extensionId,
                        responseId: this.responseId++,
                        body: body
                    };
                    this.logger.trace("NativeMessageHandler - Sending request to browser extension");
                    this.logger.tracePii("NativeMessageHandler - Sending request to browser extension: " + JSON.stringify(req));
                    this.messageChannel.port1.postMessage(req);
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            _this.resolvers.set(req.responseId, { resolve: resolve, reject: reject });
                        })];
                });
            });
        };
        /**
         * Returns an instance of the MessageHandler that has successfully established a connection with an extension
         * @param {Logger} logger
         * @param {number} handshakeTimeoutMs
         * @param {IPerformanceClient} performanceClient
         */
        NativeMessageHandler.createProvider = function (logger, handshakeTimeoutMs, performanceClient) {
            return __awaiter$1(this, void 0, void 0, function () {
                var preferredProvider, backupProvider;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            logger.trace("NativeMessageHandler - createProvider called.");
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 5]);
                            preferredProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient, NativeConstants.PREFERRED_EXTENSION_ID);
                            return [4 /*yield*/, preferredProvider.sendHandshakeRequest()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, preferredProvider];
                        case 3:
                            _a.sent();
                            backupProvider = new NativeMessageHandler(logger, handshakeTimeoutMs, performanceClient);
                            return [4 /*yield*/, backupProvider.sendHandshakeRequest()];
                        case 4:
                            _a.sent();
                            return [2 /*return*/, backupProvider];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send handshake request helper.
         */
        NativeMessageHandler.prototype.sendHandshakeRequest = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var req;
                var _this = this;
                return __generator$1(this, function (_a) {
                    this.logger.trace("NativeMessageHandler - sendHandshakeRequest called.");
                    // Register this event listener before sending handshake
                    window.addEventListener("message", this.windowListener, false); // false is important, because content script message processing should work first
                    req = {
                        channel: NativeConstants.CHANNEL_ID,
                        extensionId: this.extensionId,
                        responseId: this.responseId++,
                        body: {
                            method: NativeExtensionMethod.HandshakeRequest
                        }
                    };
                    this.handshakeEvent.addStaticFields({
                        extensionId: this.extensionId,
                        extensionHandshakeTimeoutMs: this.handshakeTimeoutMs
                    });
                    this.messageChannel.port1.onmessage = function (event) {
                        _this.onChannelMessage(event);
                    };
                    window.postMessage(req, window.origin, [this.messageChannel.port2]);
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            _this.handshakeResolvers.set(req.responseId, { resolve: resolve, reject: reject });
                            _this.timeoutId = window.setTimeout(function () {
                                /*
                                 * Throw an error if neither HandshakeResponse nor original Handshake request are received in a reasonable timeframe.
                                 * This typically suggests an event handler stopped propagation of the Handshake request but did not respond to it on the MessageChannel port
                                 */
                                window.removeEventListener("message", _this.windowListener, false);
                                _this.messageChannel.port1.close();
                                _this.messageChannel.port2.close();
                                _this.handshakeEvent.endMeasurement({ extensionHandshakeTimedOut: true, success: false });
                                reject(BrowserAuthError.createNativeHandshakeTimeoutError());
                                _this.handshakeResolvers.delete(req.responseId);
                            }, _this.handshakeTimeoutMs); // Use a reasonable timeout in milliseconds here
                        })];
                });
            });
        };
        /**
         * Invoked when a message is posted to the window. If a handshake request is received it means the extension is not installed.
         * @param event
         */
        NativeMessageHandler.prototype.onWindowMessage = function (event) {
            this.logger.trace("NativeMessageHandler - onWindowMessage called");
            // We only accept messages from ourselves
            if (event.source !== window) {
                return;
            }
            var request = event.data;
            if (!request.channel || request.channel !== NativeConstants.CHANNEL_ID) {
                return;
            }
            if (request.extensionId && request.extensionId !== this.extensionId) {
                return;
            }
            if (request.body.method === NativeExtensionMethod.HandshakeRequest) {
                // If we receive this message back it means no extension intercepted the request, meaning no extension supporting handshake protocol is installed
                this.logger.verbose(request.extensionId ? "Extension with id: " + request.extensionId + " not installed" : "No extension installed");
                clearTimeout(this.timeoutId);
                this.messageChannel.port1.close();
                this.messageChannel.port2.close();
                window.removeEventListener("message", this.windowListener, false);
                var handshakeResolver = this.handshakeResolvers.get(request.responseId);
                if (handshakeResolver) {
                    this.handshakeEvent.endMeasurement({ success: false, extensionInstalled: false });
                    handshakeResolver.reject(BrowserAuthError.createNativeExtensionNotInstalledError());
                }
            }
        };
        /**
         * Invoked when a message is received from the extension on the MessageChannel port
         * @param event
         */
        NativeMessageHandler.prototype.onChannelMessage = function (event) {
            this.logger.trace("NativeMessageHandler - onChannelMessage called.");
            var request = event.data;
            var resolver = this.resolvers.get(request.responseId);
            var handshakeResolver = this.handshakeResolvers.get(request.responseId);
            try {
                var method = request.body.method;
                if (method === NativeExtensionMethod.Response) {
                    if (!resolver) {
                        return;
                    }
                    var response = request.body.response;
                    this.logger.trace("NativeMessageHandler - Received response from browser extension");
                    this.logger.tracePii("NativeMessageHandler - Received response from browser extension: " + JSON.stringify(response));
                    if (response.status !== "Success") {
                        resolver.reject(NativeAuthError.createError(response.code, response.description, response.ext));
                    }
                    else if (response.result) {
                        if (response.result["code"] && response.result["description"]) {
                            resolver.reject(NativeAuthError.createError(response.result["code"], response.result["description"], response.result["ext"]));
                        }
                        else {
                            resolver.resolve(response.result);
                        }
                    }
                    else {
                        throw AuthError.createUnexpectedError("Event does not contain result.");
                    }
                    this.resolvers.delete(request.responseId);
                }
                else if (method === NativeExtensionMethod.HandshakeResponse) {
                    if (!handshakeResolver) {
                        return;
                    }
                    clearTimeout(this.timeoutId); // Clear setTimeout
                    window.removeEventListener("message", this.windowListener, false); // Remove 'No extension' listener
                    this.extensionId = request.extensionId;
                    this.extensionVersion = request.body.version;
                    this.logger.verbose("NativeMessageHandler - Received HandshakeResponse from extension: " + this.extensionId);
                    this.handshakeEvent.endMeasurement({ extensionInstalled: true, success: true });
                    handshakeResolver.resolve();
                    this.handshakeResolvers.delete(request.responseId);
                }
                // Do nothing if method is not Response or HandshakeResponse
            }
            catch (err) {
                this.logger.error("Error parsing response from WAM Extension");
                this.logger.errorPii("Error parsing response from WAM Extension: " + err.toString());
                this.logger.errorPii("Unable to parse " + event);
                if (resolver) {
                    resolver.reject(err);
                }
                else if (handshakeResolver) {
                    handshakeResolver.reject(err);
                }
            }
        };
        /**
         * Returns the Id for the browser extension this handler is communicating with
         * @returns
         */
        NativeMessageHandler.prototype.getExtensionId = function () {
            return this.extensionId;
        };
        /**
         * Returns the version for the browser extension this handler is communicating with
         * @returns
         */
        NativeMessageHandler.prototype.getExtensionVersion = function () {
            return this.extensionVersion;
        };
        /**
         * Returns boolean indicating whether or not the request should attempt to use native broker
         * @param logger
         * @param config
         * @param nativeExtensionProvider
         * @param authenticationScheme
         */
        NativeMessageHandler.isNativeAvailable = function (config, logger, nativeExtensionProvider, authenticationScheme) {
            logger.trace("isNativeAvailable called");
            if (!config.system.allowNativeBroker) {
                logger.trace("isNativeAvailable: allowNativeBroker is not enabled, returning false");
                // Developer disabled WAM
                return false;
            }
            if (!nativeExtensionProvider) {
                logger.trace("isNativeAvailable: WAM extension provider is not initialized, returning false");
                // Extension is not available
                return false;
            }
            if (authenticationScheme) {
                switch (authenticationScheme) {
                    case exports.AuthenticationScheme.BEARER:
                    case exports.AuthenticationScheme.POP:
                        logger.trace("isNativeAvailable: authenticationScheme is supported, returning true");
                        return true;
                    default:
                        logger.trace("isNativeAvailable: authenticationScheme is not supported, returning false");
                        return false;
                }
            }
            return true;
        };
        return NativeMessageHandler;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RedirectClient = /** @class */ (function (_super) {
        __extends$1(RedirectClient, _super);
        function RedirectClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {
            var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;
            _this.nativeStorage = nativeStorageImpl;
            return _this;
        }
        /**
         * Redirects the page to the /authorize endpoint of the IDP
         * @param request
         */
        RedirectClient.prototype.acquireToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var validRequest, serverTelemetryManager, handleBackButton, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationRequest(request, exports.InteractionType.Redirect)];
                        case 1:
                            validRequest = _a.sent();
                            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenRedirect);
                            handleBackButton = function (event) {
                                // Clear temporary cache if the back button is clicked during the redirect flow.
                                if (event.persisted) {
                                    _this.logger.verbose("Page was restored from back/forward cache. Clearing temporary cache.");
                                    _this.browserStorage.cleanRequestByState(validRequest.state);
                                }
                            };
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 7, , 8]);
                            // Create auth code request and generate PKCE params
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                        case 3:
                            authCodeRequest = _a.sent();
                            // Initialize the client
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];
                        case 4:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);
                            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign$1(__assign$1({}, validRequest), { nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme) }))];
                        case 5:
                            navigateUrl = _a.sent();
                            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
                            this.logger.verbosePii("Redirect start page: " + redirectStartPage);
                            // Clear temporary cache if the back button is clicked during the redirect flow.
                            window.addEventListener("pageshow", handleBackButton);
                            return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {
                                    navigationClient: this.navigationClient,
                                    redirectTimeout: this.config.system.redirectNavigationTimeout,
                                    redirectStartPage: redirectStartPage,
                                    onRedirectNavigate: request.onRedirectNavigate
                                })];
                        case 6:
                        // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                        return [2 /*return*/, _a.sent()];
                        case 7:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            window.removeEventListener("pageshow", handleBackButton);
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByState(validRequest.state);
                            throw e_1;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Checks if navigateToLoginRequestUrl is set, and:
         * - if true, performs logic to cache and navigate
         * - if false, handles hash string and parses response
         * @param hash
         */
        RedirectClient.prototype.handleRedirectPromise = function (hash) {
            return __awaiter$1(this, void 0, void 0, function () {
                var serverTelemetryManager, responseHash, state, serverParams, loginRequestUrl, loginRequestUrlNormalized, currentUrlNormalized, handleHashResult, navigationOptions, processHashOnRedirect, homepage, e_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.handleRedirectPromise);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 10, , 11]);
                            if (!this.browserStorage.isInteractionInProgress(true)) {
                                this.logger.info("handleRedirectPromise called but there is no interaction in progress, returning null.");
                                return [2 /*return*/, null];
                            }
                            responseHash = this.getRedirectResponseHash(hash || window.location.hash);
                            if (!responseHash) {
                                // Not a recognized server response hash or hash not associated with a redirect request
                                this.logger.info("handleRedirectPromise did not detect a response hash as a result of a redirect. Cleaning temporary cache.");
                                this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                                return [2 /*return*/, null];
                            }
                            state = void 0;
                            try {
                                serverParams = UrlString.getDeserializedHash(responseHash);
                                state = this.validateAndExtractStateFromHash(serverParams, exports.InteractionType.Redirect);
                                this.logger.verbose("State extracted from hash");
                            }
                            catch (e) {
                                this.logger.info("handleRedirectPromise was unable to extract state due to: " + e);
                                this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                                return [2 /*return*/, null];
                            }
                            loginRequestUrl = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, true) || Constants.EMPTY_STRING;
                            loginRequestUrlNormalized = UrlString.removeHashFromUrl(loginRequestUrl);
                            currentUrlNormalized = UrlString.removeHashFromUrl(window.location.href);
                            if (!(loginRequestUrlNormalized === currentUrlNormalized && this.config.auth.navigateToLoginRequestUrl)) return [3 /*break*/, 3];
                            // We are on the page we need to navigate to - handle hash
                            this.logger.verbose("Current page is loginRequestUrl, handling hash");
                            return [4 /*yield*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                        case 2:
                            handleHashResult = _a.sent();
                            if (loginRequestUrl.indexOf("#") > -1) {
                                // Replace current hash with non-msal hash, if present
                                BrowserUtils.replaceHash(loginRequestUrl);
                            }
                            return [2 /*return*/, handleHashResult];
                        case 3:
                            if (!!this.config.auth.navigateToLoginRequestUrl) return [3 /*break*/, 4];
                            this.logger.verbose("NavigateToLoginRequestUrl set to false, handling hash");
                            return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                        case 4:
                            if (!(!BrowserUtils.isInIframe() || this.config.system.allowRedirectInIframe)) return [3 /*break*/, 9];
                            /*
                             * Returned from authority using redirect - need to perform navigation before processing response
                             * Cache the hash to be retrieved after the next redirect
                             */
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.URL_HASH, responseHash, true);
                            navigationOptions = {
                                apiId: exports.ApiId.handleRedirectPromise,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: true
                            };
                            processHashOnRedirect = true;
                            if (!(!loginRequestUrl || loginRequestUrl === "null")) return [3 /*break*/, 6];
                            homepage = BrowserUtils.getHomepage();
                            // Cache the homepage under ORIGIN_URI to ensure cached hash is processed on homepage
                            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, homepage, true);
                            this.logger.warning("Unable to get valid login request url from cache, redirecting to home page");
                            return [4 /*yield*/, this.navigationClient.navigateInternal(homepage, navigationOptions)];
                        case 5:
                            processHashOnRedirect = _a.sent();
                            return [3 /*break*/, 8];
                        case 6:
                            // Navigate to page that initiated the redirect request
                            this.logger.verbose("Navigating to loginRequestUrl: " + loginRequestUrl);
                            return [4 /*yield*/, this.navigationClient.navigateInternal(loginRequestUrl, navigationOptions)];
                        case 7:
                            processHashOnRedirect = _a.sent();
                            _a.label = 8;
                        case 8:
                            // If navigateInternal implementation returns false, handle the hash now
                            if (!processHashOnRedirect) {
                                return [2 /*return*/, this.handleHash(responseHash, state, serverTelemetryManager)];
                            }
                            _a.label = 9;
                        case 9: return [2 /*return*/, null];
                        case 10:
                            e_2 = _a.sent();
                            if (e_2 instanceof AuthError) {
                                e_2.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_2);
                            this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Redirect);
                            throw e_2;
                        case 11: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Gets the response hash for a redirect request
         * Returns null if interactionType in the state value is not "redirect" or the hash does not contain known properties
         * @param hash
         */
        RedirectClient.prototype.getRedirectResponseHash = function (hash) {
            this.logger.verbose("getRedirectResponseHash called");
            // Get current location hash from window or cache.
            var isResponseHash = UrlString.hashContainsKnownProperties(hash);
            if (isResponseHash) {
                BrowserUtils.clearHash(window);
                this.logger.verbose("Hash contains known properties, returning response hash");
                return hash;
            }
            var cachedHash = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.URL_HASH, true);
            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.URL_HASH));
            this.logger.verbose("Hash does not contain known properties, returning cached hash");
            return cachedHash;
        };
        /**
         * Checks if hash exists and handles in window.
         * @param hash
         * @param state
         */
        RedirectClient.prototype.handleHash = function (hash, state, serverTelemetryManager) {
            return __awaiter$1(this, void 0, void 0, function () {
                var cachedRequest, serverParams, nativeInteractionClient, userRequestState, currentAuthority, authClient, interactionHandler;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cachedRequest = this.browserStorage.getCachedRequest(state, this.browserCrypto);
                            this.logger.verbose("handleHash called, retrieved cached request");
                            serverParams = UrlString.getDeserializedHash(hash);
                            if (serverParams.accountId) {
                                this.logger.verbose("Account id found in hash, calling WAM for token");
                                if (!this.nativeMessageHandler) {
                                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();
                                }
                                nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, cachedRequest.correlationId);
                                userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;
                                return [2 /*return*/, nativeInteractionClient.acquireToken(__assign$1(__assign$1({}, cachedRequest), { state: userRequestState, prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently
                                     })).finally(function () {
                                        _this.browserStorage.cleanRequestByState(state);
                                    })];
                            }
                            currentAuthority = this.browserStorage.getCachedAuthority(state);
                            if (!currentAuthority) {
                                throw BrowserAuthError.createNoCachedAuthorityError();
                            }
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, cachedRequest.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, currentAuthority)];
                        case 1:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, cachedRequest);
                            interactionHandler = new RedirectHandler(authClient, this.browserStorage, cachedRequest, this.logger, this.browserCrypto, this.performanceClient);
                            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];
                        case 2: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         * @param logoutRequest
         */
        RedirectClient.prototype.logout = function (logoutRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var validLogoutRequest, serverTelemetryManager, navigationOptions, authClient, logoutUri, navigate, e_3;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("logoutRedirect called");
                            validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.logout);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 10, , 11]);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_START, exports.InteractionType.Redirect, logoutRequest);
                            // Clear cache on logout
                            return [4 /*yield*/, this.clearCacheOnLogout(validLogoutRequest.account)];
                        case 2:
                            // Clear cache on logout
                            _a.sent();
                            navigationOptions = {
                                apiId: exports.ApiId.logout,
                                timeout: this.config.system.redirectNavigationTimeout,
                                noHistory: false
                            };
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validLogoutRequest.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, logoutRequest && logoutRequest.authority)];
                        case 3:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            logoutUri = authClient.getLogoutUri(validLogoutRequest);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_SUCCESS, exports.InteractionType.Redirect, validLogoutRequest);
                            if (!(logoutRequest && typeof logoutRequest.onRedirectNavigate === "function")) return [3 /*break*/, 7];
                            navigate = logoutRequest.onRedirectNavigate(logoutUri);
                            if (!(navigate !== false)) return [3 /*break*/, 5];
                            this.logger.verbose("Logout onRedirectNavigate did not return false, navigating");
                            // Ensure interaction is in progress
                            if (!this.browserStorage.getInteractionInProgress()) {
                                this.browserStorage.setInteractionInProgress(true);
                            }
                            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                        case 4:
                            _a.sent();
                            return [2 /*return*/];
                        case 5:
                            // Ensure interaction is not in progress
                            this.browserStorage.setInteractionInProgress(false);
                            this.logger.verbose("Logout onRedirectNavigate returned false, stopping navigation");
                            _a.label = 6;
                        case 6: return [3 /*break*/, 9];
                        case 7:
                            // Ensure interaction is in progress
                            if (!this.browserStorage.getInteractionInProgress()) {
                                this.browserStorage.setInteractionInProgress(true);
                            }
                            return [4 /*yield*/, this.navigationClient.navigateExternal(logoutUri, navigationOptions)];
                        case 8:
                            _a.sent();
                            return [2 /*return*/];
                        case 9: return [3 /*break*/, 11];
                        case 10:
                            e_3 = _a.sent();
                            if (e_3 instanceof AuthError) {
                                e_3.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_3);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_FAILURE, exports.InteractionType.Redirect, null, e_3);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Redirect);
                            throw e_3;
                        case 11:
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Redirect);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Use to get the redirectStartPage either from request or use current window
         * @param requestStartPage
         */
        RedirectClient.prototype.getRedirectStartPage = function (requestStartPage) {
            var redirectStartPage = requestStartPage || window.location.href;
            return UrlString.getAbsoluteUrl(redirectStartPage, BrowserUtils.getCurrentUri());
        };
        return RedirectClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var PopupClient = /** @class */ (function (_super) {
        __extends$1(PopupClient, _super);
        function PopupClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {
            var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;
            // Properly sets this reference for the unload event.
            _this.unloadWindow = _this.unloadWindow.bind(_this);
            _this.nativeStorage = nativeStorageImpl;
            return _this;
        }
        /**
         * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
         * @param request
         */
        PopupClient.prototype.acquireToken = function (request) {
            try {
                var popupName = this.generatePopupName(request.scopes || OIDC_DEFAULT_SCOPES, request.authority || this.config.auth.authority);
                var popupWindowAttributes = request.popupWindowAttributes || {};
                // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
                if (this.config.system.asyncPopups) {
                    this.logger.verbose("asyncPopups set to true, acquiring token");
                    // Passes on popup position and dimensions if in request
                    return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes);
                }
                else {
                    // asyncPopups flag is set to false. Opens popup before acquiring token.
                    this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                    var popup = this.openSizedPopup("about:blank", popupName, popupWindowAttributes);
                    return this.acquireTokenPopupAsync(request, popupName, popupWindowAttributes, popup);
                }
            }
            catch (e) {
                return Promise.reject(e);
            }
        };
        /**
         * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
         * @param logoutRequest
         */
        PopupClient.prototype.logout = function (logoutRequest) {
            try {
                this.logger.verbose("logoutPopup called");
                var validLogoutRequest = this.initializeLogoutRequest(logoutRequest);
                var popupName = this.generateLogoutPopupName(validLogoutRequest);
                var authority = logoutRequest && logoutRequest.authority;
                var mainWindowRedirectUri = logoutRequest && logoutRequest.mainWindowRedirectUri;
                var popupWindowAttributes = (logoutRequest === null || logoutRequest === void 0 ? void 0 : logoutRequest.popupWindowAttributes) || {};
                // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
                if (this.config.system.asyncPopups) {
                    this.logger.verbose("asyncPopups set to true");
                    // Passes on popup position and dimensions if in request
                    return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, undefined, mainWindowRedirectUri);
                }
                else {
                    // asyncPopups flag is set to false. Opens popup before logging out.
                    this.logger.verbose("asyncPopup set to false, opening popup");
                    var popup = this.openSizedPopup("about:blank", popupName, popupWindowAttributes);
                    return this.logoutPopupAsync(validLogoutRequest, popupName, popupWindowAttributes, authority, popup, mainWindowRedirectUri);
                }
            }
            catch (e) {
                // Since this function is synchronous we need to reject
                return Promise.reject(e);
            }
        };
        /**
         * Helper which obtains an access_token for your API via opening a popup window in the user's browser
         * @param validRequest
         * @param popupName
         * @param popup
         * @param popupWindowAttributes
         *
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        PopupClient.prototype.acquireTokenPopupAsync = function (request, popupName, popupWindowAttributes, popup) {
            return __awaiter$1(this, void 0, void 0, function () {
                var serverTelemetryManager, validRequest, authCodeRequest, authClient, isNativeBroker, fetchNativeAccountIdMeasurement, navigateUrl, interactionHandler, popupParameters, popupWindow, hash, serverParams, state_1, nativeInteractionClient, userRequestState, result, e_1;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("acquireTokenPopupAsync called");
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenPopup);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationRequest(request, exports.InteractionType.Popup)];
                        case 1:
                            validRequest = _a.sent();
                            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || Constants.EMPTY_STRING, validRequest.account || null);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 8, , 9]);
                            // Create auth code request and generate PKCE params
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                        case 3:
                            authCodeRequest = _a.sent();
                            // Initialize the client
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority, validRequest.azureCloudOptions)];
                        case 4:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            isNativeBroker = NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, request.authenticationScheme);
                            fetchNativeAccountIdMeasurement = void 0;
                            if (isNativeBroker) {
                                fetchNativeAccountIdMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.FetchAccountIdWithNativeBroker, request.correlationId);
                            }
                            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign$1(__assign$1({}, validRequest), { nativeBroker: isNativeBroker }))];
                        case 5:
                            navigateUrl = _a.sent();
                            interactionHandler = new InteractionHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.performanceClient);
                            popupParameters = {
                                popup: popup,
                                popupName: popupName,
                                popupWindowAttributes: popupWindowAttributes
                            };
                            popupWindow = this.initiateAuthRequest(navigateUrl, popupParameters);
                            this.eventHandler.emitEvent(exports.EventType.POPUP_OPENED, exports.InteractionType.Popup, { popupWindow: popupWindow }, null);
                            return [4 /*yield*/, this.monitorPopupForHash(popupWindow)];
                        case 6:
                            hash = _a.sent();
                            serverParams = UrlString.getDeserializedHash(hash);
                            state_1 = this.validateAndExtractStateFromHash(serverParams, exports.InteractionType.Popup, validRequest.correlationId);
                            // Remove throttle if it exists
                            ThrottlingUtils.removeThrottle(this.browserStorage, this.config.auth.clientId, authCodeRequest);
                            if (serverParams.accountId) {
                                this.logger.verbose("Account id found in hash, calling WAM for token");
                                // end measurement for server call with native brokering enabled
                                if (fetchNativeAccountIdMeasurement) {
                                    fetchNativeAccountIdMeasurement.endMeasurement({
                                        success: true,
                                        isNativeBroker: true
                                    });
                                }
                                if (!this.nativeMessageHandler) {
                                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();
                                }
                                nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.acquireTokenPopup, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.nativeStorage, validRequest.correlationId);
                                userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state_1).userRequestState;
                                return [2 /*return*/, nativeInteractionClient.acquireToken(__assign$1(__assign$1({}, validRequest), { state: userRequestState, prompt: undefined // Server should handle the prompt, ideally native broker can do this part silently
                                     })).finally(function () {
                                        _this.browserStorage.cleanRequestByState(state_1);
                                    })];
                            }
                            return [4 /*yield*/, interactionHandler.handleCodeResponseFromHash(hash, state_1, authClient.authority, this.networkClient)];
                        case 7:
                            result = _a.sent();
                            return [2 /*return*/, result];
                        case 8:
                            e_1 = _a.sent();
                            if (popup) {
                                // Close the synchronous popup if an error is thrown before the window unload event is registered
                                popup.close();
                            }
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByState(validRequest.state);
                            throw e_1;
                        case 9: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         * @param validRequest
         * @param popupName
         * @param requestAuthority
         * @param popup
         * @param mainWindowRedirectUri
         * @param popupWindowAttributes
         */
        PopupClient.prototype.logoutPopupAsync = function (validRequest, popupName, popupWindowAttributes, requestAuthority, popup, mainWindowRedirectUri) {
            return __awaiter$1(this, void 0, void 0, function () {
                var serverTelemetryManager, authClient, logoutUri, popupWindow, navigationOptions, absoluteUrl, e_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("logoutPopupAsync called");
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_START, exports.InteractionType.Popup, validRequest);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.logoutPopup);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 5, , 6]);
                            // Clear cache on logout
                            return [4 /*yield*/, this.clearCacheOnLogout(validRequest.account)];
                        case 2:
                            // Clear cache on logout
                            _a.sent();
                            // Initialize the client
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, validRequest.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, requestAuthority)];
                        case 3:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            logoutUri = authClient.getLogoutUri(validRequest);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_SUCCESS, exports.InteractionType.Popup, validRequest);
                            popupWindow = this.openPopup(logoutUri, { popupName: popupName, popupWindowAttributes: popupWindowAttributes, popup: popup });
                            this.eventHandler.emitEvent(exports.EventType.POPUP_OPENED, exports.InteractionType.Popup, { popupWindow: popupWindow }, null);
                            return [4 /*yield*/, this.waitForLogoutPopup(popupWindow)];
                        case 4:
                            _a.sent();
                            if (mainWindowRedirectUri) {
                                navigationOptions = {
                                    apiId: exports.ApiId.logoutPopup,
                                    timeout: this.config.system.redirectNavigationTimeout,
                                    noHistory: false
                                };
                                absoluteUrl = UrlString.getAbsoluteUrl(mainWindowRedirectUri, BrowserUtils.getCurrentUri());
                                this.logger.verbose("Redirecting main window to url specified in the request");
                                this.logger.verbosePii("Redirecting main window to: " + absoluteUrl);
                                this.navigationClient.navigateInternal(absoluteUrl, navigationOptions);
                            }
                            else {
                                this.logger.verbose("No main window navigation requested");
                            }
                            return [3 /*break*/, 6];
                        case 5:
                            e_2 = _a.sent();
                            if (popup) {
                                // Close the synchronous popup if an error is thrown before the window unload event is registered
                                popup.close();
                            }
                            if (e_2 instanceof AuthError) {
                                e_2.setCorrelationId(this.correlationId);
                            }
                            this.browserStorage.setInteractionInProgress(false);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_FAILURE, exports.InteractionType.Popup, null, e_2);
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Popup);
                            serverTelemetryManager.cacheFailedRequest(e_2);
                            throw e_2;
                        case 6:
                            this.eventHandler.emitEvent(exports.EventType.LOGOUT_END, exports.InteractionType.Popup);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Opens a popup window with given request Url.
         * @param requestUrl
         */
        PopupClient.prototype.initiateAuthRequest = function (requestUrl, params) {
            // Check that request url is not empty.
            if (!StringUtils.isEmpty(requestUrl)) {
                this.logger.infoPii("Navigate to: " + requestUrl);
                // Open the popup window to requestUrl.
                return this.openPopup(requestUrl, params);
            }
            else {
                // Throw error if request URL is empty.
                this.logger.error("Navigate url is empty");
                throw BrowserAuthError.createEmptyNavigationUriError();
            }
        };
        /**
         * Monitors a window until it loads a url with the same origin.
         * @param popupWindow - window that is being monitored
         * @param timeout - timeout for processing hash once popup is redirected back to application
         */
        PopupClient.prototype.monitorPopupForHash = function (popupWindow) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                /*
                 * Polling for popups needs to be tick-based,
                 * since a non-trivial amount of time can be spent on interaction (which should not count against the timeout).
                 */
                var maxTicks = _this.config.system.windowHashTimeout / _this.config.system.pollIntervalMilliseconds;
                var ticks = 0;
                _this.logger.verbose("PopupHandler.monitorPopupForHash - polling started");
                var intervalId = setInterval(function () {
                    // Window is closed
                    if (popupWindow.closed) {
                        _this.logger.error("PopupHandler.monitorPopupForHash - window closed");
                        _this.cleanPopup();
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createUserCancelledError());
                        return;
                    }
                    var href = Constants.EMPTY_STRING;
                    var hash = Constants.EMPTY_STRING;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = popupWindow.location.href;
                        hash = popupWindow.location.hash;
                    }
                    catch (e) { }
                    // Don't process blank pages or cross domain
                    if (StringUtils.isEmpty(href) || href === "about:blank") {
                        return;
                    }
                    _this.logger.verbose("PopupHandler.monitorPopupForHash - popup window is on same origin as caller");
                    /*
                     * Only run clock when we are on same domain for popups
                     * as popup operations can take a long time.
                     */
                    ticks++;
                    if (hash) {
                        _this.logger.verbose("PopupHandler.monitorPopupForHash - found hash in url");
                        clearInterval(intervalId);
                        _this.cleanPopup(popupWindow);
                        if (UrlString.hashContainsKnownProperties(hash)) {
                            _this.logger.verbose("PopupHandler.monitorPopupForHash - hash contains known properties, returning.");
                            resolve(hash);
                        }
                        else {
                            _this.logger.error("PopupHandler.monitorPopupForHash - found hash in url but it does not contain known properties. Check that your router is not changing the hash prematurely.");
                            _this.logger.errorPii("PopupHandler.monitorPopupForHash - hash found: " + hash);
                            reject(BrowserAuthError.createHashDoesNotContainKnownPropertiesError());
                        }
                    }
                    else if (ticks > maxTicks) {
                        _this.logger.error("PopupHandler.monitorPopupForHash - unable to find hash in url, timing out");
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createMonitorPopupTimeoutError());
                    }
                }, _this.config.system.pollIntervalMilliseconds);
            });
        };
        /**
         * Waits for user interaction in logout popup window
         * @param popupWindow
         * @returns
         */
        PopupClient.prototype.waitForLogoutPopup = function (popupWindow) {
            var _this = this;
            return new Promise(function (resolve) {
                _this.logger.verbose("PopupHandler.waitForLogoutPopup - polling started");
                var intervalId = setInterval(function () {
                    // Window is closed
                    if (popupWindow.closed) {
                        _this.logger.error("PopupHandler.waitForLogoutPopup - window closed");
                        _this.cleanPopup();
                        clearInterval(intervalId);
                        resolve();
                    }
                    var href = Constants.EMPTY_STRING;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = popupWindow.location.href;
                    }
                    catch (e) { }
                    // Don't process blank pages or cross domain
                    if (StringUtils.isEmpty(href) || href === "about:blank") {
                        return;
                    }
                    _this.logger.verbose("PopupHandler.waitForLogoutPopup - popup window is on same origin as caller, closing.");
                    clearInterval(intervalId);
                    _this.cleanPopup(popupWindow);
                    resolve();
                }, _this.config.system.pollIntervalMilliseconds);
            });
        };
        /**
         * @hidden
         *
         * Configures popup window for login.
         *
         * @param urlNavigate
         * @param title
         * @param popUpWidth
         * @param popUpHeight
         * @param popupWindowAttributes
         * @ignore
         * @hidden
         */
        PopupClient.prototype.openPopup = function (urlNavigate, popupParams) {
            try {
                var popupWindow = void 0;
                // Popup window passed in, setting url to navigate to
                if (popupParams.popup) {
                    popupWindow = popupParams.popup;
                    this.logger.verbosePii("Navigating popup window to: " + urlNavigate);
                    popupWindow.location.assign(urlNavigate);
                }
                else if (typeof popupParams.popup === "undefined") {
                    // Popup will be undefined if it was not passed in
                    this.logger.verbosePii("Opening popup window to: " + urlNavigate);
                    popupWindow = this.openSizedPopup(urlNavigate, popupParams.popupName, popupParams.popupWindowAttributes);
                }
                // Popup will be null if popups are blocked
                if (!popupWindow) {
                    throw BrowserAuthError.createEmptyWindowCreatedError();
                }
                if (popupWindow.focus) {
                    popupWindow.focus();
                }
                this.currentWindow = popupWindow;
                window.addEventListener("beforeunload", this.unloadWindow);
                return popupWindow;
            }
            catch (e) {
                this.logger.error("error opening popup " + e.message);
                this.browserStorage.setInteractionInProgress(false);
                throw BrowserAuthError.createPopupWindowError(e.toString());
            }
        };
        /**
         * Helper function to set popup window dimensions and position
         * @param urlNavigate
         * @param popupName
         * @param popupWindowAttributes
         * @returns
         */
        PopupClient.prototype.openSizedPopup = function (urlNavigate, popupName, popupWindowAttributes) {
            var _a, _b, _c, _d;
            /**
             * adding winLeft and winTop to account for dual monitor
             * using screenLeft and screenTop for IE8 and earlier
             */
            var winLeft = window.screenLeft ? window.screenLeft : window.screenX;
            var winTop = window.screenTop ? window.screenTop : window.screenY;
            /**
             * window.innerWidth displays browser window"s height and width excluding toolbars
             * using document.documentElement.clientWidth for IE8 and earlier
             */
            var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            var width = (_a = popupWindowAttributes.popupSize) === null || _a === void 0 ? void 0 : _a.width;
            var height = (_b = popupWindowAttributes.popupSize) === null || _b === void 0 ? void 0 : _b.height;
            var top = (_c = popupWindowAttributes.popupPosition) === null || _c === void 0 ? void 0 : _c.top;
            var left = (_d = popupWindowAttributes.popupPosition) === null || _d === void 0 ? void 0 : _d.left;
            if (!width || width < 0 || width > winWidth) {
                this.logger.verbose("Default popup window width used. Window width not configured or invalid.");
                width = BrowserConstants.POPUP_WIDTH;
            }
            if (!height || height < 0 || height > winHeight) {
                this.logger.verbose("Default popup window height used. Window height not configured or invalid.");
                height = BrowserConstants.POPUP_HEIGHT;
            }
            if (!top || top < 0 || top > winHeight) {
                this.logger.verbose("Default popup window top position used. Window top not configured or invalid.");
                top = Math.max(0, ((winHeight / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);
            }
            if (!left || left < 0 || left > winWidth) {
                this.logger.verbose("Default popup window left position used. Window left not configured or invalid.");
                left = Math.max(0, ((winWidth / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);
            }
            return window.open(urlNavigate, popupName, "width=" + width + ", height=" + height + ", top=" + top + ", left=" + left + ", scrollbars=yes");
        };
        /**
         * Event callback to unload main window.
         */
        PopupClient.prototype.unloadWindow = function (e) {
            this.browserStorage.cleanRequestByInteractionType(exports.InteractionType.Popup);
            if (this.currentWindow) {
                this.currentWindow.close();
            }
            // Guarantees browser unload will happen, so no other errors will be thrown.
            e.preventDefault();
        };
        /**
         * Closes popup, removes any state vars created during popup calls.
         * @param popupWindow
         */
        PopupClient.prototype.cleanPopup = function (popupWindow) {
            if (popupWindow) {
                // Close window.
                popupWindow.close();
            }
            // Remove window unload function
            window.removeEventListener("beforeunload", this.unloadWindow);
            // Interaction is completed - remove interaction status.
            this.browserStorage.setInteractionInProgress(false);
        };
        /**
         * Generates the name for the popup based on the client id and request
         * @param clientId
         * @param request
         */
        PopupClient.prototype.generatePopupName = function (scopes, authority) {
            return BrowserConstants.POPUP_NAME_PREFIX + "." + this.config.auth.clientId + "." + scopes.join("-") + "." + authority + "." + this.correlationId;
        };
        /**
         * Generates the name for the popup based on the client id and request for logouts
         * @param clientId
         * @param request
         */
        PopupClient.prototype.generateLogoutPopupName = function (request) {
            var homeAccountId = request.account && request.account.homeAccountId;
            return BrowserConstants.POPUP_NAME_PREFIX + "." + this.config.auth.clientId + "." + homeAccountId + "." + this.correlationId;
        };
        return PopupClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var NavigationClient = /** @class */ (function () {
        function NavigationClient() {
        }
        /**
         * Navigates to other pages within the same web application
         * @param url
         * @param options
         */
        NavigationClient.prototype.navigateInternal = function (url, options) {
            return NavigationClient.defaultNavigateWindow(url, options);
        };
        /**
         * Navigates to other pages outside the web application i.e. the Identity Provider
         * @param url
         * @param options
         */
        NavigationClient.prototype.navigateExternal = function (url, options) {
            return NavigationClient.defaultNavigateWindow(url, options);
        };
        /**
         * Default navigation implementation invoked by the internal and external functions
         * @param url
         * @param options
         */
        NavigationClient.defaultNavigateWindow = function (url, options) {
            if (options.noHistory) {
                window.location.replace(url);
            }
            else {
                window.location.assign(url);
            }
            return new Promise(function (resolve) {
                setTimeout(function () {
                    resolve(true);
                }, options.timeout);
            });
        };
        return NavigationClient;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Default timeout for popup windows and iframes in milliseconds
    var DEFAULT_POPUP_TIMEOUT_MS = 60000;
    var DEFAULT_IFRAME_TIMEOUT_MS = 6000;
    var DEFAULT_REDIRECT_TIMEOUT_MS = 30000;
    var DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS = 2000;
    /**
     * MSAL function that sets the default options when not explicitly configured from app developer
     *
     * @param auth
     * @param cache
     * @param system
     *
     * @returns Configuration object
     */
    function buildConfiguration(_a, isBrowserEnvironment) {
        var userInputAuth = _a.auth, userInputCache = _a.cache, userInputSystem = _a.system, userInputTelemetry = _a.telemetry;
        // Default auth options for browser
        var DEFAULT_AUTH_OPTIONS = {
            clientId: Constants.EMPTY_STRING,
            authority: "" + Constants.DEFAULT_AUTHORITY,
            knownAuthorities: [],
            cloudDiscoveryMetadata: Constants.EMPTY_STRING,
            authorityMetadata: Constants.EMPTY_STRING,
            redirectUri: Constants.EMPTY_STRING,
            postLogoutRedirectUri: Constants.EMPTY_STRING,
            navigateToLoginRequestUrl: true,
            clientCapabilities: [],
            protocolMode: exports.ProtocolMode.AAD,
            azureCloudOptions: {
                azureCloudInstance: AzureCloudInstance.None,
                tenant: Constants.EMPTY_STRING
            },
            skipAuthorityMetadataCache: false,
        };
        // Default cache options for browser
        var DEFAULT_CACHE_OPTIONS = {
            cacheLocation: exports.BrowserCacheLocation.SessionStorage,
            temporaryCacheLocation: exports.BrowserCacheLocation.SessionStorage,
            storeAuthStateInCookie: false,
            secureCookies: false,
            // Default cache migration to true if cache location is localStorage since entries are preserved across tabs/windows. Migration has little to no benefit in sessionStorage and memoryStorage
            cacheMigrationEnabled: userInputCache && userInputCache.cacheLocation === exports.BrowserCacheLocation.LocalStorage ? true : false
        };
        // Default logger options for browser
        var DEFAULT_LOGGER_OPTIONS = {
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            loggerCallback: function () {
                // allow users to not set logger call back
            },
            logLevel: exports.LogLevel.Info,
            piiLoggingEnabled: false
        };
        // Default system options for browser
        var DEFAULT_BROWSER_SYSTEM_OPTIONS = __assign$1(__assign$1({}, DEFAULT_SYSTEM_OPTIONS), { loggerOptions: DEFAULT_LOGGER_OPTIONS, networkClient: isBrowserEnvironment ? BrowserUtils.getBrowserNetworkClient() : StubbedNetworkModule, navigationClient: new NavigationClient(), loadFrameTimeout: 0,
            // If loadFrameTimeout is provided, use that as default.
            windowHashTimeout: (userInputSystem === null || userInputSystem === void 0 ? void 0 : userInputSystem.loadFrameTimeout) || DEFAULT_POPUP_TIMEOUT_MS, iframeHashTimeout: (userInputSystem === null || userInputSystem === void 0 ? void 0 : userInputSystem.loadFrameTimeout) || DEFAULT_IFRAME_TIMEOUT_MS, navigateFrameWait: isBrowserEnvironment && BrowserUtils.detectIEOrEdge() ? 500 : 0, redirectNavigationTimeout: DEFAULT_REDIRECT_TIMEOUT_MS, asyncPopups: false, allowRedirectInIframe: false, allowNativeBroker: false, nativeBrokerHandshakeTimeout: (userInputSystem === null || userInputSystem === void 0 ? void 0 : userInputSystem.nativeBrokerHandshakeTimeout) || DEFAULT_NATIVE_BROKER_HANDSHAKE_TIMEOUT_MS, pollIntervalMilliseconds: BrowserConstants.DEFAULT_POLL_INTERVAL_MS, cryptoOptions: {
                useMsrCrypto: false,
                entropy: undefined
            } });
        var providedSystemOptions = __assign$1(__assign$1({}, userInputSystem), { loggerOptions: (userInputSystem === null || userInputSystem === void 0 ? void 0 : userInputSystem.loggerOptions) || DEFAULT_LOGGER_OPTIONS });
        var DEFAULT_TELEMETRY_OPTIONS = {
            application: {
                appName: Constants.EMPTY_STRING,
                appVersion: Constants.EMPTY_STRING
            }
        };
        var overlayedConfig = {
            auth: __assign$1(__assign$1({}, DEFAULT_AUTH_OPTIONS), userInputAuth),
            cache: __assign$1(__assign$1({}, DEFAULT_CACHE_OPTIONS), userInputCache),
            system: __assign$1(__assign$1({}, DEFAULT_BROWSER_SYSTEM_OPTIONS), providedSystemOptions),
            telemetry: __assign$1(__assign$1({}, DEFAULT_TELEMETRY_OPTIONS), userInputTelemetry)
        };
        return overlayedConfig;
    }

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentHandler = /** @class */ (function (_super) {
        __extends$1(SilentHandler, _super);
        function SilentHandler(authCodeModule, storageImpl, authCodeRequest, logger, systemOptions, performanceClient) {
            var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, logger, performanceClient) || this;
            _this.navigateFrameWait = systemOptions.navigateFrameWait;
            _this.pollIntervalMilliseconds = systemOptions.pollIntervalMilliseconds;
            return _this;
        }
        /**
         * Creates a hidden iframe to given URL using user-requested scopes as an id.
         * @param urlNavigate
         * @param userRequestScopes
         */
        SilentHandler.prototype.initiateAuthRequest = function (requestUrl) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerInitiateAuthRequest, this.authCodeRequest.correlationId);
                            if (StringUtils.isEmpty(requestUrl)) {
                                // Throw error if request URL is empty.
                                this.logger.info("Navigate url is empty");
                                throw BrowserAuthError.createEmptyNavigationUriError();
                            }
                            if (!this.navigateFrameWait) return [3 /*break*/, 2];
                            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);
                            return [4 /*yield*/, this.loadFrame(requestUrl)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/, this.loadFrameSync(requestUrl)];
                    }
                });
            });
        };
        /**
         * Monitors an iframe content window until it loads a url with a known hash, or hits a specified timeout.
         * @param iframe
         * @param timeout
         */
        SilentHandler.prototype.monitorIframeForHash = function (iframe, timeout) {
            var _this = this;
            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerMonitorIframeForHash, this.authCodeRequest.correlationId);
            return new Promise(function (resolve, reject) {
                if (timeout < DEFAULT_IFRAME_TIMEOUT_MS) {
                    _this.logger.warning("system.loadFrameTimeout or system.iframeHashTimeout set to lower (" + timeout + "ms) than the default (" + DEFAULT_IFRAME_TIMEOUT_MS + "ms). This may result in timeouts.");
                }
                /*
                 * Polling for iframes can be purely timing based,
                 * since we don't need to account for interaction.
                 */
                var nowMark = window.performance.now();
                var timeoutMark = nowMark + timeout;
                var intervalId = setInterval(function () {
                    if (window.performance.now() > timeoutMark) {
                        _this.removeHiddenIframe(iframe);
                        clearInterval(intervalId);
                        reject(BrowserAuthError.createMonitorIframeTimeoutError());
                        return;
                    }
                    var href = Constants.EMPTY_STRING;
                    var contentWindow = iframe.contentWindow;
                    try {
                        /*
                         * Will throw if cross origin,
                         * which should be caught and ignored
                         * since we need the interval to keep running while on STS UI.
                         */
                        href = contentWindow ? contentWindow.location.href : Constants.EMPTY_STRING;
                    }
                    catch (e) { }
                    if (StringUtils.isEmpty(href)) {
                        return;
                    }
                    var contentHash = contentWindow ? contentWindow.location.hash : Constants.EMPTY_STRING;
                    if (UrlString.hashContainsKnownProperties(contentHash)) {
                        // Success case
                        _this.removeHiddenIframe(iframe);
                        clearInterval(intervalId);
                        resolve(contentHash);
                        return;
                    }
                }, _this.pollIntervalMilliseconds);
            });
        };
        /**
         * @hidden
         * Loads iframe with authorization endpoint URL
         * @ignore
         */
        SilentHandler.prototype.loadFrame = function (urlNavigate) {
            var _this = this;
            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentHandlerLoadFrame, this.authCodeRequest.correlationId);
            /*
             * This trick overcomes iframe navigation in IE
             * IE does not load the page consistently in iframe
             */
            return new Promise(function (resolve, reject) {
                var frameHandle = _this.createHiddenIframe();
                setTimeout(function () {
                    if (!frameHandle) {
                        reject("Unable to load iframe");
                        return;
                    }
                    frameHandle.src = urlNavigate;
                    resolve(frameHandle);
                }, _this.navigateFrameWait);
            });
        };
        /**
         * @hidden
         * Loads the iframe synchronously when the navigateTimeFrame is set to `0`
         * @param urlNavigate
         * @param frameName
         * @param logger
         */
        SilentHandler.prototype.loadFrameSync = function (urlNavigate) {
            var frameHandle = this.createHiddenIframe();
            frameHandle.src = urlNavigate;
            return frameHandle;
        };
        /**
         * @hidden
         * Creates a new hidden iframe or gets an existing one for silent token renewal.
         * @ignore
         */
        SilentHandler.prototype.createHiddenIframe = function () {
            var authFrame = document.createElement("iframe");
            authFrame.style.visibility = "hidden";
            authFrame.style.position = "absolute";
            authFrame.style.width = authFrame.style.height = "0";
            authFrame.style.border = "0";
            authFrame.setAttribute("sandbox", "allow-scripts allow-same-origin allow-forms");
            document.getElementsByTagName("body")[0].appendChild(authFrame);
            return authFrame;
        };
        /**
         * @hidden
         * Removes a hidden iframe from the page.
         * @ignore
         */
        SilentHandler.prototype.removeHiddenIframe = function (iframe) {
            if (document.body === iframe.parentNode) {
                document.body.removeChild(iframe);
            }
        };
        return SilentHandler;
    }(InteractionHandler));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentIframeClient = /** @class */ (function (_super) {
        __extends$1(SilentIframeClient, _super);
        function SilentIframeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {
            var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;
            _this.apiId = apiId;
            _this.nativeStorage = nativeStorageImpl;
            return _this;
        }
        /**
         * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session
         * @param request
         */
        SilentIframeClient.prototype.acquireToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var acquireTokenMeasurement, silentRequest, serverTelemetryManager, authClient, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);
                            this.logger.verbose("acquireTokenByIframe called");
                            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);
                            // Check that we have some SSO data
                            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {
                                this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
                            }
                            // Check that prompt is set to none or no_session, throw error if it is set to anything else.
                            if (request.prompt && (request.prompt !== PromptValue.NONE) && (request.prompt !== PromptValue.NO_SESSION)) {
                                acquireTokenMeasurement.endMeasurement({
                                    success: false
                                });
                                throw BrowserAuthError.createSilentPromptValueError(request.prompt);
                            }
                            // Create silent request
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationRequest(__assign$1(__assign$1({}, request), { prompt: request.prompt || PromptValue.NONE }), exports.InteractionType.Silent)];
                        case 1:
                            silentRequest = _a.sent();
                            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);
                            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            // Initialize the client
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, request.correlationId);
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                        case 3:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientTokenHelper, request.correlationId);
                            return [4 /*yield*/, this.silentTokenHelper(authClient, silentRequest).then(function (result) {
                                    acquireTokenMeasurement.endMeasurement({
                                        success: true,
                                        fromCache: false,
                                        requestId: result.requestId
                                    });
                                    return result;
                                })];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByState(silentRequest.state);
                            acquireTokenMeasurement.endMeasurement({
                                errorCode: e_1 instanceof AuthError && e_1.errorCode || undefined,
                                subErrorCode: e_1 instanceof AuthError && e_1.subError || undefined,
                                success: false
                            });
                            throw e_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Currently Unsupported
         */
        SilentIframeClient.prototype.logout = function () {
            // Synchronous so we must reject
            return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());
        };
        /**
         * Helper which acquires an authorization code silently using a hidden iframe from given url
         * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.
         * @param navigateUrl
         * @param userRequestScopes
         */
        SilentIframeClient.prototype.silentTokenHelper = function (authClient, silentRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var authCodeRequest, navigateUrl, silentHandler, msalFrame, hash, serverParams, state, nativeInteractionClient, userRequestState;
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, silentRequest.correlationId);
                            // Create auth code request and generate PKCE params
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationCodeRequest, silentRequest.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(silentRequest)];
                        case 1:
                            authCodeRequest = _a.sent();
                            // Create authorize request url
                            this.performanceClient.setPreQueueTime(PerformanceEvents.GetAuthCodeUrl, silentRequest.correlationId);
                            return [4 /*yield*/, authClient.getAuthCodeUrl(__assign$1(__assign$1({}, silentRequest), { nativeBroker: NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme) }))];
                        case 2:
                            navigateUrl = _a.sent();
                            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);
                            // Get the frame handle for the silent request
                            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerInitiateAuthRequest, silentRequest.correlationId);
                            return [4 /*yield*/, silentHandler.initiateAuthRequest(navigateUrl)];
                        case 3:
                            msalFrame = _a.sent();
                            // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentHandlerMonitorIframeForHash, silentRequest.correlationId);
                            return [4 /*yield*/, silentHandler.monitorIframeForHash(msalFrame, this.config.system.iframeHashTimeout)];
                        case 4:
                            hash = _a.sent();
                            serverParams = UrlString.getDeserializedHash(hash);
                            state = this.validateAndExtractStateFromHash(serverParams, exports.InteractionType.Silent, authCodeRequest.correlationId);
                            if (serverParams.accountId) {
                                this.logger.verbose("Account id found in hash, calling WAM for token");
                                if (!this.nativeMessageHandler) {
                                    throw BrowserAuthError.createNativeConnectionNotEstablishedError();
                                }
                                nativeInteractionClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.apiId, this.performanceClient, this.nativeMessageHandler, serverParams.accountId, this.browserStorage, this.correlationId);
                                userRequestState = ProtocolUtils.parseRequestState(this.browserCrypto, state).userRequestState;
                                return [2 /*return*/, nativeInteractionClient.acquireToken(__assign$1(__assign$1({}, silentRequest), { state: userRequestState, prompt: silentRequest.prompt || PromptValue.NONE })).finally(function () {
                                        _this.browserStorage.cleanRequestByState(state);
                                    })];
                            }
                            // Handle response from hash string
                            this.performanceClient.setPreQueueTime(PerformanceEvents.HandleCodeResponseFromHash, silentRequest.correlationId);
                            return [2 /*return*/, silentHandler.handleCodeResponseFromHash(hash, state, authClient.authority, this.networkClient)];
                    }
                });
            });
        };
        return SilentIframeClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentRefreshClient = /** @class */ (function (_super) {
        __extends$1(SilentRefreshClient, _super);
        function SilentRefreshClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Exchanges the refresh token for new tokens
         * @param request
         */
        SilentRefreshClient.prototype.acquireToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentRequest, _a, acquireTokenMeasurement, serverTelemetryManager, refreshTokenClient;
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, request.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeBaseRequest, request.correlationId);
                            _a = [__assign$1({}, request)];
                            return [4 /*yield*/, this.initializeBaseRequest(request)];
                        case 1:
                            silentRequest = __assign$1.apply(void 0, _a.concat([_b.sent()]));
                            acquireTokenMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SilentRefreshClientAcquireToken, silentRequest.correlationId);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenSilent_silentFlow);
                            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority, silentRequest.azureCloudOptions)];
                        case 2:
                            refreshTokenClient = _b.sent();
                            this.logger.verbose("Refresh token client created");
                            // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);
                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest)
                                    .then(function (result) {
                                    acquireTokenMeasurement.endMeasurement({
                                        success: true,
                                        fromCache: result.fromCache,
                                        requestId: result.requestId
                                    });
                                    return result;
                                })
                                    .catch(function (e) {
                                    if (e instanceof AuthError) {
                                        e.setCorrelationId(_this.correlationId);
                                    }
                                    serverTelemetryManager.cacheFailedRequest(e);
                                    acquireTokenMeasurement.endMeasurement({
                                        errorCode: e.errorCode,
                                        subErrorCode: e.subError,
                                        success: false
                                    });
                                    throw e;
                                })];
                    }
                });
            });
        };
        /**
         * Currently Unsupported
         */
        SilentRefreshClient.prototype.logout = function () {
            // Synchronous so we must reject
            return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());
        };
        /**
         * Creates a Refresh Client with the given authority, or the default authority.
         * @param serverTelemetryManager
         * @param authorityUrl
         */
        SilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl, azureCloudOptions) {
            return __awaiter$1(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Create auth module.
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, this.correlationId);
                            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl, azureCloudOptions)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new RefreshTokenClient(clientConfig, this.performanceClient)];
                    }
                });
            });
        };
        return SilentRefreshClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EventHandler = /** @class */ (function () {
        function EventHandler(logger, browserCrypto) {
            this.eventCallbacks = new Map();
            this.logger = logger;
            this.browserCrypto = browserCrypto;
            this.listeningToStorageEvents = false;
            this.handleAccountCacheChange = this.handleAccountCacheChange.bind(this);
        }
        /**
         * Adds event callbacks to array
         * @param callback
         */
        EventHandler.prototype.addEventCallback = function (callback) {
            if (typeof window !== "undefined") {
                var callbackId = this.browserCrypto.createNewGuid();
                this.eventCallbacks.set(callbackId, callback);
                this.logger.verbose("Event callback registered with id: " + callbackId);
                return callbackId;
            }
            return null;
        };
        /**
         * Removes callback with provided id from callback array
         * @param callbackId
         */
        EventHandler.prototype.removeEventCallback = function (callbackId) {
            this.eventCallbacks.delete(callbackId);
            this.logger.verbose("Event callback " + callbackId + " removed.");
        };
        /**
         * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
         */
        EventHandler.prototype.enableAccountStorageEvents = function () {
            if (typeof window === "undefined") {
                return;
            }
            if (!this.listeningToStorageEvents) {
                this.logger.verbose("Adding account storage listener.");
                this.listeningToStorageEvents = true;
                window.addEventListener("storage", this.handleAccountCacheChange);
            }
            else {
                this.logger.verbose("Account storage listener already registered.");
            }
        };
        /**
         * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
         */
        EventHandler.prototype.disableAccountStorageEvents = function () {
            if (typeof window === "undefined") {
                return;
            }
            if (this.listeningToStorageEvents) {
                this.logger.verbose("Removing account storage listener.");
                window.removeEventListener("storage", this.handleAccountCacheChange);
                this.listeningToStorageEvents = false;
            }
            else {
                this.logger.verbose("No account storage listener registered.");
            }
        };
        /**
         * Emits events by calling callback with event message
         * @param eventType
         * @param interactionType
         * @param payload
         * @param error
         */
        EventHandler.prototype.emitEvent = function (eventType, interactionType, payload, error) {
            var _this = this;
            if (typeof window !== "undefined") {
                var message_1 = {
                    eventType: eventType,
                    interactionType: interactionType || null,
                    payload: payload || null,
                    error: error || null,
                    timestamp: Date.now()
                };
                this.logger.info("Emitting event: " + eventType);
                this.eventCallbacks.forEach(function (callback, callbackId) {
                    _this.logger.verbose("Emitting event to callback " + callbackId + ": " + eventType);
                    callback.apply(null, [message_1]);
                });
            }
        };
        /**
         * Emit account added/removed events when cached accounts are changed in a different tab or frame
         */
        EventHandler.prototype.handleAccountCacheChange = function (e) {
            try {
                var cacheValue = e.newValue || e.oldValue;
                if (!cacheValue) {
                    return;
                }
                var parsedValue = JSON.parse(cacheValue);
                if (typeof parsedValue !== "object" || !AccountEntity.isAccountEntity(parsedValue)) {
                    return;
                }
                var accountEntity = CacheManager.toObject(new AccountEntity(), parsedValue);
                var accountInfo = accountEntity.getAccountInfo();
                if (!e.oldValue && e.newValue) {
                    this.logger.info("Account was added to cache in a different window");
                    this.emitEvent(exports.EventType.ACCOUNT_ADDED, undefined, accountInfo);
                }
                else if (!e.newValue && e.oldValue) {
                    this.logger.info("Account was removed from cache in a different window");
                    this.emitEvent(exports.EventType.ACCOUNT_REMOVED, undefined, accountInfo);
                }
            }
            catch (e) {
                return;
            }
        };
        return EventHandler;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility class for math specific functions in browser.
     */
    var MathUtils = /** @class */ (function () {
        function MathUtils() {
        }
        /**
         * Decimal to Hex
         *
         * @param num
         */
        MathUtils.decimalToHex = function (num) {
            var hex = num.toString(16);
            while (hex.length < 2) {
                hex = "0" + hex;
            }
            return hex;
        };
        return MathUtils;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var GuidGenerator = /** @class */ (function () {
        function GuidGenerator(cryptoObj) {
            this.cryptoObj = cryptoObj;
        }
        /*
         * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or
         * pseudo-random numbers.
         * The algorithm is as follows:
         *     Set the two most significant bits (bits 6 and 7) of the
         *        clock_seq_hi_and_reserved to zero and one, respectively.
         *     Set the four most significant bits (bits 12 through 15) of the
         *        time_hi_and_version field to the 4-bit version number from
         *        Section 4.1.3. Version4
         *     Set all the other bits to randomly (or pseudo-randomly) chosen
         *     values.
         * UUID                   = time-low "-" time-mid "-"time-high-and-version "-"clock-seq-reserved and low(2hexOctet)"-" node
         * time-low               = 4hexOctet
         * time-mid               = 2hexOctet
         * time-high-and-version  = 2hexOctet
         * clock-seq-and-reserved = hexOctet:
         * clock-seq-low          = hexOctet
         * node                   = 6hexOctet
         * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx
         * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10
         * y values are 8, 9, A, B
         */
        GuidGenerator.prototype.generateGuid = function () {
            try {
                var buffer = new Uint8Array(16);
                this.cryptoObj.getRandomValues(buffer);
                // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).
                buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.
                buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = "4".
                // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.
                buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.
                buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.
                return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])
                    + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])
                    + "-" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])
                    + "-" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])
                    + "-" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])
                    + "-" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])
                    + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])
                    + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);
            }
            catch (err) {
                var guidHolder = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
                var hex = "0123456789abcdef";
                var r = 0;
                var guidResponse = Constants.EMPTY_STRING;
                for (var i = 0; i < 36; i++) {
                    if (guidHolder[i] !== "-" && guidHolder[i] !== "4") {
                        // each x and y needs to be random
                        r = Math.random() * 16 | 0;
                    }
                    if (guidHolder[i] === "x") {
                        guidResponse += hex[r];
                    }
                    else if (guidHolder[i] === "y") {
                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random
                        r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??
                        r |= 0x8; // set pos 3 to 1 as 1???
                        guidResponse += hex[r];
                    }
                    else {
                        guidResponse += guidHolder[i];
                    }
                }
                return guidResponse;
            }
        };
        /**
         * verifies if a string is  GUID
         * @param guid
         */
        GuidGenerator.prototype.isGuid = function (guid) {
            var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
            return regexGuid.test(guid);
        };
        return GuidGenerator;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Utility functions for strings in a browser. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var BrowserStringUtils = /** @class */ (function () {
        function BrowserStringUtils() {
        }
        /**
         * Converts string to Uint8Array
         * @param sDOMStr
         */
        BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {
            var nChr;
            var nArrLen = 0;
            var nStrLen = sDOMStr.length;
            /* mapping... */
            for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {
                nChr = sDOMStr.charCodeAt(nMapIdx);
                nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;
            }
            var aBytes = new Uint8Array(nArrLen);
            /* transcription... */
            for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {
                nChr = sDOMStr.charCodeAt(nChrIdx);
                if (nChr < 128) {
                    /* one byte */
                    aBytes[nIdx++] = nChr;
                }
                else if (nChr < 0x800) {
                    /* two bytes */
                    aBytes[nIdx++] = 192 + (nChr >>> 6);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x10000) {
                    /* three bytes */
                    aBytes[nIdx++] = 224 + (nChr >>> 12);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x200000) {
                    /* four bytes */
                    aBytes[nIdx++] = 240 + (nChr >>> 18);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else if (nChr < 0x4000000) {
                    /* five bytes */
                    aBytes[nIdx++] = 248 + (nChr >>> 24);
                    aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
                else /* if (nChr <= 0x7fffffff) */ {
                    /* six bytes */
                    aBytes[nIdx++] = 252 + (nChr >>> 30);
                    aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);
                    aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);
                    aBytes[nIdx++] = 128 + (nChr & 63);
                }
            }
            return aBytes;
        };
        /**
         * Converst string to ArrayBuffer
         * @param dataString
         */
        BrowserStringUtils.stringToArrayBuffer = function (dataString) {
            var data = new ArrayBuffer(dataString.length);
            var dataView = new Uint8Array(data);
            for (var i = 0; i < dataString.length; i++) {
                dataView[i] = dataString.charCodeAt(i);
            }
            return data;
        };
        /**
         * Converts Uint8Array to a string
         * @param aBytes
         */
        BrowserStringUtils.utf8ArrToString = function (aBytes) {
            var sView = Constants.EMPTY_STRING;
            for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {
                nPart = aBytes[nIdx];
                sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */
                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */
                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */
                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */
                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */
                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128
                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */
                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128
                                    : /* nPart < 127 ? */ /* one byte */
                                        nPart);
            }
            return sView;
        };
        /**
         * Returns stringified jwk.
         * @param jwk
         */
        BrowserStringUtils.getSortedObjectString = function (obj) {
            return JSON.stringify(obj, Object.keys(obj).sort());
        };
        return BrowserStringUtils;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which exposes APIs to encode plaintext to base64 encoded string. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var Base64Encode = /** @class */ (function () {
        function Base64Encode() {
        }
        /**
         * Returns URL Safe b64 encoded string from a plaintext string.
         * @param input
         */
        Base64Encode.prototype.urlEncode = function (input) {
            return encodeURIComponent(this.encode(input)
                .replace(/=/g, Constants.EMPTY_STRING)
                .replace(/\+/g, "-")
                .replace(/\//g, "_"));
        };
        /**
         * Returns URL Safe b64 encoded string from an int8Array.
         * @param inputArr
         */
        Base64Encode.prototype.urlEncodeArr = function (inputArr) {
            return this.base64EncArr(inputArr)
                .replace(/=/g, Constants.EMPTY_STRING)
                .replace(/\+/g, "-")
                .replace(/\//g, "_");
        };
        /**
         * Returns b64 encoded string from plaintext string.
         * @param input
         */
        Base64Encode.prototype.encode = function (input) {
            var inputUtf8Arr = BrowserStringUtils.stringToUtf8Arr(input);
            return this.base64EncArr(inputUtf8Arr);
        };
        /**
         * Base64 encode byte array
         * @param aBytes
         */
        Base64Encode.prototype.base64EncArr = function (aBytes) {
            var eqLen = (3 - (aBytes.length % 3)) % 3;
            var sB64Enc = Constants.EMPTY_STRING;
            for (var nMod3 = void 0, nLen = aBytes.length, nUint24 = 0, nIdx = 0; nIdx < nLen; nIdx++) {
                nMod3 = nIdx % 3;
                /* Uncomment the following line in order to split the output in lines 76-character long: */
                /*
                 *if (nIdx > 0 && (nIdx * 4 / 3) % 76 === 0) { sB64Enc += "\r\n"; }
                 */
                nUint24 |= aBytes[nIdx] << (16 >>> nMod3 & 24);
                if (nMod3 === 2 || aBytes.length - nIdx === 1) {
                    sB64Enc += String.fromCharCode(this.uint6ToB64(nUint24 >>> 18 & 63), this.uint6ToB64(nUint24 >>> 12 & 63), this.uint6ToB64(nUint24 >>> 6 & 63), this.uint6ToB64(nUint24 & 63));
                    nUint24 = 0;
                }
            }
            return eqLen === 0 ? sB64Enc : sB64Enc.substring(0, sB64Enc.length - eqLen) + (eqLen === 1 ? "=" : "==");
        };
        /**
         * Base64 string to array encoding helper
         * @param nUint6
         */
        Base64Encode.prototype.uint6ToB64 = function (nUint6) {
            return nUint6 < 26 ?
                nUint6 + 65
                : nUint6 < 52 ?
                    nUint6 + 71
                    : nUint6 < 62 ?
                        nUint6 - 4
                        : nUint6 === 62 ?
                            43
                            : nUint6 === 63 ?
                                47
                                :
                                    65;
        };
        return Base64Encode;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which exposes APIs to decode base64 strings to plaintext. See here for implementation details:
     * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64
     */
    var Base64Decode = /** @class */ (function () {
        function Base64Decode() {
        }
        /**
         * Returns a URL-safe plaintext decoded string from b64 encoded input.
         * @param input
         */
        Base64Decode.prototype.decode = function (input) {
            var encodedString = input.replace(/-/g, "+").replace(/_/g, "/");
            switch (encodedString.length % 4) {
                case 0:
                    break;
                case 2:
                    encodedString += "==";
                    break;
                case 3:
                    encodedString += "=";
                    break;
                default:
                    throw new Error("Invalid base64 string");
            }
            var inputUtf8Arr = this.base64DecToArr(encodedString);
            return BrowserStringUtils.utf8ArrToString(inputUtf8Arr);
        };
        /**
         * Decodes base64 into Uint8Array
         * @param base64String
         * @param nBlockSize
         */
        Base64Decode.prototype.base64DecToArr = function (base64String, nBlockSize) {
            var sB64Enc = base64String.replace(/[^A-Za-z0-9\+\/]/g, Constants.EMPTY_STRING);
            var nInLen = sB64Enc.length;
            var nOutLen = nBlockSize ? Math.ceil((nInLen * 3 + 1 >>> 2) / nBlockSize) * nBlockSize : nInLen * 3 + 1 >>> 2;
            var aBytes = new Uint8Array(nOutLen);
            for (var nMod3 = void 0, nMod4 = void 0, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
                nMod4 = nInIdx & 3;
                nUint24 |= this.b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;
                if (nMod4 === 3 || nInLen - nInIdx === 1) {
                    for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
                        aBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
                    }
                    nUint24 = 0;
                }
            }
            return aBytes;
        };
        /**
         * Base64 string to array decoding helper
         * @param charNum
         */
        Base64Decode.prototype.b64ToUint6 = function (charNum) {
            return charNum > 64 && charNum < 91 ?
                charNum - 65
                : charNum > 96 && charNum < 123 ?
                    charNum - 71
                    : charNum > 47 && charNum < 58 ?
                        charNum + 4
                        : charNum === 43 ?
                            62
                            : charNum === 47 ?
                                63
                                :
                                    0;
        };
        return Base64Decode;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    // Constant byte array length
    var RANDOM_BYTE_ARR_LENGTH = 32;
    /**
     * Class which exposes APIs to generate PKCE codes and code verifiers.
     */
    var PkceGenerator = /** @class */ (function () {
        function PkceGenerator(cryptoObj) {
            this.base64Encode = new Base64Encode();
            this.cryptoObj = cryptoObj;
        }
        /**
         * Generates PKCE Codes. See the RFC for more information: https://tools.ietf.org/html/rfc7636
         */
        PkceGenerator.prototype.generateCodes = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var codeVerifier, codeChallenge;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            codeVerifier = this.generateCodeVerifier();
                            return [4 /*yield*/, this.generateCodeChallengeFromVerifier(codeVerifier)];
                        case 1:
                            codeChallenge = _a.sent();
                            return [2 /*return*/, {
                                    verifier: codeVerifier,
                                    challenge: codeChallenge
                                }];
                    }
                });
            });
        };
        /**
         * Generates a random 32 byte buffer and returns the base64
         * encoded string to be used as a PKCE Code Verifier
         */
        PkceGenerator.prototype.generateCodeVerifier = function () {
            try {
                // Generate random values as utf-8
                var buffer = new Uint8Array(RANDOM_BYTE_ARR_LENGTH);
                this.cryptoObj.getRandomValues(buffer);
                // encode verifier as base64
                var pkceCodeVerifierB64 = this.base64Encode.urlEncodeArr(buffer);
                return pkceCodeVerifierB64;
            }
            catch (e) {
                throw BrowserAuthError.createPkceNotGeneratedError(e);
            }
        };
        /**
         * Creates a base64 encoded PKCE Code Challenge string from the
         * hash created from the PKCE Code Verifier supplied
         */
        PkceGenerator.prototype.generateCodeChallengeFromVerifier = function (pkceCodeVerifier) {
            return __awaiter$1(this, void 0, void 0, function () {
                var pkceHashedCodeVerifier, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.cryptoObj.sha256Digest(pkceCodeVerifier)];
                        case 1:
                            pkceHashedCodeVerifier = _a.sent();
                            // encode hash as base64
                            return [2 /*return*/, this.base64Encode.urlEncodeArr(new Uint8Array(pkceHashedCodeVerifier))];
                        case 2:
                            e_1 = _a.sent();
                            throw BrowserAuthError.createPkceNotGeneratedError(e_1);
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return PkceGenerator;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ModernBrowserCrypto = /** @class */ (function () {
        function ModernBrowserCrypto() {
        }
        ModernBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
            return window.crypto.getRandomValues(dataBuffer);
        };
        ModernBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.generateKey(algorithm, extractable, keyUsages)];
                });
            });
        };
        ModernBrowserCrypto.prototype.exportKey = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.exportKey(KEY_FORMAT_JWK, key)];
                });
            });
        };
        ModernBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];
                });
            });
        };
        ModernBrowserCrypto.prototype.sign = function (algorithm, key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.sign(algorithm, key, data)];
                });
            });
        };
        ModernBrowserCrypto.prototype.digest = function (algorithm, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.crypto.subtle.digest(algorithm, data)];
                });
            });
        };
        return ModernBrowserCrypto;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var MsrBrowserCrypto = /** @class */ (function () {
        function MsrBrowserCrypto() {
        }
        MsrBrowserCrypto.prototype.initPrng = function (entropy) {
            // Turn into array, as initPrng seems to not always like Uint8Array (even though it should support both)
            return window.msrCrypto.initPrng(__spread(entropy));
        };
        MsrBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
            return window.msrCrypto.getRandomValues(dataBuffer);
        };
        MsrBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.msrCrypto.subtle.generateKey(algorithm, extractable, keyUsages)];
                });
            });
        };
        MsrBrowserCrypto.prototype.exportKey = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.msrCrypto.subtle.exportKey(KEY_FORMAT_JWK, key)];
                });
            });
        };
        MsrBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.msrCrypto.subtle.importKey(KEY_FORMAT_JWK, keyData, algorithm, extractable, keyUsages)];
                });
            });
        };
        MsrBrowserCrypto.prototype.sign = function (algorithm, key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.msrCrypto.subtle.sign(algorithm, key, data)];
                });
            });
        };
        MsrBrowserCrypto.prototype.digest = function (algorithm, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, window.msrCrypto.subtle.digest(algorithm, data)];
                });
            });
        };
        return MsrBrowserCrypto;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var MsBrowserCrypto = /** @class */ (function () {
        function MsBrowserCrypto() {
        }
        MsBrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
            return window["msCrypto"].getRandomValues(dataBuffer);
        };
        MsBrowserCrypto.prototype.generateKey = function (algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msGenerateKey = window["msCrypto"].subtle.generateKey(algorithm, extractable, keyUsages);
                            msGenerateKey.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msGenerateKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        MsBrowserCrypto.prototype.exportKey = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msExportKey = window["msCrypto"].subtle.exportKey(KEY_FORMAT_JWK, key);
                            msExportKey.addEventListener("complete", function (e) {
                                var resultBuffer = e.target.result;
                                var resultString = BrowserStringUtils.utf8ArrToString(new Uint8Array(resultBuffer))
                                    .replace(/\r/g, Constants.EMPTY_STRING)
                                    .replace(/\n/g, Constants.EMPTY_STRING)
                                    .replace(/\t/g, Constants.EMPTY_STRING)
                                    .split(" ").join(Constants.EMPTY_STRING)
                                    .replace("\u0000", Constants.EMPTY_STRING);
                                try {
                                    resolve(JSON.parse(resultString));
                                }
                                catch (e) {
                                    reject(e);
                                }
                            });
                            msExportKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        MsBrowserCrypto.prototype.importKey = function (keyData, algorithm, extractable, keyUsages) {
            return __awaiter$1(this, void 0, void 0, function () {
                var keyString, keyBuffer;
                return __generator$1(this, function (_a) {
                    keyString = BrowserStringUtils.getSortedObjectString(keyData);
                    keyBuffer = BrowserStringUtils.stringToArrayBuffer(keyString);
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msImportKey = window["msCrypto"].subtle.importKey(KEY_FORMAT_JWK, keyBuffer, algorithm, extractable, keyUsages);
                            msImportKey.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msImportKey.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        MsBrowserCrypto.prototype.sign = function (algorithm, key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var msSign = window["msCrypto"].subtle.sign(algorithm, key, data);
                            msSign.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            msSign.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        MsBrowserCrypto.prototype.digest = function (algorithm, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var digestOperation = window["msCrypto"].subtle.digest(algorithm, data.buffer);
                            digestOperation.addEventListener("complete", function (e) {
                                resolve(e.target.result);
                            });
                            digestOperation.addEventListener("error", function (error) {
                                reject(error);
                            });
                        })];
                });
            });
        };
        return MsBrowserCrypto;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * See here for more info on RsaHashedKeyGenParams: https://developer.mozilla.org/en-US/docs/Web/API/RsaHashedKeyGenParams
     */
    // RSA KeyGen Algorithm
    var PKCS1_V15_KEYGEN_ALG = "RSASSA-PKCS1-v1_5";
    // SHA-256 hashing algorithm
    var S256_HASH_ALG = "SHA-256";
    // MOD length for PoP tokens
    var MODULUS_LENGTH = 2048;
    // Public Exponent
    var PUBLIC_EXPONENT = new Uint8Array([0x01, 0x00, 0x01]);
    /**
     * This class implements functions used by the browser library to perform cryptography operations such as
     * hashing and encoding. It also has helper functions to validate the availability of specific APIs.
     */
    var BrowserCrypto = /** @class */ (function () {
        function BrowserCrypto(logger, cryptoOptions) {
            var _a, _b;
            this.logger = logger;
            this.cryptoOptions = cryptoOptions;
            if (this.hasBrowserCrypto()) {
                // Use standard modern web crypto if available
                this.logger.verbose("BrowserCrypto: modern crypto interface available");
                this.subtleCrypto = new ModernBrowserCrypto();
            }
            else if (this.hasIECrypto()) {
                // For IE11, use msCrypto interface
                this.logger.verbose("BrowserCrypto: MS crypto interface available");
                this.subtleCrypto = new MsBrowserCrypto();
            }
            else if (this.hasMsrCrypto() && ((_a = this.cryptoOptions) === null || _a === void 0 ? void 0 : _a.useMsrCrypto)) {
                // For other browsers, use MSR Crypto if found
                this.logger.verbose("BrowserCrypto: MSR crypto interface available");
                this.subtleCrypto = new MsrBrowserCrypto();
            }
            else {
                if (this.hasMsrCrypto()) {
                    this.logger.info("BrowserCrypto: MSR Crypto interface available but system.cryptoOptions.useMsrCrypto not enabled");
                }
                this.logger.error("BrowserCrypto: No crypto interfaces available.");
                throw BrowserAuthError.createCryptoNotAvailableError("Browser crypto, msCrypto, or msrCrypto interfaces not available.");
            }
            // Mainly needed for MSR Crypto: https://github.com/microsoft/MSR-JavaScript-Crypto#random-number-generator-prng
            if (this.subtleCrypto.initPrng) {
                this.logger.verbose("BrowserCrypto: Interface requires entropy");
                if (!((_b = this.cryptoOptions) === null || _b === void 0 ? void 0 : _b.entropy)) {
                    this.logger.error("BrowserCrypto: Interface requires entropy but none provided.");
                    throw BrowserConfigurationAuthError.createEntropyNotProvided();
                }
                this.logger.verbose("BrowserCrypto: Entropy provided");
                this.subtleCrypto.initPrng(this.cryptoOptions.entropy);
            }
            this.keygenAlgorithmOptions = {
                name: PKCS1_V15_KEYGEN_ALG,
                hash: S256_HASH_ALG,
                modulusLength: MODULUS_LENGTH,
                publicExponent: PUBLIC_EXPONENT
            };
        }
        /**
         * Check whether IE crypto or other browser cryptography is available.
         */
        BrowserCrypto.prototype.hasIECrypto = function () {
            return "msCrypto" in window;
        };
        /**
         * Check whether browser crypto is available.
         */
        BrowserCrypto.prototype.hasBrowserCrypto = function () {
            return "crypto" in window;
        };
        /**
         * Check whether MSR crypto polyfill is available
         */
        BrowserCrypto.prototype.hasMsrCrypto = function () {
            return "msrCrypto" in window;
        };
        /**
         * Returns a sha-256 hash of the given dataString as an ArrayBuffer.
         * @param dataString
         */
        BrowserCrypto.prototype.sha256Digest = function (dataString) {
            return __awaiter$1(this, void 0, void 0, function () {
                var data;
                return __generator$1(this, function (_a) {
                    data = BrowserStringUtils.stringToUtf8Arr(dataString);
                    // MSR Crypto wants object with name property, instead of string
                    return [2 /*return*/, this.subtleCrypto.digest({ name: S256_HASH_ALG }, data)];
                });
            });
        };
        /**
         * Populates buffer with cryptographically random values.
         * @param dataBuffer
         */
        BrowserCrypto.prototype.getRandomValues = function (dataBuffer) {
            return this.subtleCrypto.getRandomValues(dataBuffer);
        };
        /**
         * Generates a keypair based on current keygen algorithm config.
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.generateKeyPair = function (extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.subtleCrypto.generateKey(this.keygenAlgorithmOptions, extractable, usages)];
                });
            });
        };
        /**
         * Export key as Json Web Key (JWK)
         * @param key
         * @param format
         */
        BrowserCrypto.prototype.exportJwk = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.subtleCrypto.exportKey(key)];
                });
            });
        };
        /**
         * Imports key as Json Web Key (JWK), can set extractable and usages.
         * @param key
         * @param format
         * @param extractable
         * @param usages
         */
        BrowserCrypto.prototype.importJwk = function (key, extractable, usages) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.subtleCrypto.importKey(key, this.keygenAlgorithmOptions, extractable, usages)];
                });
            });
        };
        /**
         * Signs given data with given key
         * @param key
         * @param data
         */
        BrowserCrypto.prototype.sign = function (key, data) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.subtleCrypto.sign(this.keygenAlgorithmOptions, key, data)];
                });
            });
        };
        return BrowserCrypto;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API
     */
    var DatabaseStorage = /** @class */ (function () {
        function DatabaseStorage() {
            this.dbName = DB_NAME;
            this.version = DB_VERSION;
            this.tableName = DB_TABLE_NAME;
            this.dbOpen = false;
        }
        /**
         * Opens IndexedDB instance.
         */
        DatabaseStorage.prototype.open = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var openDB = window.indexedDB.open(_this.dbName, _this.version);
                            openDB.addEventListener("upgradeneeded", function (e) {
                                var event = e;
                                event.target.result.createObjectStore(_this.tableName);
                            });
                            openDB.addEventListener("success", function (e) {
                                var event = e;
                                _this.db = event.target.result;
                                _this.dbOpen = true;
                                resolve();
                            });
                            openDB.addEventListener("error", function () { return reject(BrowserAuthError.createDatabaseUnavailableError()); });
                        })];
                });
            });
        };
        /**
         * Closes the connection to IndexedDB database when all pending transactions
         * complete.
         */
        DatabaseStorage.prototype.closeConnection = function () {
            var db = this.db;
            if (db && this.dbOpen) {
                db.close();
                this.dbOpen = false;
            }
        };
        /**
         * Opens database if it's not already open
         */
        DatabaseStorage.prototype.validateDbIsOpen = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.dbOpen) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.open()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Retrieves item from IndexedDB instance.
         * @param key
         */
        DatabaseStorage.prototype.getItem = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    // TODO: Add timeouts?
                                    if (!_this.db) {
                                        return reject(BrowserAuthError.createDatabaseNotOpenError());
                                    }
                                    var transaction = _this.db.transaction([_this.tableName], "readonly");
                                    var objectStore = transaction.objectStore(_this.tableName);
                                    var dbGet = objectStore.get(key);
                                    dbGet.addEventListener("success", function (e) {
                                        var event = e;
                                        _this.closeConnection();
                                        resolve(event.target.result);
                                    });
                                    dbGet.addEventListener("error", function (e) {
                                        _this.closeConnection();
                                        reject(e);
                                    });
                                })];
                    }
                });
            });
        };
        /**
         * Adds item to IndexedDB under given key
         * @param key
         * @param payload
         */
        DatabaseStorage.prototype.setItem = function (key, payload) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    // TODO: Add timeouts?
                                    if (!_this.db) {
                                        return reject(BrowserAuthError.createDatabaseNotOpenError());
                                    }
                                    var transaction = _this.db.transaction([_this.tableName], "readwrite");
                                    var objectStore = transaction.objectStore(_this.tableName);
                                    var dbPut = objectStore.put(payload, key);
                                    dbPut.addEventListener("success", function () {
                                        _this.closeConnection();
                                        resolve();
                                    });
                                    dbPut.addEventListener("error", function (e) {
                                        _this.closeConnection();
                                        reject(e);
                                    });
                                })];
                    }
                });
            });
        };
        /**
         * Removes item from IndexedDB under given key
         * @param key
         */
        DatabaseStorage.prototype.removeItem = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    if (!_this.db) {
                                        return reject(BrowserAuthError.createDatabaseNotOpenError());
                                    }
                                    var transaction = _this.db.transaction([_this.tableName], "readwrite");
                                    var objectStore = transaction.objectStore(_this.tableName);
                                    var dbDelete = objectStore.delete(key);
                                    dbDelete.addEventListener("success", function () {
                                        _this.closeConnection();
                                        resolve();
                                    });
                                    dbDelete.addEventListener("error", function (e) {
                                        _this.closeConnection();
                                        reject(e);
                                    });
                                })];
                    }
                });
            });
        };
        /**
         * Get all the keys from the storage object as an iterable array of strings.
         */
        DatabaseStorage.prototype.getKeys = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    if (!_this.db) {
                                        return reject(BrowserAuthError.createDatabaseNotOpenError());
                                    }
                                    var transaction = _this.db.transaction([_this.tableName], "readonly");
                                    var objectStore = transaction.objectStore(_this.tableName);
                                    var dbGetKeys = objectStore.getAllKeys();
                                    dbGetKeys.addEventListener("success", function (e) {
                                        var event = e;
                                        _this.closeConnection();
                                        resolve(event.target.result);
                                    });
                                    dbGetKeys.addEventListener("error", function (e) {
                                        _this.closeConnection();
                                        reject(e);
                                    });
                                })];
                    }
                });
            });
        };
        /**
         *
         * Checks whether there is an object under the search key in the object store
         */
        DatabaseStorage.prototype.containsKey = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var _this = this;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.validateDbIsOpen()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    if (!_this.db) {
                                        return reject(BrowserAuthError.createDatabaseNotOpenError());
                                    }
                                    var transaction = _this.db.transaction([_this.tableName], "readonly");
                                    var objectStore = transaction.objectStore(_this.tableName);
                                    var dbContainsKey = objectStore.count(key);
                                    dbContainsKey.addEventListener("success", function (e) {
                                        var event = e;
                                        _this.closeConnection();
                                        resolve(event.target.result === 1);
                                    });
                                    dbContainsKey.addEventListener("error", function (e) {
                                        _this.closeConnection();
                                        reject(e);
                                    });
                                })];
                    }
                });
            });
        };
        /**
         * Deletes the MSAL database. The database is deleted rather than cleared to make it possible
         * for client applications to downgrade to a previous MSAL version without worrying about forward compatibility issues
         * with IndexedDB database versions.
         */
        DatabaseStorage.prototype.deleteDatabase = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    // Check if database being deleted exists
                    if (this.db && this.dbOpen) {
                        this.closeConnection();
                    }
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var deleteDbRequest = window.indexedDB.deleteDatabase(DB_NAME);
                            deleteDbRequest.addEventListener("success", function () { return resolve(true); });
                            deleteDbRequest.addEventListener("blocked", function () { return resolve(true); });
                            deleteDbRequest.addEventListener("error", function () { return reject(false); });
                        })];
                });
            });
        };
        return DatabaseStorage;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class allows MSAL to store artifacts asynchronously using the DatabaseStorage IndexedDB wrapper,
     * backed up with the more volatile MemoryStorage object for cases in which IndexedDB may be unavailable.
     */
    var AsyncMemoryStorage = /** @class */ (function () {
        function AsyncMemoryStorage(logger, storeName) {
            this.inMemoryCache = new MemoryStorage();
            this.indexedDBCache = new DatabaseStorage();
            this.logger = logger;
            this.storeName = storeName;
        }
        AsyncMemoryStorage.prototype.handleDatabaseAccessError = function (error) {
            if (error instanceof BrowserAuthError && error.errorCode === BrowserAuthErrorMessage.databaseUnavailable.code) {
                this.logger.error("Could not access persistent storage. This may be caused by browser privacy features which block persistent storage in third-party contexts.");
            }
            else {
                throw error;
            }
        };
        /**
         * Get the item matching the given key. Tries in-memory cache first, then in the asynchronous
         * storage object if item isn't found in-memory.
         * @param key
         */
        AsyncMemoryStorage.prototype.getItem = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var item, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            item = this.inMemoryCache.getItem(key);
                            if (!!item) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this.logger.verbose("Queried item not found in in-memory cache, now querying persistent storage.");
                            return [4 /*yield*/, this.indexedDBCache.getItem(key)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            e_1 = _a.sent();
                            this.handleDatabaseAccessError(e_1);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, item];
                    }
                });
            });
        };
        /**
         * Sets the item in the in-memory cache and then tries to set it in the asynchronous
         * storage object with the given key.
         * @param key
         * @param value
         */
        AsyncMemoryStorage.prototype.setItem = function (key, value) {
            return __awaiter$1(this, void 0, void 0, function () {
                var e_2;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.inMemoryCache.setItem(key, value);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.indexedDBCache.setItem(key, value)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _a.sent();
                            this.handleDatabaseAccessError(e_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Removes the item matching the key from the in-memory cache, then tries to remove it from the asynchronous storage object.
         * @param key
         */
        AsyncMemoryStorage.prototype.removeItem = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var e_3;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.inMemoryCache.removeItem(key);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.indexedDBCache.removeItem(key)];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_3 = _a.sent();
                            this.handleDatabaseAccessError(e_3);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Get all the keys from the in-memory cache as an iterable array of strings. If no keys are found, query the keys in the
         * asynchronous storage object.
         */
        AsyncMemoryStorage.prototype.getKeys = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var cacheKeys, e_4;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            cacheKeys = this.inMemoryCache.getKeys();
                            if (!(cacheKeys.length === 0)) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this.logger.verbose("In-memory cache is empty, now querying persistent storage.");
                            return [4 /*yield*/, this.indexedDBCache.getKeys()];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            e_4 = _a.sent();
                            this.handleDatabaseAccessError(e_4);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, cacheKeys];
                    }
                });
            });
        };
        /**
         * Returns true or false if the given key is present in the cache.
         * @param key
         */
        AsyncMemoryStorage.prototype.containsKey = function (key) {
            return __awaiter$1(this, void 0, void 0, function () {
                var containsKey, e_5;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            containsKey = this.inMemoryCache.containsKey(key);
                            if (!!containsKey) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            this.logger.verbose("Key not found in in-memory cache, now querying persistent storage.");
                            return [4 /*yield*/, this.indexedDBCache.containsKey(key)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            e_5 = _a.sent();
                            this.handleDatabaseAccessError(e_5);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, containsKey];
                    }
                });
            });
        };
        /**
         * Clears in-memory Map
         */
        AsyncMemoryStorage.prototype.clearInMemory = function () {
            // InMemory cache is a Map instance, clear is straightforward
            this.logger.verbose("Deleting in-memory keystore " + this.storeName);
            this.inMemoryCache.clear();
            this.logger.verbose("In-memory keystore " + this.storeName + " deleted");
        };
        /**
         * Tries to delete the IndexedDB database
         * @returns
         */
        AsyncMemoryStorage.prototype.clearPersistent = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var dbDeleted, e_6;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            this.logger.verbose("Deleting persistent keystore");
                            return [4 /*yield*/, this.indexedDBCache.deleteDatabase()];
                        case 1:
                            dbDeleted = _a.sent();
                            if (dbDeleted) {
                                this.logger.verbose("Persistent keystore deleted");
                            }
                            return [2 /*return*/, dbDeleted];
                        case 2:
                            e_6 = _a.sent();
                            this.handleDatabaseAccessError(e_6);
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return AsyncMemoryStorage;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var CryptoKeyStoreNames;
    (function (CryptoKeyStoreNames) {
        CryptoKeyStoreNames["asymmetricKeys"] = "asymmetricKeys";
        CryptoKeyStoreNames["symmetricKeys"] = "symmetricKeys";
    })(CryptoKeyStoreNames || (CryptoKeyStoreNames = {}));
    /**
     * MSAL CryptoKeyStore DB Version 2
     */
    var CryptoKeyStore = /** @class */ (function () {
        function CryptoKeyStore(logger) {
            this.logger = logger;
            this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);
            this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);
        }
        CryptoKeyStore.prototype.clear = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // Delete in-memory keystores
                            this.asymmetricKeys.clearInMemory();
                            this.symmetricKeys.clearInMemory();
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.asymmetricKeys.clearPersistent()];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, true];
                        case 3:
                            e_1 = _a.sent();
                            if (e_1 instanceof Error) {
                                this.logger.error("Clearing keystore failed with error: " + e_1.message);
                            }
                            else {
                                this.logger.error("Clearing keystore failed with unknown error");
                            }
                            return [2 /*return*/, false];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return CryptoKeyStore;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and
     * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).
     */
    var CryptoOps = /** @class */ (function () {
        function CryptoOps(logger, performanceClient, cryptoConfig) {
            this.logger = logger;
            // Browser crypto needs to be validated first before any other classes can be set.
            this.browserCrypto = new BrowserCrypto(this.logger, cryptoConfig);
            this.b64Encode = new Base64Encode();
            this.b64Decode = new Base64Decode();
            this.guidGenerator = new GuidGenerator(this.browserCrypto);
            this.pkceGenerator = new PkceGenerator(this.browserCrypto);
            this.cache = new CryptoKeyStore(this.logger);
            this.performanceClient = performanceClient;
        }
        /**
         * Creates a new random GUID - used to populate state and nonce.
         * @returns string (GUID)
         */
        CryptoOps.prototype.createNewGuid = function () {
            return this.guidGenerator.generateGuid();
        };
        /**
         * Encodes input string to base64.
         * @param input
         */
        CryptoOps.prototype.base64Encode = function (input) {
            return this.b64Encode.encode(input);
        };
        /**
         * Decodes input string from base64.
         * @param input
         */
        CryptoOps.prototype.base64Decode = function (input) {
            return this.b64Decode.decode(input);
        };
        /**
         * Generates PKCE codes used in Authorization Code Flow.
         */
        CryptoOps.prototype.generatePkceCodes = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.pkceGenerator.generateCodes()];
                });
            });
        };
        /**
         * Generates a keypair, stores it and returns a thumbprint
         * @param request
         */
        CryptoOps.prototype.getPublicKeyThumbprint = function (request) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var publicKeyThumbMeasurement, keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkHash, privateKeyJwk, unextractablePrivateKey;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            publicKeyThumbMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsGetPublicKeyThumbprint, request.correlationId);
                            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];
                        case 1:
                            keyPair = _b.sent();
                            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];
                        case 2:
                            publicKeyJwk = _b.sent();
                            pubKeyThumprintObj = {
                                e: publicKeyJwk.e,
                                kty: publicKeyJwk.kty,
                                n: publicKeyJwk.n
                            };
                            publicJwkString = BrowserStringUtils.getSortedObjectString(pubKeyThumprintObj);
                            return [4 /*yield*/, this.hashString(publicJwkString)];
                        case 3:
                            publicJwkHash = _b.sent();
                            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];
                        case 4:
                            privateKeyJwk = _b.sent();
                            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, ["sign"])];
                        case 5:
                            unextractablePrivateKey = _b.sent();
                            // Store Keypair data in keystore
                            return [4 /*yield*/, this.cache.asymmetricKeys.setItem(publicJwkHash, {
                                    privateKey: unextractablePrivateKey,
                                    publicKey: keyPair.publicKey,
                                    requestMethod: request.resourceRequestMethod,
                                    requestUri: request.resourceRequestUri
                                })];
                        case 6:
                            // Store Keypair data in keystore
                            _b.sent();
                            if (publicKeyThumbMeasurement) {
                                publicKeyThumbMeasurement.endMeasurement({
                                    success: true
                                });
                            }
                            return [2 /*return*/, publicJwkHash];
                    }
                });
            });
        };
        /**
         * Removes cryptographic keypair from key store matching the keyId passed in
         * @param kid
         */
        CryptoOps.prototype.removeTokenBindingKey = function (kid) {
            return __awaiter$1(this, void 0, void 0, function () {
                var keyFound;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cache.asymmetricKeys.removeItem(kid)];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.cache.asymmetricKeys.containsKey(kid)];
                        case 2:
                            keyFound = _a.sent();
                            return [2 /*return*/, !keyFound];
                    }
                });
            });
        };
        /**
         * Removes all cryptographic keys from IndexedDB storage
         */
        CryptoOps.prototype.clearKeystore = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cache.clear()];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Signs the given object as a jwt payload with private key retrieved by given kid.
         * @param payload
         * @param kid
         */
        CryptoOps.prototype.signJwt = function (payload, kid, correlationId) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var signJwtMeasurement, cachedKeyPair, publicKeyJwk, publicKeyJwkString, encodedKeyIdThumbprint, shrHeader, encodedShrHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature, signedJwt;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            signJwtMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.CryptoOptsSignJwt, correlationId);
                            return [4 /*yield*/, this.cache.asymmetricKeys.getItem(kid)];
                        case 1:
                            cachedKeyPair = _b.sent();
                            if (!cachedKeyPair) {
                                throw BrowserAuthError.createSigningKeyNotFoundInStorageError(kid);
                            }
                            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];
                        case 2:
                            publicKeyJwk = _b.sent();
                            publicKeyJwkString = BrowserStringUtils.getSortedObjectString(publicKeyJwk);
                            encodedKeyIdThumbprint = this.b64Encode.urlEncode(JSON.stringify({ kid: kid }));
                            shrHeader = JoseHeader.getShrHeaderString({ kid: encodedKeyIdThumbprint, alg: publicKeyJwk.alg });
                            encodedShrHeader = this.b64Encode.urlEncode(shrHeader);
                            // Generate payload
                            payload.cnf = {
                                jwk: JSON.parse(publicKeyJwkString)
                            };
                            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));
                            tokenString = encodedShrHeader + "." + encodedPayload;
                            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);
                            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];
                        case 3:
                            signatureBuffer = _b.sent();
                            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));
                            signedJwt = tokenString + "." + encodedSignature;
                            if (signJwtMeasurement) {
                                signJwtMeasurement.endMeasurement({
                                    success: true
                                });
                            }
                            return [2 /*return*/, signedJwt];
                    }
                });
            });
        };
        /**
         * Returns the SHA-256 hash of an input string
         * @param plainText
         */
        CryptoOps.prototype.hashString = function (plainText) {
            return __awaiter$1(this, void 0, void 0, function () {
                var hashBuffer, hashBytes;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.browserCrypto.sha256Digest(plainText)];
                        case 1:
                            hashBuffer = _a.sent();
                            hashBytes = new Uint8Array(hashBuffer);
                            return [2 /*return*/, this.b64Encode.urlEncodeArr(hashBytes)];
                    }
                });
            });
        };
        CryptoOps.POP_KEY_USAGES = ["sign", "verify"];
        CryptoOps.EXTRACTABLE = true;
        return CryptoOps;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */
    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserPerformanceMeasurement = /** @class */ (function () {
        function BrowserPerformanceMeasurement(name, correlationId) {
            this.correlationId = correlationId;
            this.measureName = BrowserPerformanceMeasurement.makeMeasureName(name, correlationId);
            this.startMark = BrowserPerformanceMeasurement.makeStartMark(name, correlationId);
            this.endMark = BrowserPerformanceMeasurement.makeEndMark(name, correlationId);
        }
        BrowserPerformanceMeasurement.makeMeasureName = function (name, correlationId) {
            return "msal.measure." + name + "." + correlationId;
        };
        BrowserPerformanceMeasurement.makeStartMark = function (name, correlationId) {
            return "msal.start." + name + "." + correlationId;
        };
        BrowserPerformanceMeasurement.makeEndMark = function (name, correlationId) {
            return "msal.end." + name + "." + correlationId;
        };
        BrowserPerformanceMeasurement.supportsBrowserPerformance = function () {
            return typeof window !== "undefined" &&
                typeof window.performance !== "undefined" &&
                typeof window.performance.mark === "function" &&
                typeof window.performance.measure === "function" &&
                typeof window.performance.clearMarks === "function" &&
                typeof window.performance.clearMeasures === "function" &&
                typeof window.performance.getEntriesByName === "function";
        };
        /**
         * Flush browser marks and measurements.
         * @param {string} correlationId
         * @param {SubMeasurement} measurements
         */
        BrowserPerformanceMeasurement.flushMeasurements = function (correlationId, measurements) {
            if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {
                try {
                    measurements.forEach(function (measurement) {
                        var measureName = BrowserPerformanceMeasurement.makeMeasureName(measurement.name, correlationId);
                        var entriesForMeasurement = window.performance.getEntriesByName(measureName, "measure");
                        if (entriesForMeasurement.length > 0) {
                            window.performance.clearMeasures(measureName);
                            window.performance.clearMarks(BrowserPerformanceMeasurement.makeStartMark(measureName, correlationId));
                            window.performance.clearMarks(BrowserPerformanceMeasurement.makeEndMark(measureName, correlationId));
                        }
                    });
                }
                catch (e) {
                    // Silently catch and return null
                }
            }
        };
        BrowserPerformanceMeasurement.prototype.startMeasurement = function () {
            if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {
                try {
                    window.performance.mark(this.startMark);
                }
                catch (e) {
                    // Silently catch
                }
            }
        };
        BrowserPerformanceMeasurement.prototype.endMeasurement = function () {
            if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {
                try {
                    window.performance.mark(this.endMark);
                    window.performance.measure(this.measureName, this.startMark, this.endMark);
                }
                catch (e) {
                    // Silently catch
                }
            }
        };
        BrowserPerformanceMeasurement.prototype.flushMeasurement = function () {
            if (BrowserPerformanceMeasurement.supportsBrowserPerformance()) {
                try {
                    var entriesForMeasurement = window.performance.getEntriesByName(this.measureName, "measure");
                    if (entriesForMeasurement.length > 0) {
                        var durationMs = entriesForMeasurement[0].duration;
                        window.performance.clearMeasures(this.measureName);
                        window.performance.clearMarks(this.startMark);
                        window.performance.clearMarks(this.endMark);
                        return durationMs;
                    }
                }
                catch (e) {
                    // Silently catch and return null
                }
            }
            return null;
        };
        return BrowserPerformanceMeasurement;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrowserPerformanceClient = /** @class */ (function (_super) {
        __extends$1(BrowserPerformanceClient, _super);
        function BrowserPerformanceClient(clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry, cryptoOptions) {
            var _this = _super.call(this, clientId, authority, logger, libraryName, libraryVersion, applicationTelemetry) || this;
            _this.browserCrypto = new BrowserCrypto(_this.logger, cryptoOptions);
            _this.guidGenerator = new GuidGenerator(_this.browserCrypto);
            return _this;
        }
        BrowserPerformanceClient.prototype.startPerformanceMeasuremeant = function (measureName, correlationId) {
            return new BrowserPerformanceMeasurement(measureName, correlationId);
        };
        BrowserPerformanceClient.prototype.generateId = function () {
            return this.guidGenerator.generateGuid();
        };
        BrowserPerformanceClient.prototype.getPageVisibility = function () {
            var _a;
            return ((_a = document.visibilityState) === null || _a === void 0 ? void 0 : _a.toString()) || null;
        };
        BrowserPerformanceClient.prototype.deleteIncompleteSubMeasurements = function (inProgressEvent) {
            var rootEvent = this.eventsByCorrelationId.get(inProgressEvent.event.correlationId);
            var isRootEvent = rootEvent && rootEvent.eventId === inProgressEvent.event.eventId;
            var incompleteMeasurements = [];
            if (isRootEvent && (rootEvent === null || rootEvent === void 0 ? void 0 : rootEvent.incompleteSubMeasurements)) {
                rootEvent.incompleteSubMeasurements.forEach(function (subMeasurement) {
                    incompleteMeasurements.push(__assign$1({}, subMeasurement));
                });
            }
            // Clean up remaining marks for incomplete sub-measurements
            if (incompleteMeasurements.length > 0) {
                BrowserPerformanceMeasurement.flushMeasurements(inProgressEvent.event.correlationId, incompleteMeasurements);
            }
        };
        BrowserPerformanceClient.prototype.supportsBrowserPerformanceNow = function () {
            return typeof window !== "undefined" &&
                typeof window.performance !== "undefined" &&
                typeof window.performance.now === "function";
        };
        /**
         * Starts measuring performance for a given operation. Returns a function that should be used to end the measurement.
         * Also captures browser page visibilityState.
         *
         * @param {PerformanceEvents} measureName
         * @param {?string} [correlationId]
         * @returns {((event?: Partial<PerformanceEvent>) => PerformanceEvent| null)}
         */
        BrowserPerformanceClient.prototype.startMeasurement = function (measureName, correlationId) {
            var _this = this;
            // Capture page visibilityState and then invoke start/end measurement
            var startPageVisibility = this.getPageVisibility();
            var inProgressEvent = _super.prototype.startMeasurement.call(this, measureName, correlationId);
            return __assign$1(__assign$1({}, inProgressEvent), { endMeasurement: function (event) {
                    var res = inProgressEvent.endMeasurement(__assign$1({ startPageVisibility: startPageVisibility, endPageVisibility: _this.getPageVisibility() }, event));
                    _this.deleteIncompleteSubMeasurements(inProgressEvent);
                    return res;
                }, discardMeasurement: function () {
                    inProgressEvent.discardMeasurement();
                    _this.deleteIncompleteSubMeasurements(inProgressEvent);
                    inProgressEvent.measurement.flushMeasurement();
                } });
        };
        /**
         * Adds pre-queue time to preQueueTimeByCorrelationId map.
         * @param {PerformanceEvents} eventName
         * @param {?string} correlationId
         * @returns
         */
        BrowserPerformanceClient.prototype.setPreQueueTime = function (eventName, correlationId) {
            if (!this.supportsBrowserPerformanceNow()) {
                this.logger.trace("BrowserPerformanceClient: window performance API not available, unable to set telemetry queue time for " + eventName);
                return;
            }
            if (!correlationId) {
                this.logger.trace("BrowserPerformanceClient: correlationId for " + eventName + " not provided, unable to set telemetry queue time");
                return;
            }
            var preQueueEvent = this.preQueueTimeByCorrelationId.get(correlationId);
            /**
             * Manually complete queue measurement if there is an incomplete pre-queue event.
             * Incomplete pre-queue events are instrumentation bugs that should be fixed.
             */
            if (preQueueEvent) {
                this.logger.trace("BrowserPerformanceClient: Incomplete pre-queue " + preQueueEvent.name + " found", correlationId);
                this.addQueueMeasurement(preQueueEvent.name, correlationId, undefined, true);
            }
            this.preQueueTimeByCorrelationId.set(correlationId, { name: eventName, time: window.performance.now() });
        };
        /**
         * Calculates and adds queue time measurement for given performance event.
         *
         * @param {PerformanceEvents} eventName
         * @param {?string} correlationId
         * @param {?number} queueTime
         * @param {?boolean} manuallyCompleted - indicator for manually completed queue measurements
         * @returns
         */
        BrowserPerformanceClient.prototype.addQueueMeasurement = function (eventName, correlationId, queueTime, manuallyCompleted) {
            if (!this.supportsBrowserPerformanceNow()) {
                this.logger.trace("BrowserPerformanceClient: window performance API not available, unable to add queue measurement for " + eventName);
                return;
            }
            if (!correlationId) {
                this.logger.trace("BrowserPerformanceClient: correlationId for " + eventName + " not provided, unable to add queue measurement");
                return;
            }
            var preQueueTime = _super.prototype.getPreQueueTime.call(this, eventName, correlationId);
            if (!preQueueTime) {
                return;
            }
            var currentTime = window.performance.now();
            var resQueueTime = queueTime || _super.prototype.calculateQueuedTime.call(this, preQueueTime, currentTime);
            return _super.prototype.addQueueMeasurement.call(this, eventName, correlationId, resQueueTime, manuallyCompleted);
        };
        return BrowserPerformanceClient;
    }(PerformanceClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Token cache manager
     */
    var TokenCache = /** @class */ (function () {
        function TokenCache(configuration, storage, logger, cryptoObj) {
            this.isBrowserEnvironment = typeof window !== "undefined";
            this.config = configuration;
            this.storage = storage;
            this.logger = logger;
            this.cryptoObj = cryptoObj;
        }
        // Move getAllAccounts here and cache utility APIs
        /**
         * API to load tokens to msal-browser cache.
         * @param request
         * @param response
         * @param options
         * @returns `AuthenticationResult` for the response that was loaded.
         */
        TokenCache.prototype.loadExternalTokens = function (request, response, options) {
            this.logger.info("TokenCache - loadExternalTokens called");
            if (!response.id_token) {
                throw BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes id token.");
            }
            var idToken = new AuthToken(response.id_token, this.cryptoObj);
            var cacheRecord;
            var authority;
            if (request.account) {
                var cacheRecordAccount = this.loadAccount(idToken, request.account.environment, undefined, undefined, request.account.homeAccountId);
                cacheRecord = new CacheRecord$1(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment, request.account.tenantId, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, request.account.environment));
            }
            else if (request.authority) {
                var authorityUrl = Authority.generateAuthority(request.authority, request.azureCloudOptions);
                var authorityOptions = {
                    protocolMode: this.config.auth.protocolMode,
                    knownAuthorities: this.config.auth.knownAuthorities,
                    cloudDiscoveryMetadata: this.config.auth.cloudDiscoveryMetadata,
                    authorityMetadata: this.config.auth.authorityMetadata,
                    skipAuthorityMetadataCache: this.config.auth.skipAuthorityMetadataCache,
                };
                authority = new Authority(authorityUrl, this.config.system.networkClient, this.storage, authorityOptions, this.logger);
                // "clientInfo" from options takes precedence over "clientInfo" in response
                if (options.clientInfo) {
                    this.logger.trace("TokenCache - homeAccountId from options");
                    var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, options.clientInfo, authority.authorityType);
                    cacheRecord = new CacheRecord$1(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));
                }
                else if (response.client_info) {
                    this.logger.trace("TokenCache - homeAccountId from response");
                    var cacheRecordAccount = this.loadAccount(idToken, authority.hostnameAndPort, response.client_info, authority.authorityType);
                    cacheRecord = new CacheRecord$1(cacheRecordAccount, this.loadIdToken(idToken, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant), this.loadAccessToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort, authority.tenant, options), this.loadRefreshToken(request, response, cacheRecordAccount.homeAccountId, authority.hostnameAndPort));
                }
                else {
                    throw BrowserAuthError.createUnableToLoadTokenError("Please provide clientInfo in the response or options.");
                }
            }
            else {
                throw BrowserAuthError.createUnableToLoadTokenError("Please provide a request with an account or a request with authority.");
            }
            return this.generateAuthenticationResult(request, idToken, cacheRecord, authority);
        };
        /**
         * Helper function to load account to msal-browser cache
         * @param idToken
         * @param environment
         * @param clientInfo
         * @param authorityType
         * @param requestHomeAccountId
         * @returns `AccountEntity`
         */
        TokenCache.prototype.loadAccount = function (idToken, environment, clientInfo, authorityType, requestHomeAccountId) {
            var homeAccountId;
            if (requestHomeAccountId) {
                homeAccountId = requestHomeAccountId;
            }
            else if (authorityType !== undefined && clientInfo) {
                homeAccountId = AccountEntity.generateHomeAccountId(clientInfo, authorityType, this.logger, this.cryptoObj, idToken);
            }
            if (!homeAccountId) {
                throw BrowserAuthError.createUnableToLoadTokenError("Unexpected missing homeAccountId");
            }
            var accountEntity = clientInfo ?
                AccountEntity.createAccount(clientInfo, homeAccountId, idToken, undefined, undefined, undefined, environment) :
                AccountEntity.createGenericAccount(homeAccountId, idToken, undefined, undefined, undefined, environment);
            if (this.isBrowserEnvironment) {
                this.logger.verbose("TokenCache - loading account");
                this.storage.setAccount(accountEntity);
                return accountEntity;
            }
            else {
                throw BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
            }
        };
        /**
         * Helper function to load id tokens to msal-browser cache
         * @param idToken
         * @param homeAccountId
         * @param environment
         * @param tenantId
         * @returns `IdTokenEntity`
         */
        TokenCache.prototype.loadIdToken = function (idToken, homeAccountId, environment, tenantId) {
            var idTokenEntity = IdTokenEntity.createIdTokenEntity(homeAccountId, environment, idToken.rawToken, this.config.auth.clientId, tenantId);
            if (this.isBrowserEnvironment) {
                this.logger.verbose("TokenCache - loading id token");
                this.storage.setIdTokenCredential(idTokenEntity);
                return idTokenEntity;
            }
            else {
                throw BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
            }
        };
        /**
         * Helper function to load access tokens to msal-browser cache
         * @param request
         * @param response
         * @param homeAccountId
         * @param environment
         * @param tenantId
         * @returns `AccessTokenEntity`
         */
        TokenCache.prototype.loadAccessToken = function (request, response, homeAccountId, environment, tenantId, options) {
            if (!response.access_token) {
                this.logger.verbose("TokenCache - No access token provided for caching");
                return null;
            }
            if (!response.expires_in) {
                throw BrowserAuthError.createUnableToLoadTokenError("Please ensure server response includes expires_in value.");
            }
            if (!options.extendedExpiresOn) {
                throw BrowserAuthError.createUnableToLoadTokenError("Please provide an extendedExpiresOn value in the options.");
            }
            var scopes = new ScopeSet(request.scopes).printScopes();
            var expiresOn = options.expiresOn || (response.expires_in + new Date().getTime() / 1000);
            var extendedExpiresOn = options.extendedExpiresOn;
            var accessTokenEntity = AccessTokenEntity.createAccessTokenEntity(homeAccountId, environment, response.access_token, this.config.auth.clientId, tenantId, scopes, expiresOn, extendedExpiresOn, this.cryptoObj);
            if (this.isBrowserEnvironment) {
                this.logger.verbose("TokenCache - loading access token");
                this.storage.setAccessTokenCredential(accessTokenEntity);
                return accessTokenEntity;
            }
            else {
                throw BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
            }
        };
        /**
         * Helper function to load refresh tokens to msal-browser cache
         * @param request
         * @param response
         * @param homeAccountId
         * @param environment
         * @returns `RefreshTokenEntity`
         */
        TokenCache.prototype.loadRefreshToken = function (request, response, homeAccountId, environment) {
            if (!response.refresh_token) {
                this.logger.verbose("TokenCache - No refresh token provided for caching");
                return null;
            }
            var refreshTokenEntity = RefreshTokenEntity.createRefreshTokenEntity(homeAccountId, environment, response.refresh_token, this.config.auth.clientId);
            if (this.isBrowserEnvironment) {
                this.logger.verbose("TokenCache - loading refresh token");
                this.storage.setRefreshTokenCredential(refreshTokenEntity);
                return refreshTokenEntity;
            }
            else {
                throw BrowserAuthError.createUnableToLoadTokenError("loadExternalTokens is designed to work in browser environments only.");
            }
        };
        /**
         * Helper function to generate an `AuthenticationResult` for the result.
         * @param request
         * @param idTokenObj
         * @param cacheRecord
         * @param authority
         * @returns `AuthenticationResult`
         */
        TokenCache.prototype.generateAuthenticationResult = function (request, idTokenObj, cacheRecord, authority) {
            var _a, _b, _c;
            var accessToken = Constants.EMPTY_STRING;
            var responseScopes = [];
            var expiresOn = null;
            var extExpiresOn;
            if (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) {
                accessToken = cacheRecord.accessToken.secret;
                responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
            }
            var uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;
            var tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;
            return {
                authority: authority ? authority.canonicalAuthority : Constants.EMPTY_STRING,
                uniqueId: uid,
                tenantId: tid,
                scopes: responseScopes,
                account: (cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) ? cacheRecord.account.getAccountInfo() : null,
                idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,
                idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                accessToken: accessToken,
                fromCache: true,
                expiresOn: expiresOn,
                correlationId: request.correlationId || Constants.EMPTY_STRING,
                requestId: Constants.EMPTY_STRING,
                extExpiresOn: extExpiresOn,
                familyId: Constants.EMPTY_STRING,
                tokenType: ((_a = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,
                state: Constants.EMPTY_STRING,
                cloudGraphHostName: ((_b = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,
                msGraphHost: ((_c = cacheRecord === null || cacheRecord === void 0 ? void 0 : cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,
                code: undefined,
                fromNativeBroker: false
            };
        };
        return TokenCache;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var HybridSpaAuthorizationCodeClient = /** @class */ (function (_super) {
        __extends$1(HybridSpaAuthorizationCodeClient, _super);
        function HybridSpaAuthorizationCodeClient(config) {
            var _this = _super.call(this, config) || this;
            _this.includeRedirectUri = false;
            return _this;
        }
        return HybridSpaAuthorizationCodeClient;
    }(AuthorizationCodeClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SilentAuthCodeClient = /** @class */ (function (_super) {
        __extends$1(SilentAuthCodeClient, _super);
        function SilentAuthCodeClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeMessageHandler, correlationId) {
            var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;
            _this.apiId = apiId;
            return _this;
        }
        /**
         * Acquires a token silently by redeeming an authorization code against the /token endpoint
         * @param request
         */
        SilentAuthCodeClient.prototype.acquireToken = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentRequest, serverTelemetryManager, authCodeRequest, clientConfig, authClient, silentHandler, e_1;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.trace("SilentAuthCodeClient.acquireToken called");
                            // Auth code payload is required
                            if (!request.code) {
                                throw BrowserAuthError.createAuthCodeRequiredError();
                            }
                            // Create silent request
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, request.correlationId);
                            return [4 /*yield*/, this.initializeAuthorizationRequest(request, exports.InteractionType.Silent)];
                        case 1:
                            silentRequest = _a.sent();
                            this.browserStorage.updateCacheEntries(silentRequest.state, silentRequest.nonce, silentRequest.authority, silentRequest.loginHint || Constants.EMPTY_STRING, silentRequest.account || null);
                            serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            authCodeRequest = __assign$1(__assign$1({}, silentRequest), { code: request.code });
                            // Initialize the client
                            this.performanceClient.setPreQueueTime(PerformanceEvents.StandardInteractionClientGetClientConfiguration, request.correlationId);
                            return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, silentRequest.authority)];
                        case 3:
                            clientConfig = _a.sent();
                            authClient = new HybridSpaAuthorizationCodeClient(clientConfig);
                            this.logger.verbose("Auth code client created");
                            silentHandler = new SilentHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.config.system, this.performanceClient);
                            // Handle auth code parameters from request
                            return [2 /*return*/, silentHandler.handleCodeResponseFromServer({
                                    code: request.code,
                                    msgraph_host: request.msGraphHost,
                                    cloud_graph_host_name: request.cloudGraphHostName,
                                    cloud_instance_host_name: request.cloudInstanceHostName
                                }, silentRequest.state, authClient.authority, this.networkClient, false)];
                        case 4:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByState(silentRequest.state);
                            throw e_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Currently Unsupported
         */
        SilentAuthCodeClient.prototype.logout = function () {
            // Synchronous so we must reject
            return Promise.reject(BrowserAuthError.createSilentLogoutUnsupportedError());
        };
        return SilentAuthCodeClient;
    }(StandardInteractionClient));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ClientApplication = /** @class */ (function () {
        /**
         * @constructor
         * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         * - redirect_uri: the uri of your application registered in the portal.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
         * Full B2C functionality will be available in this library in future versions.
         *
         * @param configuration Object for the MSAL PublicClientApplication instance
         */
        function ClientApplication(configuration) {
            /*
             * If loaded in an environment where window is not available,
             * set internal flag to false so that further requests fail.
             * This is to support server-side rendering environments.
             */
            this.isBrowserEnvironment = typeof window !== "undefined";
            // Set the configuration.
            this.config = buildConfiguration(configuration, this.isBrowserEnvironment);
            this.initialized = false;
            // Initialize logger
            this.logger = new Logger(this.config.system.loggerOptions, name, version$1);
            // Initialize the network module class.
            this.networkClient = this.config.system.networkClient;
            // Initialize the navigation client class.
            this.navigationClient = this.config.system.navigationClient;
            // Initialize redirectResponse Map
            this.redirectResponse = new Map();
            // Initial hybrid spa map
            this.hybridAuthCodeResponses = new Map();
            // Initialize performance client
            this.performanceClient = this.isBrowserEnvironment ?
                new BrowserPerformanceClient(this.config.auth.clientId, this.config.auth.authority, this.logger, name, version$1, this.config.telemetry.application, this.config.system.cryptoOptions) :
                new StubPerformanceClient(this.config.auth.clientId, this.config.auth.authority, this.logger, name, version$1, this.config.telemetry.application);
            // Initialize the crypto class.
            this.browserCrypto = this.isBrowserEnvironment ? new CryptoOps(this.logger, this.performanceClient, this.config.system.cryptoOptions) : DEFAULT_CRYPTO_IMPLEMENTATION;
            this.eventHandler = new EventHandler(this.logger, this.browserCrypto);
            // Initialize the browser storage class.
            this.browserStorage = this.isBrowserEnvironment ?
                new BrowserCacheManager(this.config.auth.clientId, this.config.cache, this.browserCrypto, this.logger) :
                DEFAULT_BROWSER_CACHE_MANAGER(this.config.auth.clientId, this.logger);
            // initialize in memory storage for native flows
            var nativeCacheOptions = {
                cacheLocation: exports.BrowserCacheLocation.MemoryStorage,
                temporaryCacheLocation: exports.BrowserCacheLocation.MemoryStorage,
                storeAuthStateInCookie: false,
                secureCookies: false,
                cacheMigrationEnabled: false
            };
            this.nativeInternalStorage = new BrowserCacheManager(this.config.auth.clientId, nativeCacheOptions, this.browserCrypto, this.logger);
            // Initialize the token cache
            this.tokenCache = new TokenCache(this.config, this.browserStorage, this.logger, this.browserCrypto);
            // Register listener functions
            this.trackPageVisibilityWithMeasurement = this.trackPageVisibilityWithMeasurement.bind(this);
        }
        /**
         * Initializer function to perform async startup tasks such as connecting to WAM extension
         */
        ClientApplication.prototype.initialize = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var allowNativeBroker, initMeasurement, _a, e_1;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.trace("initialize called");
                            if (this.initialized) {
                                this.logger.info("initialize has already been called, exiting early.");
                                return [2 /*return*/];
                            }
                            allowNativeBroker = this.config.system.allowNativeBroker;
                            initMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.InitializeClientApplication);
                            this.eventHandler.emitEvent(exports.EventType.INITIALIZE_START);
                            if (!allowNativeBroker) return [3 /*break*/, 4];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this;
                            return [4 /*yield*/, NativeMessageHandler.createProvider(this.logger, this.config.system.nativeBrokerHandshakeTimeout, this.performanceClient)];
                        case 2:
                            _a.nativeExtensionProvider = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _b.sent();
                            this.logger.verbose(e_1);
                            return [3 /*break*/, 4];
                        case 4:
                            this.initialized = true;
                            this.eventHandler.emitEvent(exports.EventType.INITIALIZE_END);
                            initMeasurement.endMeasurement({ allowNativeBroker: allowNativeBroker, success: true });
                            return [2 /*return*/];
                    }
                });
            });
        };
        // #region Redirect Flow
        /**
         * Event handler function which allows users to fire events after the PublicClientApplication object
         * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
         * auth flows.
         * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
         * @returns Token response or null. If the return value is null, then no auth redirect was detected.
         */
        ClientApplication.prototype.handleRedirectPromise = function (hash) {
            return __awaiter$1(this, void 0, void 0, function () {
                var loggedInAccounts, redirectResponseKey, response, request, redirectResponse, nativeClient, correlationId, redirectClient;
                var _this = this;
                return __generator$1(this, function (_a) {
                    this.logger.verbose("handleRedirectPromise called");
                    // Block token acquisition before initialize has been called if native brokering is enabled
                    BrowserUtils.blockNativeBrokerCalledBeforeInitialized(this.config.system.allowNativeBroker, this.initialized);
                    loggedInAccounts = this.getAllAccounts();
                    if (this.isBrowserEnvironment) {
                        redirectResponseKey = hash || Constants.EMPTY_STRING;
                        response = this.redirectResponse.get(redirectResponseKey);
                        if (typeof response === "undefined") {
                            this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_START, exports.InteractionType.Redirect);
                            this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
                            request = this.browserStorage.getCachedNativeRequest();
                            redirectResponse = void 0;
                            if (request && NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider) && this.nativeExtensionProvider && !hash) {
                                this.logger.trace("handleRedirectPromise - acquiring token from native platform");
                                nativeClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.handleRedirectPromise, this.performanceClient, this.nativeExtensionProvider, request.accountId, this.nativeInternalStorage, request.correlationId);
                                redirectResponse = nativeClient.handleRedirectPromise();
                            }
                            else {
                                this.logger.trace("handleRedirectPromise - acquiring token from web flow");
                                correlationId = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, true) || Constants.EMPTY_STRING;
                                redirectClient = this.createRedirectClient(correlationId);
                                redirectResponse = redirectClient.handleRedirectPromise(hash);
                            }
                            response = redirectResponse.then(function (result) {
                                if (result) {
                                    // Emit login event if number of accounts change
                                    var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                    if (isLoggingIn) {
                                        _this.eventHandler.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Redirect, result);
                                        _this.logger.verbose("handleRedirectResponse returned result, login success");
                                    }
                                    else {
                                        _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Redirect, result);
                                        _this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                                    }
                                }
                                _this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                                return result;
                            }).catch(function (e) {
                                // Emit login event if there is an account
                                if (loggedInAccounts.length > 0) {
                                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Redirect, null, e);
                                }
                                else {
                                    _this.eventHandler.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Redirect, null, e);
                                }
                                _this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                                throw e;
                            });
                            this.redirectResponse.set(redirectResponseKey, response);
                        }
                        else {
                            this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
                        }
                        return [2 /*return*/, response];
                    }
                    this.logger.verbose("handleRedirectPromise returns null, not browser environment");
                    return [2 /*return*/, null];
                });
            });
        };
        /**
         * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects
         * the page, so any code that follows this function will not execute.
         *
         * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
         * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
         *
         * @param request
         */
        ClientApplication.prototype.acquireTokenRedirect = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId, isLoggedIn, result, nativeClient, redirectClient;
                var _this = this;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(request);
                    this.logger.verbose("acquireTokenRedirect called", correlationId);
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Redirect);
                    isLoggedIn = this.getAllAccounts().length > 0;
                    if (isLoggedIn) {
                        this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Redirect, request);
                    }
                    else {
                        this.eventHandler.emitEvent(exports.EventType.LOGIN_START, exports.InteractionType.Redirect, request);
                    }
                    if (this.nativeExtensionProvider && this.canUseNative(request)) {
                        nativeClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.acquireTokenRedirect, this.performanceClient, this.nativeExtensionProvider, this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
                        result = nativeClient.acquireTokenRedirect(request).catch(function (e) {
                            if (e instanceof NativeAuthError && e.isFatal()) {
                                _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                                var redirectClient = _this.createRedirectClient(request.correlationId);
                                return redirectClient.acquireToken(request);
                            }
                            else if (e instanceof InteractionRequiredAuthError) {
                                _this.logger.verbose("acquireTokenRedirect - Resolving interaction required error thrown by native broker by falling back to web flow");
                                var redirectClient = _this.createRedirectClient(request.correlationId);
                                return redirectClient.acquireToken(request);
                            }
                            _this.browserStorage.setInteractionInProgress(false);
                            throw e;
                        });
                    }
                    else {
                        redirectClient = this.createRedirectClient(request.correlationId);
                        result = redirectClient.acquireToken(request);
                    }
                    return [2 /*return*/, result.catch(function (e) {
                            // If logged in, emit acquire token events
                            if (isLoggedIn) {
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Redirect, null, e);
                            }
                            else {
                                _this.eventHandler.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Redirect, null, e);
                            }
                            throw e;
                        })];
                });
            });
        };
        // #endregion
        // #region Popup Flow
        /**
         * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
         *
         * @param request
         *
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        ClientApplication.prototype.acquireTokenPopup = function (request) {
            var _this = this;
            var correlationId = this.getRequestCorrelationId(request);
            var atPopupMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenPopup, correlationId);
            try {
                this.logger.verbose("acquireTokenPopup called", correlationId);
                this.preflightBrowserEnvironmentCheck(exports.InteractionType.Popup);
            }
            catch (e) {
                // Since this function is syncronous we need to reject
                return Promise.reject(e);
            }
            // If logged in, emit acquire token events
            var loggedInAccounts = this.getAllAccounts();
            if (loggedInAccounts.length > 0) {
                this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Popup, request);
            }
            else {
                this.eventHandler.emitEvent(exports.EventType.LOGIN_START, exports.InteractionType.Popup, request);
            }
            var result;
            if (this.canUseNative(request)) {
                result = this.acquireTokenNative(request, exports.ApiId.acquireTokenPopup).then(function (response) {
                    _this.browserStorage.setInteractionInProgress(false);
                    atPopupMeasurement.endMeasurement({
                        success: true,
                        isNativeBroker: true,
                        requestId: response.requestId
                    });
                    return response;
                }).catch(function (e) {
                    if (e instanceof NativeAuthError && e.isFatal()) {
                        _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                        var popupClient = _this.createPopupClient(request.correlationId);
                        return popupClient.acquireToken(request);
                    }
                    else if (e instanceof InteractionRequiredAuthError) {
                        _this.logger.verbose("acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow");
                        var popupClient = _this.createPopupClient(request.correlationId);
                        return popupClient.acquireToken(request);
                    }
                    _this.browserStorage.setInteractionInProgress(false);
                    throw e;
                });
            }
            else {
                var popupClient = this.createPopupClient(request.correlationId);
                result = popupClient.acquireToken(request);
            }
            return result.then(function (result) {
                /*
                 *  If logged in, emit acquire token events
                 */
                var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                if (isLoggingIn) {
                    _this.eventHandler.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Popup, result);
                }
                else {
                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Popup, result);
                }
                atPopupMeasurement.addStaticFields({
                    accessTokenSize: result.accessToken.length,
                    idTokenSize: result.idToken.length
                });
                atPopupMeasurement.endMeasurement({
                    success: true,
                    requestId: result.requestId
                });
                return result;
            }).catch(function (e) {
                if (loggedInAccounts.length > 0) {
                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Popup, null, e);
                }
                else {
                    _this.eventHandler.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Popup, null, e);
                }
                atPopupMeasurement.endMeasurement({
                    errorCode: e.errorCode,
                    subErrorCode: e.subError,
                    success: false
                });
                // Since this function is syncronous we need to reject
                return Promise.reject(e);
            });
        };
        ClientApplication.prototype.trackPageVisibilityWithMeasurement = function () {
            var measurement = this.ssoSilentMeasurement || this.acquireTokenByCodeAsyncMeasurement;
            if (!measurement) {
                return;
            }
            this.logger.info("Perf: Visibility change detected in ", measurement.event.name);
            measurement.increment({
                visibilityChangeCount: 1,
            });
        };
        // #endregion
        // #region Silent Flow
        /**
         * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
         * - Any browser using a form of Intelligent Tracking Prevention
         * - If there is not an established session with the service
         *
         * In these cases, the request must be done inside a popup or full frame redirect.
         *
         * For the cases where interaction is required, you cannot send a request with prompt=none.
         *
         * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
         * you session on the server still exists.
         * @param request {@link SsoSilentRequest}
         *
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        ClientApplication.prototype.ssoSilent = function (request) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId, validRequest, result, silentIframeClient;
                var _this = this;
                return __generator$1(this, function (_b) {
                    correlationId = this.getRequestCorrelationId(request);
                    validRequest = __assign$1(__assign$1({}, request), {
                        // will be PromptValue.NONE or PromptValue.NO_SESSION
                        prompt: request.prompt, correlationId: correlationId });
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                    this.ssoSilentMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.SsoSilent, correlationId);
                    (_a = this.ssoSilentMeasurement) === null || _a === void 0 ? void 0 : _a.increment({
                        visibilityChangeCount: 0
                    });
                    document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
                    this.logger.verbose("ssoSilent called", correlationId);
                    this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_START, exports.InteractionType.Silent, validRequest);
                    if (this.canUseNative(validRequest)) {
                        result = this.acquireTokenNative(validRequest, exports.ApiId.ssoSilent).catch(function (e) {
                            // If native token acquisition fails for availability reasons fallback to standard flow
                            if (e instanceof NativeAuthError && e.isFatal()) {
                                _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                                var silentIframeClient = _this.createSilentIframeClient(validRequest.correlationId);
                                return silentIframeClient.acquireToken(validRequest);
                            }
                            throw e;
                        });
                    }
                    else {
                        silentIframeClient = this.createSilentIframeClient(validRequest.correlationId);
                        result = silentIframeClient.acquireToken(validRequest);
                    }
                    return [2 /*return*/, result.then(function (response) {
                            var _a, _b;
                            _this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_SUCCESS, exports.InteractionType.Silent, response);
                            (_a = _this.ssoSilentMeasurement) === null || _a === void 0 ? void 0 : _a.addStaticFields({
                                accessTokenSize: response.accessToken.length,
                                idTokenSize: response.idToken.length
                            });
                            (_b = _this.ssoSilentMeasurement) === null || _b === void 0 ? void 0 : _b.endMeasurement({
                                success: true,
                                isNativeBroker: response.fromNativeBroker,
                                requestId: response.requestId
                            });
                            return response;
                        }).catch(function (e) {
                            var _a;
                            _this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_FAILURE, exports.InteractionType.Silent, null, e);
                            (_a = _this.ssoSilentMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({
                                errorCode: e.errorCode,
                                subErrorCode: e.subError,
                                success: false
                            });
                            throw e;
                        }).finally(function () {
                            document.removeEventListener("visibilitychange", _this.trackPageVisibilityWithMeasurement);
                        })];
                });
            });
        };
        /**
         * This function redeems an authorization code (passed as code) from the eSTS token endpoint.
         * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.
         * This API is not indended for normal authorization code acquisition and redemption.
         *
         * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.
         *
         * @param request {@link AuthorizationCodeRequest}
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        ClientApplication.prototype.acquireTokenByCode = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId, atbcMeasurement, hybridAuthCode_1, response;
                var _this = this;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(request);
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                    this.logger.trace("acquireTokenByCode called", correlationId);
                    this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_BY_CODE_START, exports.InteractionType.Silent, request);
                    atbcMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenByCode, request.correlationId);
                    try {
                        if (request.code && request.nativeAccountId) {
                            // Throw error in case server returns both spa_code and spa_accountid in exchange for auth code.
                            throw BrowserAuthError.createSpaCodeAndNativeAccountIdPresentError();
                        }
                        else if (request.code) {
                            hybridAuthCode_1 = request.code;
                            response = this.hybridAuthCodeResponses.get(hybridAuthCode_1);
                            if (!response) {
                                this.logger.verbose("Initiating new acquireTokenByCode request", correlationId);
                                response = this.acquireTokenByCodeAsync(__assign$1(__assign$1({}, request), { correlationId: correlationId }))
                                    .then(function (result) {
                                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_BY_CODE_SUCCESS, exports.InteractionType.Silent, result);
                                    _this.hybridAuthCodeResponses.delete(hybridAuthCode_1);
                                    atbcMeasurement.addStaticFields({
                                        accessTokenSize: result.accessToken.length,
                                        idTokenSize: result.idToken.length
                                    });
                                    atbcMeasurement.endMeasurement({
                                        success: true,
                                        isNativeBroker: result.fromNativeBroker,
                                        requestId: result.requestId
                                    });
                                    return result;
                                })
                                    .catch(function (error) {
                                    _this.hybridAuthCodeResponses.delete(hybridAuthCode_1);
                                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, exports.InteractionType.Silent, null, error);
                                    atbcMeasurement.endMeasurement({
                                        errorCode: error.errorCode,
                                        subErrorCode: error.subError,
                                        success: false
                                    });
                                    throw error;
                                });
                                this.hybridAuthCodeResponses.set(hybridAuthCode_1, response);
                            }
                            else {
                                this.logger.verbose("Existing acquireTokenByCode request found", request.correlationId);
                                atbcMeasurement.discardMeasurement();
                            }
                            return [2 /*return*/, response];
                        }
                        else if (request.nativeAccountId) {
                            if (this.canUseNative(request, request.nativeAccountId)) {
                                return [2 /*return*/, this.acquireTokenNative(request, exports.ApiId.acquireTokenByCode, request.nativeAccountId).catch(function (e) {
                                        // If native token acquisition fails for availability reasons fallback to standard flow
                                        if (e instanceof NativeAuthError && e.isFatal()) {
                                            _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                                        }
                                        throw e;
                                    })];
                            }
                            else {
                                throw BrowserAuthError.createUnableToAcquireTokenFromNativePlatformError();
                            }
                        }
                        else {
                            throw BrowserAuthError.createAuthCodeOrNativeAccountIdRequiredError();
                        }
                    }
                    catch (e) {
                        this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_BY_CODE_FAILURE, exports.InteractionType.Silent, null, e);
                        atbcMeasurement.endMeasurement({
                            errorCode: e instanceof AuthError && e.errorCode || undefined,
                            subErrorCode: e instanceof AuthError && e.subError || undefined,
                            success: false
                        });
                        throw e;
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Creates a SilentAuthCodeClient to redeem an authorization code.
         * @param request
         * @returns Result of the operation to redeem the authorization code
         */
        ClientApplication.prototype.acquireTokenByCodeAsync = function (request) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var silentAuthCodeClient, silentTokenResult;
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.trace("acquireTokenByCodeAsync called", request.correlationId);
                            this.acquireTokenByCodeAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenByCodeAsync, request.correlationId);
                            (_a = this.acquireTokenByCodeAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({
                                visibilityChangeCount: 0
                            });
                            document.addEventListener("visibilitychange", this.trackPageVisibilityWithMeasurement);
                            silentAuthCodeClient = this.createSilentAuthCodeClient(request.correlationId);
                            return [4 /*yield*/, silentAuthCodeClient.acquireToken(request).then(function (response) {
                                    var _a;
                                    (_a = _this.acquireTokenByCodeAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({
                                        success: true,
                                        fromCache: response.fromCache,
                                        isNativeBroker: response.fromNativeBroker,
                                        requestId: response.requestId
                                    });
                                    return response;
                                }).catch(function (tokenRenewalError) {
                                    var _a;
                                    (_a = _this.acquireTokenByCodeAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({
                                        errorCode: tokenRenewalError.errorCode,
                                        subErrorCode: tokenRenewalError.subError,
                                        success: false
                                    });
                                    throw tokenRenewalError;
                                }).finally(function () {
                                    document.removeEventListener("visibilitychange", _this.trackPageVisibilityWithMeasurement);
                                })];
                        case 1:
                            silentTokenResult = _b.sent();
                            return [2 /*return*/, silentTokenResult];
                    }
                });
            });
        };
        /**
         * Attempt to acquire an access token from the cache
         * @param silentCacheClient SilentCacheClient
         * @param commonRequest CommonSilentFlowRequest
         * @param silentRequest SilentRequest
         * @returns A promise that, when resolved, returns the access token
         */
        ClientApplication.prototype.acquireTokenFromCache = function (silentCacheClient, commonRequest, silentRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenFromCache, commonRequest.correlationId);
                    switch (silentRequest.cacheLookupPolicy) {
                        case CacheLookupPolicy.Default:
                        case CacheLookupPolicy.AccessToken:
                        case CacheLookupPolicy.AccessTokenAndRefreshToken:
                            return [2 /*return*/, silentCacheClient.acquireToken(commonRequest)];
                        default:
                            throw ClientAuthError.createRefreshRequiredError();
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Attempt to acquire an access token via a refresh token
         * @param commonRequest CommonSilentFlowRequest
         * @param silentRequest SilentRequest
         * @returns A promise that, when resolved, returns the access token
         */
        ClientApplication.prototype.acquireTokenByRefreshToken = function (commonRequest, silentRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentRefreshClient;
                return __generator$1(this, function (_a) {
                    this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenByRefreshToken, commonRequest.correlationId);
                    switch (silentRequest.cacheLookupPolicy) {
                        case CacheLookupPolicy.Default:
                        case CacheLookupPolicy.AccessTokenAndRefreshToken:
                        case CacheLookupPolicy.RefreshToken:
                        case CacheLookupPolicy.RefreshTokenAndNetwork:
                            silentRefreshClient = this.createSilentRefreshClient(commonRequest.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.SilentRefreshClientAcquireToken, commonRequest.correlationId);
                            return [2 /*return*/, silentRefreshClient.acquireToken(commonRequest)];
                        default:
                            throw ClientAuthError.createRefreshRequiredError();
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Attempt to acquire an access token via an iframe
         * @param request CommonSilentFlowRequest
         * @returns A promise that, when resolved, returns the access token
         */
        ClientApplication.prototype.acquireTokenBySilentIframe = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var silentIframeClient;
                return __generator$1(this, function (_a) {
                    this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenBySilentIframe, request.correlationId);
                    silentIframeClient = this.createSilentIframeClient(request.correlationId);
                    this.performanceClient.setPreQueueTime(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);
                    return [2 /*return*/, silentIframeClient.acquireToken(request)];
                });
            });
        };
        // #endregion
        // #region Logout
        /**
         * Deprecated logout function. Use logoutRedirect or logoutPopup instead
         * @param logoutRequest
         * @deprecated
         */
        ClientApplication.prototype.logout = function (logoutRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(logoutRequest);
                    this.logger.warning("logout API is deprecated and will be removed in msal-browser v3.0.0. Use logoutRedirect instead.", correlationId);
                    return [2 /*return*/, this.logoutRedirect(__assign$1({ correlationId: correlationId }, logoutRequest))];
                });
            });
        };
        /**
         * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
         * Default behaviour is to redirect the user to `window.location.href`.
         * @param logoutRequest
         */
        ClientApplication.prototype.logoutRedirect = function (logoutRequest) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId, redirectClient;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(logoutRequest);
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Redirect);
                    redirectClient = this.createRedirectClient(correlationId);
                    return [2 /*return*/, redirectClient.logout(logoutRequest)];
                });
            });
        };
        /**
         * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server
         * @param logoutRequest
         */
        ClientApplication.prototype.logoutPopup = function (logoutRequest) {
            try {
                var correlationId = this.getRequestCorrelationId(logoutRequest);
                this.preflightBrowserEnvironmentCheck(exports.InteractionType.Popup);
                var popupClient = this.createPopupClient(correlationId);
                return popupClient.logout(logoutRequest);
            }
            catch (e) {
                // Since this function is syncronous we need to reject
                return Promise.reject(e);
            }
        };
        // #endregion
        // #region Account APIs
        /**
         * Returns all accounts that MSAL currently has data for.
         * (the account object is created at the time of successful login)
         * or empty array when no accounts are found
         * @returns Array of account objects in cache
         */
        ClientApplication.prototype.getAllAccounts = function () {
            this.logger.verbose("getAllAccounts called");
            return this.isBrowserEnvironment ? this.browserStorage.getAllAccounts() : [];
        };
        /**
         * Returns the signed in account matching username.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found.
         * This API is provided for convenience but getAccountById should be used for best reliability
         * @param username
         * @returns The account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByUsername = function (username) {
            this.logger.trace("getAccountByUsername called");
            if (!username) {
                this.logger.warning("getAccountByUsername: No username provided");
                return null;
            }
            var account = this.browserStorage.getAccountInfoFilteredBy({ username: username });
            if (account) {
                this.logger.verbose("getAccountByUsername: Account matching username found, returning");
                this.logger.verbosePii("getAccountByUsername: Returning signed-in accounts matching username: " + username);
                return account;
            }
            else {
                this.logger.verbose("getAccountByUsername: No matching account found, returning null");
                return null;
            }
        };
        /**
         * Returns the signed in account matching homeAccountId.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found
         * @param homeAccountId
         * @returns The account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByHomeId = function (homeAccountId) {
            this.logger.trace("getAccountByHomeId called");
            if (!homeAccountId) {
                this.logger.warning("getAccountByHomeId: No homeAccountId provided");
                return null;
            }
            var account = this.browserStorage.getAccountInfoFilteredBy({ homeAccountId: homeAccountId });
            if (account) {
                this.logger.verbose("getAccountByHomeId: Account matching homeAccountId found, returning");
                this.logger.verbosePii("getAccountByHomeId: Returning signed-in accounts matching homeAccountId: " + homeAccountId);
                return account;
            }
            else {
                this.logger.verbose("getAccountByHomeId: No matching account found, returning null");
                return null;
            }
        };
        /**
         * Returns the signed in account matching localAccountId.
         * (the account object is created at the time of successful login)
         * or null when no matching account is found
         * @param localAccountId
         * @returns The account object stored in MSAL
         */
        ClientApplication.prototype.getAccountByLocalId = function (localAccountId) {
            this.logger.trace("getAccountByLocalId called");
            if (!localAccountId) {
                this.logger.warning("getAccountByLocalId: No localAccountId provided");
                return null;
            }
            var account = this.browserStorage.getAccountInfoFilteredBy({ localAccountId: localAccountId });
            if (account) {
                this.logger.verbose("getAccountByLocalId: Account matching localAccountId found, returning");
                this.logger.verbosePii("getAccountByLocalId: Returning signed-in accounts matching localAccountId: " + localAccountId);
                return account;
            }
            else {
                this.logger.verbose("getAccountByLocalId: No matching account found, returning null");
                return null;
            }
        };
        /**
         * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
         * @param account
         */
        ClientApplication.prototype.setActiveAccount = function (account) {
            this.browserStorage.setActiveAccount(account);
        };
        /**
         * Gets the currently active account
         */
        ClientApplication.prototype.getActiveAccount = function () {
            return this.browserStorage.getActiveAccount();
        };
        // #endregion
        // #region Helpers
        /**
         * Helper to validate app environment before making an auth request
         *
         * @protected
         * @param {InteractionType} interactionType What kind of interaction is being used
         * @param {boolean} [setInteractionInProgress=true] Whether to set interaction in progress temp cache flag
         */
        ClientApplication.prototype.preflightBrowserEnvironmentCheck = function (interactionType, setInteractionInProgress) {
            if (setInteractionInProgress === void 0) { setInteractionInProgress = true; }
            this.logger.verbose("preflightBrowserEnvironmentCheck started");
            // Block request if not in browser environment
            BrowserUtils.blockNonBrowserEnvironment(this.isBrowserEnvironment);
            // Block redirects if in an iframe
            BrowserUtils.blockRedirectInIframe(interactionType, this.config.system.allowRedirectInIframe);
            // Block auth requests inside a hidden iframe
            BrowserUtils.blockReloadInHiddenIframes();
            // Block redirectUri opened in a popup from calling MSAL APIs
            BrowserUtils.blockAcquireTokenInPopups();
            // Block token acquisition before initialize has been called if native brokering is enabled
            BrowserUtils.blockNativeBrokerCalledBeforeInitialized(this.config.system.allowNativeBroker, this.initialized);
            // Block redirects if memory storage is enabled but storeAuthStateInCookie is not
            if (interactionType === exports.InteractionType.Redirect &&
                this.config.cache.cacheLocation === exports.BrowserCacheLocation.MemoryStorage &&
                !this.config.cache.storeAuthStateInCookie) {
                throw BrowserConfigurationAuthError.createInMemoryRedirectUnavailableError();
            }
            if (interactionType === exports.InteractionType.Redirect || interactionType === exports.InteractionType.Popup) {
                this.preflightInteractiveRequest(setInteractionInProgress);
            }
        };
        /**
         * Preflight check for interactive requests
         *
         * @protected
         * @param {boolean} setInteractionInProgress Whether to set interaction in progress temp cache flag
         */
        ClientApplication.prototype.preflightInteractiveRequest = function (setInteractionInProgress) {
            this.logger.verbose("preflightInteractiveRequest called, validating app environment");
            // block the reload if it occurred inside a hidden iframe
            BrowserUtils.blockReloadInHiddenIframes();
            // Set interaction in progress temporary cache or throw if alread set.
            if (setInteractionInProgress) {
                this.browserStorage.setInteractionInProgress(true);
            }
        };
        /**
         * Acquire a token from native device (e.g. WAM)
         * @param request
         */
        ClientApplication.prototype.acquireTokenNative = function (request, apiId, accountId) {
            return __awaiter$1(this, void 0, void 0, function () {
                var nativeClient;
                return __generator$1(this, function (_a) {
                    this.logger.trace("acquireTokenNative called");
                    if (!this.nativeExtensionProvider) {
                        throw BrowserAuthError.createNativeConnectionNotEstablishedError();
                    }
                    nativeClient = new NativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, apiId, this.performanceClient, this.nativeExtensionProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
                    return [2 /*return*/, nativeClient.acquireToken(request)];
                });
            });
        };
        /**
         * Returns boolean indicating if this request can use the native broker
         * @param request
         */
        ClientApplication.prototype.canUseNative = function (request, accountId) {
            this.logger.trace("canUseNative called");
            if (!NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme)) {
                this.logger.trace("canUseNative: isNativeAvailable returned false, returning false");
                return false;
            }
            if (request.prompt) {
                switch (request.prompt) {
                    case PromptValue.NONE:
                    case PromptValue.CONSENT:
                    case PromptValue.LOGIN:
                        this.logger.trace("canUseNative: prompt is compatible with native flow");
                        break;
                    default:
                        this.logger.trace("canUseNative: prompt = " + request.prompt + " is not compatible with native flow, returning false");
                        return false;
                }
            }
            if (!accountId && !this.getNativeAccountId(request)) {
                this.logger.trace("canUseNative: nativeAccountId is not available, returning false");
                return false;
            }
            return true;
        };
        /**
         * Get the native accountId from the account
         * @param request
         * @returns
         */
        ClientApplication.prototype.getNativeAccountId = function (request) {
            var account = request.account || this.browserStorage.getAccountInfoByHints(request.loginHint, request.sid) || this.getActiveAccount();
            return account && account.nativeAccountId || "";
        };
        /**
         * Returns new instance of the Popup Interaction Client
         * @param correlationId
         */
        ClientApplication.prototype.createPopupClient = function (correlationId) {
            return new PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Returns new instance of the Redirect Interaction Client
         * @param correlationId
         */
        ClientApplication.prototype.createRedirectClient = function (correlationId) {
            return new RedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Returns new instance of the Silent Iframe Interaction Client
         * @param correlationId
         */
        ClientApplication.prototype.createSilentIframeClient = function (correlationId) {
            return new SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Returns new instance of the Silent Cache Interaction Client
         */
        ClientApplication.prototype.createSilentCacheClient = function (correlationId) {
            return new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Returns new instance of the Silent Refresh Interaction Client
         */
        ClientApplication.prototype.createSilentRefreshClient = function (correlationId) {
            return new SilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Returns new instance of the Silent AuthCode Interaction Client
         */
        ClientApplication.prototype.createSilentAuthCodeClient = function (correlationId) {
            return new SilentAuthCodeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.acquireTokenByCode, this.performanceClient, this.nativeExtensionProvider, correlationId);
        };
        /**
         * Adds event callbacks to array
         * @param callback
         */
        ClientApplication.prototype.addEventCallback = function (callback) {
            return this.eventHandler.addEventCallback(callback);
        };
        /**
         * Removes callback with provided id from callback array
         * @param callbackId
         */
        ClientApplication.prototype.removeEventCallback = function (callbackId) {
            this.eventHandler.removeEventCallback(callbackId);
        };
        /**
         * Registers a callback to receive performance events.
         *
         * @param {PerformanceCallbackFunction} callback
         * @returns {string}
         */
        ClientApplication.prototype.addPerformanceCallback = function (callback) {
            return this.performanceClient.addPerformanceCallback(callback);
        };
        /**
         * Removes a callback registered with addPerformanceCallback.
         *
         * @param {string} callbackId
         * @returns {boolean}
         */
        ClientApplication.prototype.removePerformanceCallback = function (callbackId) {
            return this.performanceClient.removePerformanceCallback(callbackId);
        };
        /**
         * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
         */
        ClientApplication.prototype.enableAccountStorageEvents = function () {
            this.eventHandler.enableAccountStorageEvents();
        };
        /**
         * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window
         */
        ClientApplication.prototype.disableAccountStorageEvents = function () {
            this.eventHandler.disableAccountStorageEvents();
        };
        /**
         * Gets the token cache for the application.
         */
        ClientApplication.prototype.getTokenCache = function () {
            return this.tokenCache;
        };
        /**
         * Returns the logger instance
         */
        ClientApplication.prototype.getLogger = function () {
            return this.logger;
        };
        /**
         * Replaces the default logger set in configurations with new Logger with new configurations
         * @param logger Logger instance
         */
        ClientApplication.prototype.setLogger = function (logger) {
            this.logger = logger;
        };
        /**
         * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.
         * @param sku
         * @param version
         */
        ClientApplication.prototype.initializeWrapperLibrary = function (sku, version) {
            // Validate the SKU passed in is one we expect
            this.browserStorage.setWrapperMetadata(sku, version);
        };
        /**
         * Sets navigation client
         * @param navigationClient
         */
        ClientApplication.prototype.setNavigationClient = function (navigationClient) {
            this.navigationClient = navigationClient;
        };
        /**
         * Returns the configuration object
         */
        ClientApplication.prototype.getConfiguration = function () {
            return this.config;
        };
        /**
         * Generates a correlation id for a request if none is provided.
         *
         * @protected
         * @param {?Partial<BaseAuthRequest>} [request]
         * @returns {string}
         */
        ClientApplication.prototype.getRequestCorrelationId = function (request) {
            if (request === null || request === void 0 ? void 0 : request.correlationId) {
                return request.correlationId;
            }
            if (this.isBrowserEnvironment) {
                return this.browserCrypto.createNewGuid();
            }
            /*
             * Included for fallback for non-browser environments,
             * and to ensure this method always returns a string.
             */
            return Constants.EMPTY_STRING;
        };
        return ClientApplication;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications
     * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.
     */
    var PublicClientApplication$1 = /** @class */ (function (_super) {
        __extends$1(PublicClientApplication, _super);
        /**
         * @constructor
         * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object
         *
         * Important attributes in the Configuration object for auth are:
         * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview
         * - authority: the authority URL for your application.
         * - redirect_uri: the uri of your application registered in the portal.
         *
         * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.
         * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}
         * If your application supports Accounts in one organizational directory, replace "Enter_the_Tenant_Info_Here" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).
         * If your application supports Accounts in any organizational directory, replace "Enter_the_Tenant_Info_Here" value with organizations.
         * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace "Enter_the_Tenant_Info_Here" value with common.
         * To restrict support to Personal Microsoft accounts only, replace "Enter_the_Tenant_Info_Here" value with consumers.
         *
         * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/
         * Full B2C functionality will be available in this library in future versions.
         *
         * @param configuration object for the MSAL PublicClientApplication instance
         */
        function PublicClientApplication(configuration) {
            var _this = _super.call(this, configuration) || this;
            _this.astsAsyncMeasurement = undefined;
            _this.activeSilentTokenRequests = new Map();
            // Register listener functions
            _this.trackPageVisibility = _this.trackPageVisibility.bind(_this);
            return _this;
        }
        /**
         * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so
         * any code that follows this function will not execute.
         *
         * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current
         * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.
         *
         * @param request
         */
        PublicClientApplication.prototype.loginRedirect = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(request);
                    this.logger.verbose("loginRedirect called", correlationId);
                    return [2 /*return*/, this.acquireTokenRedirect(__assign$1({ correlationId: correlationId }, (request || DEFAULT_REQUEST)))];
                });
            });
        };
        /**
         * Use when initiating the login process via opening a popup window in the user's browser
         *
         * @param request
         *
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        PublicClientApplication.prototype.loginPopup = function (request) {
            var correlationId = this.getRequestCorrelationId(request);
            this.logger.verbose("loginPopup called", correlationId);
            return this.acquireTokenPopup(__assign$1({ correlationId: correlationId }, (request || DEFAULT_REQUEST)));
        };
        /**
         * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.
         *
         * @param {@link (SilentRequest:type)}
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        PublicClientApplication.prototype.acquireTokenSilent = function (request) {
            return __awaiter$1(this, void 0, void 0, function () {
                var correlationId, atsMeasurement, account, thumbprint, silentRequestKey, cachedResponse, response;
                var _this = this;
                return __generator$1(this, function (_a) {
                    correlationId = this.getRequestCorrelationId(request);
                    atsMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilent, correlationId);
                    atsMeasurement.addStaticFields({
                        cacheLookupPolicy: request.cacheLookupPolicy
                    });
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                    this.logger.verbose("acquireTokenSilent called", correlationId);
                    account = request.account || this.getActiveAccount();
                    if (!account) {
                        throw BrowserAuthError.createNoAccountError();
                    }
                    thumbprint = {
                        clientId: this.config.auth.clientId,
                        authority: request.authority || Constants.EMPTY_STRING,
                        scopes: request.scopes,
                        homeAccountIdentifier: account.homeAccountId,
                        claims: request.claims,
                        authenticationScheme: request.authenticationScheme,
                        resourceRequestMethod: request.resourceRequestMethod,
                        resourceRequestUri: request.resourceRequestUri,
                        shrClaims: request.shrClaims,
                        sshKid: request.sshKid
                    };
                    silentRequestKey = JSON.stringify(thumbprint);
                    cachedResponse = this.activeSilentTokenRequests.get(silentRequestKey);
                    if (typeof cachedResponse === "undefined") {
                        this.logger.verbose("acquireTokenSilent called for the first time, storing active request", correlationId);
                        this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenSilentAsync, correlationId);
                        response = this.acquireTokenSilentAsync(__assign$1(__assign$1({}, request), { correlationId: correlationId }), account)
                            .then(function (result) {
                            _this.activeSilentTokenRequests.delete(silentRequestKey);
                            atsMeasurement.addStaticFields({
                                accessTokenSize: result.accessToken.length,
                                idTokenSize: result.idToken.length
                            });
                            atsMeasurement.endMeasurement({
                                success: true,
                                fromCache: result.fromCache,
                                isNativeBroker: result.fromNativeBroker,
                                cacheLookupPolicy: request.cacheLookupPolicy,
                                requestId: result.requestId,
                            });
                            return result;
                        })
                            .catch(function (error) {
                            _this.activeSilentTokenRequests.delete(silentRequestKey);
                            atsMeasurement.endMeasurement({
                                errorCode: error.errorCode,
                                subErrorCode: error.subError,
                                success: false
                            });
                            throw error;
                        });
                        this.activeSilentTokenRequests.set(silentRequestKey, response);
                        return [2 /*return*/, response];
                    }
                    else {
                        this.logger.verbose("acquireTokenSilent has been called previously, returning the result from the first call", correlationId);
                        // Discard measurements for memoized calls, as they are usually only a couple of ms and will artificially deflate metrics
                        atsMeasurement.discardMeasurement();
                        return [2 /*return*/, cachedResponse];
                    }
                });
            });
        };
        PublicClientApplication.prototype.trackPageVisibility = function () {
            if (!this.astsAsyncMeasurement) {
                return;
            }
            this.logger.info("Perf: Visibility change detected");
            this.astsAsyncMeasurement.increment({
                visibilityChangeCount: 1,
            });
        };
        /**
         * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
         * @param {@link (SilentRequest:type)}
         * @param {@link (AccountInfo:type)}
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
         */
        PublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {
            var _a;
            return __awaiter$1(this, void 0, void 0, function () {
                var result, silentRequest, silentCacheClient, silentRequest_1, requestWithCLP_1;
                var _this = this;
                return __generator$1(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.performanceClient.addQueueMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);
                            this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Silent, request);
                            this.astsAsyncMeasurement = this.performanceClient.startMeasurement(PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);
                            (_a = this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.increment({
                                visibilityChangeCount: 0
                            });
                            document.addEventListener("visibilitychange", this.trackPageVisibility);
                            if (!(NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider, request.authenticationScheme) && account.nativeAccountId)) return [3 /*break*/, 1];
                            this.logger.verbose("acquireTokenSilent - attempting to acquire token from native platform");
                            silentRequest = __assign$1(__assign$1({}, request), { account: account });
                            result = this.acquireTokenNative(silentRequest, exports.ApiId.acquireTokenSilent_silentFlow).catch(function (e) { return __awaiter$1(_this, void 0, void 0, function () {
                                var silentIframeClient;
                                return __generator$1(this, function (_a) {
                                    // If native token acquisition fails for availability reasons fallback to web flow
                                    if (e instanceof NativeAuthError && e.isFatal()) {
                                        this.logger.verbose("acquireTokenSilent - native platform unavailable, falling back to web flow");
                                        this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt
                                        silentIframeClient = this.createSilentIframeClient(request.correlationId);
                                        return [2 /*return*/, silentIframeClient.acquireToken(request)];
                                    }
                                    throw e;
                                });
                            }); });
                            return [3 /*break*/, 3];
                        case 1:
                            this.logger.verbose("acquireTokenSilent - attempting to acquire token from web flow");
                            silentCacheClient = this.createSilentCacheClient(request.correlationId);
                            this.performanceClient.setPreQueueTime(PerformanceEvents.InitializeSilentRequest, request.correlationId);
                            return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];
                        case 2:
                            silentRequest_1 = _b.sent();
                            requestWithCLP_1 = __assign$1(__assign$1({}, request), {
                                // set the request's CacheLookupPolicy to Default if it was not optionally passed in
                                cacheLookupPolicy: request.cacheLookupPolicy || CacheLookupPolicy.Default });
                            this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenFromCache, silentRequest_1.correlationId);
                            result = this.acquireTokenFromCache(silentCacheClient, silentRequest_1, requestWithCLP_1).catch(function (cacheError) {
                                if (requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessToken) {
                                    throw cacheError;
                                }
                                // block the reload if it occurred inside a hidden iframe
                                BrowserUtils.blockReloadInHiddenIframes();
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_NETWORK_START, exports.InteractionType.Silent, silentRequest_1);
                                _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenByRefreshToken, silentRequest_1.correlationId);
                                return _this.acquireTokenByRefreshToken(silentRequest_1, requestWithCLP_1).catch(function (refreshTokenError) {
                                    var isServerError = refreshTokenError instanceof ServerError;
                                    var isInteractionRequiredError = refreshTokenError instanceof InteractionRequiredAuthError;
                                    var isInvalidGrantError = (refreshTokenError.errorCode === BrowserConstants.INVALID_GRANT_ERROR);
                                    if ((!isServerError ||
                                        !isInvalidGrantError ||
                                        isInteractionRequiredError ||
                                        requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.AccessTokenAndRefreshToken ||
                                        requestWithCLP_1.cacheLookupPolicy === CacheLookupPolicy.RefreshToken)
                                        && (requestWithCLP_1.cacheLookupPolicy !== CacheLookupPolicy.Skip)) {
                                        throw refreshTokenError;
                                    }
                                    _this.logger.verbose("Refresh token expired/invalid or CacheLookupPolicy is set to Skip, attempting acquire token by iframe.", request.correlationId);
                                    _this.performanceClient.setPreQueueTime(PerformanceEvents.AcquireTokenBySilentIframe, silentRequest_1.correlationId);
                                    return _this.acquireTokenBySilentIframe(silentRequest_1);
                                });
                            });
                            _b.label = 3;
                        case 3: return [2 /*return*/, result.then(function (response) {
                                var _a;
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Silent, response);
                                (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({
                                    success: true,
                                    fromCache: response.fromCache,
                                    isNativeBroker: response.fromNativeBroker,
                                    requestId: response.requestId
                                });
                                return response;
                            }).catch(function (tokenRenewalError) {
                                var _a;
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Silent, null, tokenRenewalError);
                                (_a = _this.astsAsyncMeasurement) === null || _a === void 0 ? void 0 : _a.endMeasurement({
                                    errorCode: tokenRenewalError.errorCode,
                                    subErrorCode: tokenRenewalError.subError,
                                    success: false
                                });
                                throw tokenRenewalError;
                            }).finally(function () {
                                document.removeEventListener("visibilitychange", _this.trackPageVisibility);
                            })];
                    }
                });
            });
        };
        return PublicClientApplication;
    }(ClientApplication));

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var stubbedPublicClientApplication = {
        initialize: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        acquireTokenPopup: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        acquireTokenRedirect: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        acquireTokenSilent: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        acquireTokenByCode: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        getAllAccounts: function () {
            return [];
        },
        getAccountByHomeId: function () {
            return null;
        },
        getAccountByUsername: function () {
            return null;
        },
        getAccountByLocalId: function () {
            return null;
        },
        handleRedirectPromise: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        loginPopup: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        loginRedirect: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        logout: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        logoutRedirect: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        logoutPopup: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        ssoSilent: function () {
            return Promise.reject(BrowserConfigurationAuthError.createStubPcaInstanceCalledError());
        },
        addEventCallback: function () {
            return null;
        },
        removeEventCallback: function () {
            return;
        },
        addPerformanceCallback: function () {
            return "";
        },
        removePerformanceCallback: function () {
            return false;
        },
        enableAccountStorageEvents: function () {
            return;
        },
        disableAccountStorageEvents: function () {
            return;
        },
        getTokenCache: function () {
            throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
        },
        getLogger: function () {
            throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
        },
        setLogger: function () {
            return;
        },
        setActiveAccount: function () {
            return;
        },
        getActiveAccount: function () {
            return null;
        },
        initializeWrapperLibrary: function () {
            return;
        },
        setNavigationClient: function () {
            return;
        },
        getConfiguration: function () {
            throw BrowserConfigurationAuthError.createStubPcaInstanceCalledError();
        }
    };

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EventMessageUtils = /** @class */ (function () {
        function EventMessageUtils() {
        }
        /**
         * Gets interaction status from event message
         * @param message
         * @param currentStatus
         */
        EventMessageUtils.getInteractionStatusFromEvent = function (message, currentStatus) {
            switch (message.eventType) {
                case exports.EventType.LOGIN_START:
                    return exports.InteractionStatus.Login;
                case exports.EventType.SSO_SILENT_START:
                    return exports.InteractionStatus.SsoSilent;
                case exports.EventType.ACQUIRE_TOKEN_START:
                    if (message.interactionType === exports.InteractionType.Redirect || message.interactionType === exports.InteractionType.Popup) {
                        return exports.InteractionStatus.AcquireToken;
                    }
                    break;
                case exports.EventType.HANDLE_REDIRECT_START:
                    return exports.InteractionStatus.HandleRedirect;
                case exports.EventType.LOGOUT_START:
                    return exports.InteractionStatus.Logout;
                case exports.EventType.SSO_SILENT_SUCCESS:
                case exports.EventType.SSO_SILENT_FAILURE:
                    if (currentStatus && currentStatus !== exports.InteractionStatus.SsoSilent) {
                        // Prevent this event from clearing any status other than ssoSilent
                        break;
                    }
                    return exports.InteractionStatus.None;
                case exports.EventType.LOGOUT_END:
                    if (currentStatus && currentStatus !== exports.InteractionStatus.Logout) {
                        // Prevent this event from clearing any status other than logout
                        break;
                    }
                    return exports.InteractionStatus.None;
                case exports.EventType.HANDLE_REDIRECT_END:
                    if (currentStatus && currentStatus !== exports.InteractionStatus.HandleRedirect) {
                        // Prevent this event from clearing any status other than handleRedirect
                        break;
                    }
                    return exports.InteractionStatus.None;
                case exports.EventType.LOGIN_SUCCESS:
                case exports.EventType.LOGIN_FAILURE:
                case exports.EventType.ACQUIRE_TOKEN_SUCCESS:
                case exports.EventType.ACQUIRE_TOKEN_FAILURE:
                    if (message.interactionType === exports.InteractionType.Redirect || message.interactionType === exports.InteractionType.Popup) {
                        if (currentStatus && currentStatus !== exports.InteractionStatus.Login && currentStatus !== exports.InteractionStatus.AcquireToken) {
                            // Prevent this event from clearing any status other than login or acquireToken
                            break;
                        }
                        return exports.InteractionStatus.None;
                    }
                    break;
            }
            return null;
        };
        return EventMessageUtils;
    }());

    /*! @azure/msal-browser v2.37.0 2023-05-02 */

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var SignedHttpRequest = /** @class */ (function () {
        function SignedHttpRequest(shrParameters, shrOptions) {
            var loggerOptions = (shrOptions && shrOptions.loggerOptions) || {};
            this.logger = new Logger(loggerOptions, name, version$1);
            this.cryptoOps = new CryptoOps(this.logger);
            this.popTokenGenerator = new PopTokenGenerator(this.cryptoOps);
            this.shrParameters = shrParameters;
        }
        /**
         * Generates and caches a keypair for the given request options.
         * @returns Public key digest, which should be sent to the token issuer.
         */
        SignedHttpRequest.prototype.generatePublicKeyThumbprint = function () {
            return __awaiter$1(this, void 0, void 0, function () {
                var kid;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.popTokenGenerator.generateKid(this.shrParameters)];
                        case 1:
                            kid = (_a.sent()).kid;
                            return [2 /*return*/, kid];
                    }
                });
            });
        };
        /**
         * Generates a signed http request for the given payload with the given key.
         * @param payload Payload to sign (e.g. access token)
         * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
         * @param claims Additional claims to include/override in the signed JWT
         * @returns Pop token signed with the corresponding private key
         */
        SignedHttpRequest.prototype.signRequest = function (payload, publicKeyThumbprint, claims) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    return [2 /*return*/, this.popTokenGenerator.signPayload(payload, publicKeyThumbprint, this.shrParameters, claims)];
                });
            });
        };
        /**
         * Removes cached keys from browser for given public key thumbprint
         * @param publicKeyThumbprint Public key digest (from generatePublicKeyThumbprint API)
         * @returns If keys are properly deleted
         */
        SignedHttpRequest.prototype.removeKeys = function (publicKeyThumbprint) {
            return __awaiter$1(this, void 0, void 0, function () {
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.cryptoOps.removeTokenBindingKey(publicKeyThumbprint)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        return SignedHttpRequest;
    }());

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Licensed under the MIT License.
    var strShimFunction = "function";
    var strShimObject = "object";
    var strShimUndefined = "undefined";
    var strShimPrototype = "prototype";
    var strShimHasOwnProperty = "hasOwnProperty";
    var ObjClass = Object;
    var ObjProto = ObjClass[strShimPrototype];
    var ObjAssign = ObjClass["assign"];
    var ObjCreate = ObjClass["create"];
    var ObjDefineProperty = ObjClass["defineProperty"];
    var ObjHasOwnProperty = ObjProto[strShimHasOwnProperty];

    // Copyright (c) Microsoft Corporation. All rights reserved.
    var _cachedGlobal = null;
    /**
     * Returns the current global scope object, for a normal web page this will be the current
     * window, for a Web Worker this will be current worker global scope via "self". The internal
     * implementation returns the first available instance object in the following order
     * - globalThis (New standard)
     * - self (Will return the current window instance for supported browsers)
     * - window (fallback for older browser implementations)
     * - global (NodeJS standard)
     * - <null> (When all else fails)
     * While the return type is a Window for the normal case, not all environments will support all
     * of the properties or functions.
     */
    function getGlobal(useCached) {
        if (useCached === void 0) { useCached = true; }
        if (!_cachedGlobal || !useCached) {
            if (typeof globalThis !== strShimUndefined && globalThis) {
                _cachedGlobal = globalThis;
            }
            if (typeof self !== strShimUndefined && self) {
                _cachedGlobal = self;
            }
            if (typeof window !== strShimUndefined && window) {
                _cachedGlobal = window;
            }
            if (typeof global !== strShimUndefined && global) {
                _cachedGlobal = global;
            }
        }
        return _cachedGlobal;
    }
    function throwTypeError(message) {
        throw new TypeError(message);
    }
    /**
     * Creates an object that has the specified prototype, and that optionally contains specified properties. This helper exists to avoid adding a polyfil
     * for older browsers that do not define Object.create eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.
     * Note: For consistency this will not use the Object.create implementation if it exists as this would cause a testing requirement to test with and without the implementations
     * @param obj Object to use as a prototype. May be null
     */
    function objCreateFn(obj) {
        var func = ObjCreate;
        // Use build in Object.create
        if (func) {
            // Use Object create method if it exists
            return func(obj);
        }
        if (obj == null) {
            return {};
        }
        var type = typeof obj;
        if (type !== strShimObject && type !== strShimFunction) {
            throwTypeError("Object prototype may only be an Object:" + obj);
        }
        function tmpFunc() { }
        tmpFunc[strShimPrototype] = obj;
        return new tmpFunc();
    }

    // Copyright (c) Microsoft Corporation. All rights reserved.
    // Most of these functions have been directly shamelessly "lifted" from the https://github.com/@microsoft/tslib and
    // modified to be ES3 compatible and applying several minification and tree-shaking techniques so that Application Insights
    // can successfully use TypeScript "importHelpers" which imports tslib during compilation but it will use these at runtime
    // Which is also why all of the functions have not been included as Application Insights currently doesn't use or require
    // them.
    (getGlobal() || {})["Symbol"];
    (getGlobal() || {})["Reflect"];
    var __objAssignFnImpl = function (t) {
        // tslint:disable-next-line: ban-comma-operator
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) {
                if (ObjProto[strShimHasOwnProperty].call(s, p)) {
                    t[p] = s[p];
                }
            }
        }
        return t;
    };
    var __assignFn = ObjAssign || __objAssignFnImpl;
    // tslint:disable-next-line: only-arrow-functions
    var extendStaticsFn = function (d, b) {
        extendStaticsFn = ObjClass["setPrototypeOf"] ||
            // tslint:disable-next-line: only-arrow-functions
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            // tslint:disable-next-line: only-arrow-functions
            function (d, b) {
                for (var p in b) {
                    if (b[strShimHasOwnProperty](p)) {
                        d[p] = b[p];
                    }
                }
            };
        return extendStaticsFn(d, b);
    };
    function __extendsFn(d, b) {
        if (typeof b !== strShimFunction && b !== null) {
            throwTypeError("Class extends value " + String(b) + " is not a constructor or null");
        }
        extendStaticsFn(d, b);
        function __() { this.constructor = d; }
        // tslint:disable-next-line: ban-comma-operator
        d[strShimPrototype] = b === null ? objCreateFn(b) : (__[strShimPrototype] = b[strShimPrototype], new __());
    }
    function __spreadArrayFn(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {
            to[j] = from[i];
        }
        return to;
    }

    /*!
     * Microsoft Dynamic Proto Utility, 1.1.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var Constructor = 'constructor';
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var Prototype = 'prototype';
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var strFunction = 'function';
    /**
     * Used to define the name of the instance function lookup table
     * @ignore
     */
    var DynInstFuncTable = '_dynInstFuncs';
    /**
     * Name used to tag the dynamic prototype function
     * @ignore
     */
    var DynProxyTag = '_isDynProxy';
    /**
     * Name added to a prototype to define the dynamic prototype "class" name used to lookup the function table
     * @ignore
     */
    var DynClassName = '_dynClass';
    /**
     * Prefix added to the classname to avoid any name clashes with other instance level properties
     * @ignore
     */
    var DynClassNamePrefix = '_dynCls$';
    /**
     * A tag which is used to check if we have already to attempted to set the instance function if one is not present
     * @ignore
     */
    var DynInstChkTag = '_dynInstChk';
    /**
     * A tag which is used to check if we are allows to try and set an instance function is one is not present. Using the same
     * tag name as the function level but a different const name for readability only.
     */
    var DynAllowInstChkTag = DynInstChkTag;
    /**
     * The global (imported) instances where the global performance options are stored
     */
    var DynProtoDefaultOptions = '_dfOpts';
    /**
     * Value used as the name of a class when it cannot be determined
     * @ignore
     */
    var UnknownValue = '_unknown_';
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var str__Proto = "__proto__";
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var strUseBaseInst = 'useBaseInst';
    /**
     * Constant string defined to support minimization
     * @ignore
     */
    var strSetInstFuncs = 'setInstFuncs';
    var Obj = Object;
    /**
     * Pre-lookup to check if we are running on a modern browser (i.e. not IE8)
     * @ignore
     */
    var _objGetPrototypeOf = Obj["getPrototypeOf"];
    /**
     * Internal Global used to generate a unique dynamic class name, every new class will increase this value
     * @ignore
     */
    var _dynamicNames = 0;
    /**
     * Helper to check if the object contains a property of the name
     * @ignore
     */
    function _hasOwnProperty(obj, prop) {
        return obj && Obj[Prototype].hasOwnProperty.call(obj, prop);
    }
    /**
     * Helper used to check whether the target is an Object prototype or Array prototype
     * @ignore
     */
    function _isObjectOrArrayPrototype(target) {
        return target && (target === Obj[Prototype] || target === Array[Prototype]);
    }
    /**
     * Helper used to check whether the target is an Object prototype, Array prototype or Function prototype
     * @ignore
     */
    function _isObjectArrayOrFunctionPrototype(target) {
        return _isObjectOrArrayPrototype(target) || target === Function[Prototype];
    }
    /**
     * Helper used to get the prototype of the target object as getPrototypeOf is not available in an ES3 environment.
     * @ignore
     */
    function _getObjProto(target) {
        if (target) {
            // This method doesn't existing in older browsers (e.g. IE8)
            if (_objGetPrototypeOf) {
                return _objGetPrototypeOf(target);
            }
            // target[Constructor] May break if the constructor has been changed or removed
            var newProto = target[str__Proto] || target[Prototype] || (target[Constructor] ? target[Constructor][Prototype] : null);
            if (newProto) {
                return newProto;
            }
        }
        return null;
    }
    /**
     * Helper to get the properties of an object, including none enumerable ones as functions on a prototype in ES6
     * are not enumerable.
     * @param target
     */
    function _forEachProp(target, func) {
        var props = [];
        var getOwnProps = Obj["getOwnPropertyNames"];
        if (getOwnProps) {
            props = getOwnProps(target);
        }
        else {
            for (var name_1 in target) {
                if (typeof name_1 === "string" && _hasOwnProperty(target, name_1)) {
                    props.push(name_1);
                }
            }
        }
        if (props && props.length > 0) {
            for (var lp = 0; lp < props.length; lp++) {
                func(props[lp]);
            }
        }
    }
    /**
     * Helper function to check whether the provided function name is a potential candidate for dynamic
     * callback and prototype generation.
     * @param target The target object, may be a prototype or class object
     * @param funcName The function name
     * @param skipOwn Skips the check for own property
     * @ignore
     */
    function _isDynamicCandidate(target, funcName, skipOwn) {
        return (funcName !== Constructor && typeof target[funcName] === strFunction && (skipOwn || _hasOwnProperty(target, funcName)));
    }
    /**
     * Helper to throw a TypeError exception
     * @param message the message
     * @ignore
     */
    function _throwTypeError(message) {
        throw new TypeError("DynamicProto: " + message);
    }
    /**
     * Returns a collection of the instance functions that are defined directly on the thisTarget object, it does
     * not return any inherited functions
     * @param thisTarget The object to get the instance functions from
     * @ignore
     */
    function _getInstanceFuncs(thisTarget) {
        // Get the base proto
        var instFuncs = {};
        // Save any existing instance functions
        _forEachProp(thisTarget, function (name) {
            // Don't include any dynamic prototype instances - as we only want the real functions
            if (!instFuncs[name] && _isDynamicCandidate(thisTarget, name, false)) {
                // Create an instance callback for passing the base function to the caller
                instFuncs[name] = thisTarget[name];
            }
        });
        return instFuncs;
    }
    /**
     * Returns whether the value is included in the array
     * @param values The array of values
     * @param value  The value
     */
    function _hasVisited(values, value) {
        for (var lp = values.length - 1; lp >= 0; lp--) {
            if (values[lp] === value) {
                return true;
            }
        }
        return false;
    }
    /**
     * Returns an object that contains callback functions for all "base/super" functions, this is used to "save"
     * enabling calling super.xxx() functions without requiring that the base "class" has defined a prototype references
     * @param target The current instance
     * @ignore
     */
    function _getBaseFuncs(classProto, thisTarget, instFuncs, useBaseInst) {
        function _instFuncProxy(target, funcHost, funcName) {
            var theFunc = funcHost[funcName];
            if (theFunc[DynProxyTag] && useBaseInst) {
                // grab and reuse the hosted looking function (if available) otherwise the original passed function
                var instFuncTable = target[DynInstFuncTable] || {};
                if (instFuncTable[DynAllowInstChkTag] !== false) {
                    theFunc = (instFuncTable[funcHost[DynClassName]] || {})[funcName] || theFunc;
                }
            }
            return function () {
                return theFunc.apply(target, arguments);
            };
        }
        // Start creating a new baseFuncs by creating proxies for the instance functions (as they may get replaced)
        var baseFuncs = {};
        _forEachProp(instFuncs, function (name) {
            // Create an instance callback for passing the base function to the caller
            baseFuncs[name] = _instFuncProxy(thisTarget, instFuncs, name);
        });
        // Get the base prototype functions
        var baseProto = _getObjProto(classProto);
        var visited = [];
        // Don't include base object functions for Object, Array or Function
        while (baseProto && !_isObjectArrayOrFunctionPrototype(baseProto) && !_hasVisited(visited, baseProto)) {
            // look for prototype functions
            _forEachProp(baseProto, function (name) {
                // Don't include any dynamic prototype instances - as we only want the real functions
                // For IE 7/8 the prototype lookup doesn't provide the full chain so we need to bypass the
                // hasOwnProperty check we get all of the methods, main difference is that IE7/8 doesn't return
                // the Object prototype methods while bypassing the check
                if (!baseFuncs[name] && _isDynamicCandidate(baseProto, name, !_objGetPrototypeOf)) {
                    // Create an instance callback for passing the base function to the caller
                    baseFuncs[name] = _instFuncProxy(thisTarget, baseProto, name);
                }
            });
            // We need to find all possible functions that might be overloaded by walking the entire prototype chain
            // This avoids the caller from needing to check whether it's direct base class implements the function or not
            // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.
            visited.push(baseProto);
            baseProto = _getObjProto(baseProto);
        }
        return baseFuncs;
    }
    function _getInstFunc(target, funcName, proto, currentDynProtoProxy) {
        var instFunc = null;
        // We need to check whether the class name is defined directly on this prototype otherwise
        // it will walk the proto chain and return any parent proto classname.
        if (target && _hasOwnProperty(proto, DynClassName)) {
            var instFuncTable = target[DynInstFuncTable] || {};
            instFunc = (instFuncTable[proto[DynClassName]] || {})[funcName];
            if (!instFunc) {
                // Avoid stack overflow from recursive calling the same function
                _throwTypeError("Missing [" + funcName + "] " + strFunction);
            }
            // We have the instance function, lets check it we can speed up further calls
            // by adding the instance function back directly on the instance (avoiding the dynamic func lookup)
            if (!instFunc[DynInstChkTag] && instFuncTable[DynAllowInstChkTag] !== false) {
                // If the instance already has an instance function we can't replace it
                var canAddInst = !_hasOwnProperty(target, funcName);
                // Get current prototype
                var objProto = _getObjProto(target);
                var visited = [];
                // Lookup the function starting at the top (instance level prototype) and traverse down, if the first matching function
                // if nothing is found or if the first hit is a dynamic proto instance then we can safely add an instance shortcut
                while (canAddInst && objProto && !_isObjectArrayOrFunctionPrototype(objProto) && !_hasVisited(visited, objProto)) {
                    var protoFunc = objProto[funcName];
                    if (protoFunc) {
                        canAddInst = (protoFunc === currentDynProtoProxy);
                        break;
                    }
                    // We need to find all possible initial functions to ensure that we don't bypass a valid override function
                    visited.push(objProto);
                    objProto = _getObjProto(objProto);
                }
                try {
                    if (canAddInst) {
                        // This instance doesn't have an instance func and the class hierarchy does have a higher level prototype version
                        // so it's safe to directly assign for any subsequent calls (for better performance)
                        target[funcName] = instFunc;
                    }
                    // Block further attempts to set the instance function for any
                    instFunc[DynInstChkTag] = 1;
                }
                catch (e) {
                    // Don't crash if the object is readonly or the runtime doesn't allow changing this
                    // And set a flag so we don't try again for any function
                    instFuncTable[DynAllowInstChkTag] = false;
                }
            }
        }
        return instFunc;
    }
    function _getProtoFunc(funcName, proto, currentDynProtoProxy) {
        var protoFunc = proto[funcName];
        // Check that the prototype function is not a self reference -- try to avoid stack overflow!
        if (protoFunc === currentDynProtoProxy) {
            // It is so lookup the base prototype
            protoFunc = _getObjProto(proto)[funcName];
        }
        if (typeof protoFunc !== strFunction) {
            _throwTypeError("[" + funcName + "] is not a " + strFunction);
        }
        return protoFunc;
    }
    /**
     * Add the required dynamic prototype methods to the the class prototype
     * @param proto - The class prototype
     * @param className - The instance classname
     * @param target - The target instance
     * @param baseInstFuncs - The base instance functions
     * @param setInstanceFunc - Flag to allow prototype function to reset the instance function if one does not exist
     * @ignore
     */
    function _populatePrototype(proto, className, target, baseInstFuncs, setInstanceFunc) {
        function _createDynamicPrototype(proto, funcName) {
            var dynProtoProxy = function () {
                // Use the instance or prototype function
                var instFunc = _getInstFunc(this, funcName, proto, dynProtoProxy) || _getProtoFunc(funcName, proto, dynProtoProxy);
                return instFunc.apply(this, arguments);
            };
            // Tag this function as a proxy to support replacing dynamic proxy elements (primary use case is for unit testing
            // via which can dynamically replace the prototype function reference)
            dynProtoProxy[DynProxyTag] = 1;
            return dynProtoProxy;
        }
        if (!_isObjectOrArrayPrototype(proto)) {
            var instFuncTable = target[DynInstFuncTable] = target[DynInstFuncTable] || {};
            var instFuncs_1 = instFuncTable[className] = (instFuncTable[className] || {}); // fetch and assign if as it may not exist yet
            // Set whether we are allow to lookup instances, if someone has set to false then do not re-enable
            if (instFuncTable[DynAllowInstChkTag] !== false) {
                instFuncTable[DynAllowInstChkTag] = !!setInstanceFunc;
            }
            _forEachProp(target, function (name) {
                // Only add overridden functions
                if (_isDynamicCandidate(target, name, false) && target[name] !== baseInstFuncs[name]) {
                    // Save the instance Function to the lookup table and remove it from the instance as it's not a dynamic proto function
                    instFuncs_1[name] = target[name];
                    delete target[name];
                    // Add a dynamic proto if one doesn't exist or if a prototype function exists and it's not a dynamic one
                    if (!_hasOwnProperty(proto, name) || (proto[name] && !proto[name][DynProxyTag])) {
                        proto[name] = _createDynamicPrototype(proto, name);
                    }
                }
            });
        }
    }
    /**
     * Checks whether the passed prototype object appears to be correct by walking the prototype hierarchy of the instance
     * @param classProto The class prototype instance
     * @param thisTarget The current instance that will be checked whether the passed prototype instance is in the hierarchy
     * @ignore
     */
    function _checkPrototype(classProto, thisTarget) {
        // This method doesn't existing in older browsers (e.g. IE8)
        if (_objGetPrototypeOf) {
            // As this is primarily a coding time check, don't bother checking if running in IE8 or lower
            var visited = [];
            var thisProto = _getObjProto(thisTarget);
            while (thisProto && !_isObjectArrayOrFunctionPrototype(thisProto) && !_hasVisited(visited, thisProto)) {
                if (thisProto === classProto) {
                    return true;
                }
                // This avoids the caller from needing to check whether it's direct base class implements the function or not
                // by walking the entire chain it simplifies the usage and issues from upgrading any of the base classes.
                visited.push(thisProto);
                thisProto = _getObjProto(thisProto);
            }
        }
        return false;
    }
    /**
     * Gets the current prototype name using the ES6 name if available otherwise falling back to a use unknown as the name.
     * It's not critical for this to return a name, it's used to decorate the generated unique name for easier debugging only.
     * @param target
     * @param unknownValue
     * @ignore
     */
    function _getObjName(target, unknownValue) {
        if (_hasOwnProperty(target, Prototype)) {
            // Look like a prototype
            return target.name || unknownValue || UnknownValue;
        }
        return (((target || {})[Constructor]) || {}).name || unknownValue || UnknownValue;
    }
    /**
     * Helper function when creating dynamic (inline) functions for classes, this helper performs the following tasks :-
     * - Saves references to all defined base class functions
     * - Calls the delegateFunc with the current target (this) and a base object reference that can be used to call all "super" functions.
     * - Will populate the class prototype for all overridden functions to support class extension that call the prototype instance.
     * Callers should use this helper when declaring all function within the constructor of a class, as mentioned above the delegateFunc is
     * passed both the target "this" and an object that can be used to call any base (super) functions, using this based object in place of
     * super.XXX() (which gets expanded to _super.prototype.XXX()) provides a better minification outcome and also ensures the correct "this"
     * context is maintained as TypeScript creates incorrect references using super.XXXX() for dynamically defined functions i.e. Functions
     * defined in the constructor or some other function (rather than declared as complete typescript functions).
     * ### Usage
     * ```typescript
     * import dynamicProto from "@microsoft/dynamicproto-js";
     * class ExampleClass extends BaseClass {
     *     constructor() {
     *         dynamicProto(ExampleClass, this, (_self, base) => {
     *             // This will define a function that will be converted to a prototype function
     *             _self.newFunc = () => {
     *                 // Access any "this" instance property
     *                 if (_self.someProperty) {
     *                     ...
     *                 }
     *             }
     *             // This will define a function that will be converted to a prototype function
     *             _self.myFunction = () => {
     *                 // Access any "this" instance property
     *                 if (_self.someProperty) {
     *                     // Call the base version of the function that we are overriding
     *                     base.myFunction();
     *                 }
     *                 ...
     *             }
     *             _self.initialize = () => {
     *                 ...
     *             }
     *             // Warnings: While the following will work as _self is simply a reference to
     *             // this, if anyone overrides myFunction() the overridden will be called first
     *             // as the normal JavaScript method resolution will occur and the defined
     *             // _self.initialize() function is actually gets removed from the instance and
     *             // a proxy prototype version is created to reference the created method.
     *             _self.initialize();
     *         });
     *     }
     * }
     * ```
     * @typeparam DPType This is the generic type of the class, used to keep intellisense valid
     * @typeparam DPCls The type that contains the prototype of the current class
     * @param theClass - This is the current class instance which contains the prototype for the current class
     * @param target - The current "this" (target) reference, when the class has been extended this.prototype will not be the 'theClass' value.
     * @param delegateFunc - The callback function (closure) that will create the dynamic function
     * @param options - Additional options to configure how the dynamic prototype operates
     */
    function dynamicProto(theClass, target, delegateFunc, options) {
        // Make sure that the passed theClass argument looks correct
        if (!_hasOwnProperty(theClass, Prototype)) {
            _throwTypeError("theClass is an invalid class definition.");
        }
        // Quick check to make sure that the passed theClass argument looks correct (this is a common copy/paste error)
        var classProto = theClass[Prototype];
        if (!_checkPrototype(classProto, target)) {
            _throwTypeError("[" + _getObjName(theClass) + "] is not in class hierarchy of [" + _getObjName(target) + "]");
        }
        var className = null;
        if (_hasOwnProperty(classProto, DynClassName)) {
            // Only grab the class name if it's defined on this prototype (i.e. don't walk the prototype chain)
            className = classProto[DynClassName];
        }
        else {
            // As not all browser support name on the prototype creating a unique dynamic one if we have not already
            // assigned one, so we can use a simple string as the lookup rather than an object for the dynamic instance
            // function table lookup.
            className = DynClassNamePrefix + _getObjName(theClass, "_") + "$" + _dynamicNames;
            _dynamicNames++;
            classProto[DynClassName] = className;
        }
        var perfOptions = dynamicProto[DynProtoDefaultOptions];
        var useBaseInst = !!perfOptions[strUseBaseInst];
        if (useBaseInst && options && options[strUseBaseInst] !== undefined) {
            useBaseInst = !!options[strUseBaseInst];
        }
        // Get the current instance functions
        var instFuncs = _getInstanceFuncs(target);
        // Get all of the functions for any base instance (before they are potentially overridden)
        var baseFuncs = _getBaseFuncs(classProto, target, instFuncs, useBaseInst);
        // Execute the delegate passing in both the current target "this" and "base" function references
        // Note casting the same type as we don't actually have the base class here and this will provide some intellisense support
        delegateFunc(target, baseFuncs);
        // Don't allow setting instance functions for older IE instances
        var setInstanceFunc = !!_objGetPrototypeOf && !!perfOptions[strSetInstFuncs];
        if (setInstanceFunc && options) {
            setInstanceFunc = !!options[strSetInstFuncs];
        }
        // Populate the Prototype for any overridden instance functions
        _populatePrototype(classProto, className, target, instFuncs, setInstanceFunc !== false);
    }
    /**
     * Exposes the default global options to allow global configuration, if the global values are disabled these will override
     * any passed values. This is primarily exposed to support unit-testing without the need for individual classes to expose
     * their internal usage of dynamic proto.
     */
    var perfDefaults = {
        setInstFuncs: true,
        useBaseInst: true
    };
    // And expose for testing
    dynamicProto[DynProtoDefaultOptions] = perfDefaults;

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */


    /**
     * The EventsDiscardedReason enumeration contains a set of values that specify the reason for discarding an event.
     */
    var EventsDiscardedReason = {
        /**
         * Unknown.
         */
        Unknown: 0,
        /**
         * Status set to non-retryable.
         */
        NonRetryableStatus: 1,
        /**
         * The event is invalid.
         */
        InvalidEvent: 2,
        /**
         * The size of the event is too large.
         */
        SizeLimitExceeded: 3,
        /**
         * The server is not accepting events from this instrumentation key.
         */
        KillSwitch: 4,
        /**
         * The event queue is full.
         */
        QueueFull: 5
    };

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */


    var LoggingSeverity;
    (function (LoggingSeverity) {
        /**
         * Error will be sent as internal telemetry
         */
        LoggingSeverity[LoggingSeverity["CRITICAL"] = 1] = "CRITICAL";
        /**
         * Error will NOT be sent as internal telemetry, and will only be shown in browser console
         */
        LoggingSeverity[LoggingSeverity["WARNING"] = 2] = "WARNING";
    })(LoggingSeverity || (LoggingSeverity = {}));
    /**
     * Internal message ID. Please create a new one for every conceptually different message. Please keep alphabetically ordered
     */
    var _InternalMessageId = {
        // Non user actionable
        BrowserDoesNotSupportLocalStorage: 0,
        BrowserCannotReadLocalStorage: 1,
        BrowserCannotReadSessionStorage: 2,
        BrowserCannotWriteLocalStorage: 3,
        BrowserCannotWriteSessionStorage: 4,
        BrowserFailedRemovalFromLocalStorage: 5,
        BrowserFailedRemovalFromSessionStorage: 6,
        CannotSendEmptyTelemetry: 7,
        ClientPerformanceMathError: 8,
        ErrorParsingAISessionCookie: 9,
        ErrorPVCalc: 10,
        ExceptionWhileLoggingError: 11,
        FailedAddingTelemetryToBuffer: 12,
        FailedMonitorAjaxAbort: 13,
        FailedMonitorAjaxDur: 14,
        FailedMonitorAjaxOpen: 15,
        FailedMonitorAjaxRSC: 16,
        FailedMonitorAjaxSend: 17,
        FailedMonitorAjaxGetCorrelationHeader: 18,
        FailedToAddHandlerForOnBeforeUnload: 19,
        FailedToSendQueuedTelemetry: 20,
        FailedToReportDataLoss: 21,
        FlushFailed: 22,
        MessageLimitPerPVExceeded: 23,
        MissingRequiredFieldSpecification: 24,
        NavigationTimingNotSupported: 25,
        OnError: 26,
        SessionRenewalDateIsZero: 27,
        SenderNotInitialized: 28,
        StartTrackEventFailed: 29,
        StopTrackEventFailed: 30,
        StartTrackFailed: 31,
        StopTrackFailed: 32,
        TelemetrySampledAndNotSent: 33,
        TrackEventFailed: 34,
        TrackExceptionFailed: 35,
        TrackMetricFailed: 36,
        TrackPVFailed: 37,
        TrackPVFailedCalc: 38,
        TrackTraceFailed: 39,
        TransmissionFailed: 40,
        FailedToSetStorageBuffer: 41,
        FailedToRestoreStorageBuffer: 42,
        InvalidBackendResponse: 43,
        FailedToFixDepricatedValues: 44,
        InvalidDurationValue: 45,
        TelemetryEnvelopeInvalid: 46,
        CreateEnvelopeError: 47,
        // User actionable
        CannotSerializeObject: 48,
        CannotSerializeObjectNonSerializable: 49,
        CircularReferenceDetected: 50,
        ClearAuthContextFailed: 51,
        ExceptionTruncated: 52,
        IllegalCharsInName: 53,
        ItemNotInArray: 54,
        MaxAjaxPerPVExceeded: 55,
        MessageTruncated: 56,
        NameTooLong: 57,
        SampleRateOutOfRange: 58,
        SetAuthContextFailed: 59,
        SetAuthContextFailedAccountName: 60,
        StringValueTooLong: 61,
        StartCalledMoreThanOnce: 62,
        StopCalledWithoutStart: 63,
        TelemetryInitializerFailed: 64,
        TrackArgumentsNotSpecified: 65,
        UrlTooLong: 66,
        SessionStorageBufferFull: 67,
        CannotAccessCookie: 68,
        IdTooLong: 69,
        InvalidEvent: 70,
        FailedMonitorAjaxSetRequestHeader: 71,
        SendBrowserInfoOnUserInit: 72,
        PluginException: 73,
        NotificationException: 74,
        SnippetScriptLoadFailure: 99,
        InvalidInstrumentationKey: 100,
        CannotParseAiBlobValue: 101,
        InvalidContentBlob: 102,
        TrackPageActionEventFailed: 103,
        FailedAddingCustomDefinedRequestContext: 104,
        InMemoryStorageBufferFull: 105
    };

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    // RESTRICT and AVOID circular dependencies you should not import other contained modules or export the contents of this file directly
    // Added to help with minfication
    var strOnPrefix = "on";
    var strAttachEvent = "attachEvent";
    var strAddEventHelper = "addEventListener";
    var strToISOString = "toISOString";
    var cStrEndsWith = "endsWith";
    var cStrStartsWith = "startsWith";
    var strIndexOf = "indexOf";
    var cStrTrim = "trim";
    var strToString = "toString";
    var _objDefineProperty = ObjDefineProperty;
    var _objFreeze = ObjClass.freeze;
    var _objKeys = ObjClass.keys;
    var StringProto = String[strShimPrototype];
    var _strTrim = StringProto[cStrTrim];
    var _strEndsWith = StringProto[cStrEndsWith];
    var _strStartsWith = StringProto[cStrStartsWith];
    var DateProto = Date[strShimPrototype];
    var _dataToISOString = DateProto[strToISOString];
    var _isArray = Array.isArray;
    var _objToString = ObjProto[strToString];
    var _fnToString = ObjHasOwnProperty[strToString];
    // Cache what this browser reports as the object function constructor (as a string)
    _fnToString.call(ObjClass);
    function isUndefined(value) {
        return value === undefined || typeof value === strShimUndefined;
    }
    function isNullOrUndefined(value) {
        return (value === null || isUndefined(value));
    }
    function isNotNullOrUndefined(value) {
        return !isNullOrUndefined(value);
    }
    function hasOwnProperty(obj, prop) {
        return !!(obj && ObjHasOwnProperty.call(obj, prop));
    }
    function isObject(value) {
        // Changing to inline for performance
        return !!(value && typeof value === strShimObject);
    }
    function isFunction(value) {
        // Changing to inline for performance
        return !!(value && typeof value === strShimFunction);
    }
    /**
     * Binds the specified function to an event, so that the function gets called whenever the event fires on the object
     * @param obj Object to add the event too.
     * @param eventNameWithoutOn String that specifies any of the standard DHTML Events without "on" prefix
     * @param handlerRef Pointer that specifies the function to call when event fires
     * @param useCapture [Optional] Defaults to false
     * @returns True if the function was bound successfully to the event, otherwise false
     */
    function attachEvent(obj, eventNameWithoutOn, handlerRef, useCapture) {
        if (useCapture === void 0) { useCapture = false; }
        var result = false;
        if (!isNullOrUndefined(obj)) {
            try {
                if (!isNullOrUndefined(obj[strAddEventHelper])) {
                    // all browsers except IE before version 9
                    obj[strAddEventHelper](eventNameWithoutOn, handlerRef, useCapture);
                    result = true;
                }
                else if (!isNullOrUndefined(obj[strAttachEvent])) {
                    // IE before version 9
                    obj[strAttachEvent](strOnPrefix + eventNameWithoutOn, handlerRef);
                    result = true;
                }
            }
            catch (e) {
                // Just Ignore any error so that we don't break any execution path
            }
        }
        return result;
    }
    /**
     * This is a helper function for the equivalent of arForEach(objKeys(target), callbackFn), this is a
     * performance optimization to avoid the creation of a new array for large objects
     * @param target The target object to find and process the keys
     * @param callbackfn The function to call with the details
     */
    function objForEachKey(target, callbackfn) {
        if (target) {
            for (var prop in target) {
                if (ObjHasOwnProperty.call(target, prop)) {
                    callbackfn.call(target, prop, target[prop]);
                }
            }
        }
    }
    /**
     * The strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
     * @param value - The value to check whether it ends with the search value.
     * @param search - The characters to be searched for at the end of the value.
     * @returns true if the given search value is found at the end of the string, otherwise false.
     */
    function strEndsWith(value, search) {
        var result = false;
        if (value && search && !(result = value === search)) {
            // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
            result = _strEndsWith ? value[cStrEndsWith](search) : _strEndsWithPoly(value, search);
        }
        return result;
    }
    /**
     * The _strEndsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.
     * @param value - The value to check whether it ends with the search value.
     * @param search - The characters to be searched for at the end of the value.
     * @returns true if the given search value is found at the end of the string, otherwise false.
     */
    function _strEndsWithPoly(value, search) {
        var result = false;
        var searchLen = search ? search.length : 0;
        var valLen = value ? value.length : 0;
        if (searchLen && valLen && valLen >= searchLen && !(result = value === search)) {
            var pos = valLen - 1;
            for (var lp = searchLen - 1; lp >= 0; lp--) {
                if (value[pos] != search[lp]) {
                    return false;
                }
                pos--;
            }
            result = true;
        }
        return result;
    }
    /**
     * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.
     * @param value - The value to check whether it ends with the search value.
     * @param checkValue - The characters to be searched for at the start of the value.
     * @returns true if the given search value is found at the start of the string, otherwise false.
     */
    function strStartsWith(value, checkValue) {
        var result = false;
        if (value && checkValue && !(result = value === checkValue)) {
            // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
            result = _strStartsWith ? value[cStrStartsWith](checkValue) : _strStartsWithPoly(value, checkValue);
        }
        return result;
    }
    /**
     * The strStartsWith() method determines whether a string starts with the characters of the specified string, returning true or false as appropriate.
     * @param value - The value to check whether it ends with the search value.
     * @param checkValue - The characters to be searched for at the start of the value.
     * @returns true if the given search value is found at the start of the string, otherwise false.
     */
    function _strStartsWithPoly(value, checkValue) {
        // Using helper for performance and because string startsWith() is not available on IE
        var result = false;
        var chkLen = checkValue ? checkValue.length : 0;
        if (value && chkLen && value.length >= chkLen && !(result = value === checkValue)) {
            for (var lp = 0; lp < chkLen; lp++) {
                if (value[lp] !== checkValue[lp]) {
                    return false;
                }
            }
            result = true;
        }
        return result;
    }
    /**
     * A simple wrapper (for minification support) to check if the value contains the search string.
     * @param value - The string value to check for the existence of the search value
     * @param search - The value search within the value
     */
    function strContains(value, search) {
        if (value && search) {
            return value.indexOf(search) !== -1;
        }
        return false;
    }
    /**
     * Check if an object is of type Array
     */
    var isArray = _isArray || _isArrayPoly;
    function _isArrayPoly(obj) {
        return !!(obj && _objToString.call(obj) === "[object Array]");
    }
    /**
     * Check if an object is of type Error
     */
    function isError(obj) {
        return !!(obj && _objToString.call(obj) === "[object Error]");
    }
    /**
     * Checks if the type of value is a string.
     * @param {any} value - Value to be checked.
     * @return {boolean} True if the value is a string, false otherwise.
     */
    function isString(value) {
        // Changing to inline for performance
        return typeof value === "string";
    }
    /**
     * Checks if the type of value is a number.
     * @param {any} value - Value to be checked.
     * @return {boolean} True if the value is a number, false otherwise.
     */
    function isNumber(value) {
        // Changing to inline for performance
        return typeof value === "number";
    }
    /**
     * Checks if the type of value is a boolean.
     * @param {any} value - Value to be checked.
     * @return {boolean} True if the value is a boolean, false otherwise.
     */
    function isBoolean(value) {
        // Changing to inline for performance
        return typeof value === "boolean";
    }
    /**
     * Convert a date to I.S.O. format in IE8
     */
    function toISOString(date) {
        if (date) {
            // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
            return _dataToISOString ? date[strToISOString]() : _toISOStringPoly(date);
        }
    }
    /**
     * Convert a date to I.S.O. format in IE8
     */
    function _toISOStringPoly(date) {
        if (date && date.getUTCFullYear) {
            var pad = function (num) {
                var r = String(num);
                if (r.length === 1) {
                    r = "0" + r;
                }
                return r;
            };
            return date.getUTCFullYear()
                + "-" + pad(date.getUTCMonth() + 1)
                + "-" + pad(date.getUTCDate())
                + "T" + pad(date.getUTCHours())
                + ":" + pad(date.getUTCMinutes())
                + ":" + pad(date.getUTCSeconds())
                + "." + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)
                + "Z";
        }
    }
    /**
     * Performs the specified action for each element in an array. This helper exists to avoid adding a polyfil for older browsers
     * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype
     * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would
     * cause a testing requirement to test with and without the implementations
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. It can return -1 to break out of the loop
     * @param thisArg  [Optional] An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    function arrForEach(arr, callbackfn, thisArg) {
        var len = arr.length;
        try {
            for (var idx = 0; idx < len; idx++) {
                if (idx in arr) {
                    if (callbackfn.call(thisArg || arr, arr[idx], idx, arr) === -1) {
                        break;
                    }
                }
            }
        }
        catch (e) {
            // This can happen with some native browser objects, but should not happen for the type we are checking for
        }
    }
    /**
     * Returns the index of the first occurrence of a value in an array. This helper exists to avoid adding a polyfil for older browsers
     * that do not define Array.prototype.xxxx (eg. ES3 only, IE8) just in case any page checks for presence/absence of the prototype
     * implementation. Note: For consistency this will not use the Array.prototype.xxxx implementation if it exists as this would
     * cause a testing requirement to test with and without the implementations
     * @param searchElement The value to locate in the array.
     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.
     */
    function arrIndexOf(arr, searchElement, fromIndex) {
        if (arr) {
            // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
            if (arr[strIndexOf]) {
                return arr[strIndexOf](searchElement, fromIndex);
            }
            var len = arr.length;
            var from = fromIndex || 0;
            try {
                for (var lp = Math.max(from >= 0 ? from : len - Math.abs(from), 0); lp < len; lp++) {
                    if (lp in arr && arr[lp] === searchElement) {
                        return lp;
                    }
                }
            }
            catch (e) {
                // This can happen with some native browser objects, but should not happen for the type we are checking for
            }
        }
        return -1;
    }
    /**
     * helper method to trim strings (IE8 does not implement String.prototype.trim)
     */
    function strTrim(str) {
        if (str) {
            // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
            str = (_strTrim && str[cStrTrim]) ? str[cStrTrim]() : (str.replace ? str.replace(/^\s+|\s+$/g, "") : str);
        }
        return str;
    }
    var _objKeysHasDontEnumBug = !({ toString: null }).propertyIsEnumerable("toString");
    var _objKeysDontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
    ];
    /**
     * Returns the names of the enumerable string properties and methods of an object. This helper exists to avoid adding a polyfil for older browsers
     * that do not define Object.keys eg. ES3 only, IE8 just in case any page checks for presence/absence of the prototype implementation.
     * Note: For consistency this will not use the Object.keys implementation if it exists as this would cause a testing requirement to test with and without the implementations
     * @param obj Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.
     */
    function objKeys(obj) {
        var objType = typeof obj;
        if (objType !== strShimFunction && (objType !== strShimObject || obj === null)) {
            throwTypeError("objKeys called on non-object");
        }
        // For Performance try and use the native instance, using string lookup of the function to easily pass the ES3 build checks and minification
        if (!_objKeysHasDontEnumBug && _objKeys) {
            return _objKeys(obj);
        }
        var result = [];
        for (var prop in obj) {
            if (obj && ObjHasOwnProperty.call(obj, prop)) {
                result.push(prop);
            }
        }
        if (_objKeysHasDontEnumBug) {
            var dontEnumsLength = _objKeysDontEnums.length;
            for (var lp = 0; lp < dontEnumsLength; lp++) {
                if (obj && ObjHasOwnProperty.call(obj, _objKeysDontEnums[lp])) {
                    result.push(_objKeysDontEnums[lp]);
                }
            }
        }
        return result;
    }
    /**
     * Try to define get/set object property accessors for the target object/prototype, this will provide compatibility with
     * existing API definition when run within an ES5+ container that supports accessors but still enable the code to be loaded
     * and executed in an ES3 container, providing basic IE8 compatibility.
     * @param target The object on which to define the property.
     * @param prop The name of the property to be defined or modified.
     * @param getProp The getter function to wire against the getter.
     * @param setProp The setter function to wire against the setter.
     * @returns True if it was able to create the accessors otherwise false
     */
    function objDefineAccessors(target, prop, getProp, setProp) {
        if (_objDefineProperty) {
            try {
                var descriptor = {
                    enumerable: true,
                    configurable: true
                };
                if (getProp) {
                    descriptor.get = getProp;
                }
                if (setProp) {
                    descriptor.set = setProp;
                }
                _objDefineProperty(target, prop, descriptor);
                return true;
            }
            catch (e) {
                // IE8 Defines a defineProperty on Object but it's only supported for DOM elements so it will throw
                // We will just ignore this here.
            }
        }
        return false;
    }
    function _doNothing(value) {
        return value;
    }
    var objFreeze = _objFreeze || _doNothing;
    /**
     * Return the current time via the Date now() function (if available) and falls back to (new Date()).getTime() if now() is unavailable (IE8 or less)
     * https://caniuse.com/#search=Date.now
     */
    function dateNow() {
        var dt = Date;
        return dt.now ? dt.now() : new dt().getTime();
    }
    /**
     * Returns the name of object if it's an Error. Otherwise, returns empty string.
     */
    function getExceptionName(object) {
        if (isError(object)) {
            return object.name;
        }
        return "";
    }
    /**
     * Sets the provided value on the target instance using the field name when the provided chk function returns true, the chk
     * function will only be called if the new value is no equal to the original value.
     * @param target - The target object
     * @param field - The key of the target
     * @param value - The value to set
     * @param valChk - [Optional] Callback to check the value that if supplied will be called check if the new value can be set
     * @param srcChk - [Optional] Callback to check to original value that if supplied will be called if the new value should be set (if allowed)
     * @returns The existing or new value, depending what was set
     */
    function setValue(target, field, value, valChk, srcChk) {
        var theValue = value;
        if (target) {
            theValue = target[field];
            if (theValue !== value && (!srcChk || srcChk(theValue)) && (!valChk || valChk(value))) {
                theValue = value;
                target[field] = theValue;
            }
        }
        return theValue;
    }
    /**
     * Returns the current value from the target object if not null or undefined otherwise sets the new value and returns it
     * @param target - The target object to return or set the default value
     * @param field - The key for the field to set on the target
     * @param defValue - [Optional] The value to set if not already present, when not provided a empty object will be added
     */
    function getSetValue(target, field, defValue) {
        var theValue;
        if (target) {
            theValue = target[field];
            if (!theValue && isNullOrUndefined(theValue)) {
                // Supports having the default as null
                theValue = !isUndefined(defValue) ? defValue : {};
                target[field] = theValue;
            }
        }
        else {
            // Expanded for performance so we only check defValue if required
            theValue = !isUndefined(defValue) ? defValue : {};
        }
        return theValue;
    }
    function isNotTruthy(value) {
        return !value;
    }
    function isTruthy(value) {
        return !!value;
    }
    function throwError(message) {
        throw new Error(message);
    }
    /**
     * A helper function to assist with JIT performance for objects that have properties added / removed dynamically
     * this is primarily for chromium based browsers and has limited effects on Firefox and none of IE. Only call this
     * function after you have finished "updating" the object, calling this within loops reduces or defeats the benefits.
     * This helps when iterating using for..in, objKeys() and objForEach()
     * @param theObject - The object to be optimized if possible
     */
    function optimizeObject(theObject) {
        // V8 Optimization to cause the JIT compiler to create a new optimized object for looking up the own properties
        // primarily for object with <= 19 properties for >= 20 the effect is reduced or non-existent
        if (theObject && ObjAssign) {
            theObject = ObjClass(ObjAssign({}, theObject));
        }
        return theObject;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    /**
     * This file exists to hold environment utilities that are required to check and
     * validate the current operating environment. Unless otherwise required, please
     * only use defined methods (functions) in this class so that users of these
     * functions/properties only need to include those that are used within their own modules.
     */
    var strWindow = "window";
    var strDocument = "document";
    var strNavigator = "navigator";
    var strLocation = "location";
    var strConsole = "console";
    var strPerformance = "performance";
    var strJSON = "JSON";
    var strCrypto = "crypto";
    var strMsCrypto = "msCrypto";
    var strReactNative = "ReactNative";
    var strMsie = "msie";
    var strTrident = "trident/";
    var _isTrident = null;
    var _navUserAgentCheck = null;
    var _enableMocks = false;
    var _useXDomainRequest = null;
    var _beaconsSupported = null;
    function _hasProperty(theClass, property) {
        var supported = false;
        if (theClass) {
            try {
                supported = property in theClass;
                if (!supported) {
                    var proto = theClass[strShimPrototype];
                    if (proto) {
                        supported = property in proto;
                    }
                }
            }
            catch (e) {
                // Do Nothing
            }
            if (!supported) {
                try {
                    var tmp = new theClass();
                    supported = !isUndefined(tmp[property]);
                }
                catch (e) {
                    // Do Nothing
                }
            }
        }
        return supported;
    }
    /**
     * Return the named global object if available, will return null if the object is not available.
     * @param name The globally named object
     */
    function getGlobalInst(name) {
        var gbl = getGlobal();
        if (gbl && gbl[name]) {
            return gbl[name];
        }
        // Test workaround, for environments where <global>.window (when global == window) doesn't return the base window
        if (name === strWindow && hasWindow()) {
            // tslint:disable-next-line: no-angle-bracket-type-assertion
            return window;
        }
        return null;
    }
    /**
     * Checks if window object is available, this is required as we support the API running without a
     * window /document (eg. Node server, electron webworkers) and if we attempt to assign a window
     * object to a local variable or pass as an argument an "Uncaught ReferenceError: window is not defined"
     * exception will be thrown.
     * Defined as a function to support lazy / late binding environments.
     */
    function hasWindow() {
        return Boolean(typeof window === strShimObject && window);
    }
    /**
     * Returns the global window object if it is present otherwise null.
     * This helper is used to access the window object without causing an exception
     * "Uncaught ReferenceError: window is not defined"
     */
    function getWindow() {
        if (hasWindow()) {
            return window;
        }
        // Return the global instance or null
        return getGlobalInst(strWindow);
    }
    /**
     * Checks if document object is available, this is required as we support the API running without a
     * window /document (eg. Node server, electron webworkers) and if we attempt to assign a document
     * object to a local variable or pass as an argument an "Uncaught ReferenceError: document is not defined"
     * exception will be thrown.
     * Defined as a function to support lazy / late binding environments.
     */
    function hasDocument() {
        return Boolean(typeof document === strShimObject && document);
    }
    /**
     * Returns the global document object if it is present otherwise null.
     * This helper is used to access the document object without causing an exception
     * "Uncaught ReferenceError: document is not defined"
     */
    function getDocument() {
        if (hasDocument()) {
            return document;
        }
        return getGlobalInst(strDocument);
    }
    /**
     * Checks if navigator object is available, this is required as we support the API running without a
     * window /document (eg. Node server, electron webworkers) and if we attempt to assign a navigator
     * object to a local variable or pass as an argument an "Uncaught ReferenceError: navigator is not defined"
     * exception will be thrown.
     * Defined as a function to support lazy / late binding environments.
     */
    function hasNavigator() {
        return Boolean(typeof navigator === strShimObject && navigator);
    }
    /**
     * Returns the global navigator object if it is present otherwise null.
     * This helper is used to access the navigator object without causing an exception
     * "Uncaught ReferenceError: navigator is not defined"
     */
    function getNavigator() {
        if (hasNavigator()) {
            return navigator;
        }
        return getGlobalInst(strNavigator);
    }
    /**
     * Returns the global location object if it is present otherwise null.
     * This helper is used to access the location object without causing an exception
     * "Uncaught ReferenceError: location is not defined"
     */
    function getLocation(checkForMock) {
        if (checkForMock && _enableMocks) {
            var mockLocation = getGlobalInst("__mockLocation");
            if (mockLocation) {
                return mockLocation;
            }
        }
        if (typeof location === strShimObject && location) {
            return location;
        }
        return getGlobalInst(strLocation);
    }
    /**
     * Returns the global console object
     */
    function getConsole() {
        if (typeof console !== strShimUndefined) {
            return console;
        }
        return getGlobalInst(strConsole);
    }
    /**
     * Returns the performance object if it is present otherwise null.
     * This helper is used to access the performance object from the current
     * global instance which could be window or globalThis for a web worker
     */
    function getPerformance() {
        return getGlobalInst(strPerformance);
    }
    /**
     * Checks if JSON object is available, this is required as we support the API running without a
     * window /document (eg. Node server, electron webworkers) and if we attempt to assign a history
     * object to a local variable or pass as an argument an "Uncaught ReferenceError: JSON is not defined"
     * exception will be thrown.
     * Defined as a function to support lazy / late binding environments.
     */
    function hasJSON() {
        return Boolean((typeof JSON === strShimObject && JSON) || getGlobalInst(strJSON) !== null);
    }
    /**
     * Returns the global JSON object if it is present otherwise null.
     * This helper is used to access the JSON object without causing an exception
     * "Uncaught ReferenceError: JSON is not defined"
     */
    function getJSON() {
        if (hasJSON()) {
            return JSON || getGlobalInst(strJSON);
        }
        return null;
    }
    /**
     * Returns the crypto object if it is present otherwise null.
     * This helper is used to access the crypto object from the current
     * global instance which could be window or globalThis for a web worker
     */
    function getCrypto() {
        return getGlobalInst(strCrypto);
    }
    /**
     * Returns the crypto object if it is present otherwise null.
     * This helper is used to access the crypto object from the current
     * global instance which could be window or globalThis for a web worker
     */
    function getMsCrypto() {
        return getGlobalInst(strMsCrypto);
    }
    /**
     * Returns whether the environment is reporting that we are running in a React Native Environment
     */
    function isReactNative() {
        // If running in React Native, navigator.product will be populated
        var nav = getNavigator();
        if (nav && nav.product) {
            return nav.product === strReactNative;
        }
        return false;
    }
    /**
     * Identifies whether the current environment appears to be IE
     */
    function isIE() {
        var nav = getNavigator();
        if (nav && (nav.userAgent !== _navUserAgentCheck || _isTrident === null)) {
            // Added to support test mocking of the user agent
            _navUserAgentCheck = nav.userAgent;
            var userAgent = (_navUserAgentCheck || "").toLowerCase();
            _isTrident = (strContains(userAgent, strMsie) || strContains(userAgent, strTrident));
        }
        return _isTrident;
    }
    /**
     * Returns string representation of an object suitable for diagnostics logging.
     */
    function dumpObj(object) {
        var objectTypeDump = Object[strShimPrototype].toString.call(object);
        var propertyValueDump = "";
        if (objectTypeDump === "[object Error]") {
            propertyValueDump = "{ stack: '" + object.stack + "', message: '" + object.message + "', name: '" + object.name + "'";
        }
        else if (hasJSON()) {
            propertyValueDump = getJSON().stringify(object);
        }
        return objectTypeDump + propertyValueDump;
    }
    /**
     * Checks if HTML5 Beacons are supported in the current environment.
     * @returns True if supported, false otherwise.
     */
    function isBeaconsSupported() {
        if (_beaconsSupported === null) {
            _beaconsSupported = hasNavigator() && Boolean(getNavigator().sendBeacon);
        }
        return _beaconsSupported;
    }
    /**
     * Checks if the Fetch API is supported in the current environment.
     * @param withKeepAlive - [Optional] If True, check if fetch is available and it supports the keepalive feature, otherwise only check if fetch is supported
     * @returns True if supported, otherwise false
     */
    function isFetchSupported(withKeepAlive) {
        var isSupported = false;
        try {
            var fetchApi = getGlobalInst("fetch");
            isSupported = !!fetchApi;
            var request = getGlobalInst("Request");
            if (isSupported && withKeepAlive && request) {
                isSupported = _hasProperty(request, "keepalive");
            }
        }
        catch (e) {
            // Just Swallow any failure during availability checks
        }
        return isSupported;
    }
    function useXDomainRequest() {
        if (_useXDomainRequest === null) {
            _useXDomainRequest = (typeof XDomainRequest !== "undefined");
            if (_useXDomainRequest && isXhrSupported()) {
                _useXDomainRequest = _useXDomainRequest && !_hasProperty(getGlobalInst("XMLHttpRequest"), "withCredentials");
            }
        }
        return _useXDomainRequest;
    }
    /**
     * Checks if XMLHttpRequest is supported
     * @returns True if supported, otherwise false
     */
    function isXhrSupported() {
        var isSupported = false;
        try {
            var xmlHttpRequest = getGlobalInst("XMLHttpRequest");
            isSupported = !!xmlHttpRequest;
        }
        catch (e) {
            // Just Swallow any failure during availability checks
        }
        return isSupported;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var listenerFuncs = ["eventsSent", "eventsDiscarded", "eventsSendRequest", "perfEvent"];
    var _aiNamespace = null;
    var _debugListener;
    function _listenerProxyFunc(name, config) {
        return function () {
            var args = arguments;
            var dbgExt = getDebugExt(config);
            if (dbgExt) {
                var listener = dbgExt.listener;
                if (listener && listener[name]) {
                    listener[name].apply(listener, args);
                }
            }
        };
    }
    function _getExtensionNamespace() {
        // Cache the lookup of the global namespace object
        var target = getGlobalInst("Microsoft");
        if (target) {
            _aiNamespace = target["ApplicationInsights"];
        }
        return _aiNamespace;
    }
    function getDebugExt(config) {
        var ns = _aiNamespace;
        if (!ns && config.disableDbgExt !== true) {
            ns = _aiNamespace || _getExtensionNamespace();
        }
        return ns ? ns["ChromeDbgExt"] : null;
    }
    function getDebugListener(config) {
        if (!_debugListener) {
            _debugListener = {};
            for (var lp = 0; lp < listenerFuncs.length; lp++) {
                _debugListener[listenerFuncs[lp]] = _listenerProxyFunc(listenerFuncs[lp], config);
            }
        }
        return _debugListener;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    /**
     * For user non actionable traces use AI Internal prefix.
     */
    var AiNonUserActionablePrefix = "AI (Internal): ";
    /**
     * Prefix of the traces in portal.
     */
    var AiUserActionablePrefix = "AI: ";
    /**
     *  Session storage key for the prefix for the key indicating message type already logged
     */
    var AIInternalMessagePrefix = "AITR_";
    var strErrorToConsole = "errorToConsole";
    var strWarnToConsole = "warnToConsole";
    function _sanitizeDiagnosticText(text) {
        if (text) {
            return "\"" + text.replace(/\"/g, "") + "\"";
        }
        return "";
    }
    function _logToConsole(func, message) {
        var theConsole = getConsole();
        if (!!theConsole) {
            var logFunc = "log";
            if (theConsole[func]) {
                logFunc = func;
            }
            if (isFunction(theConsole[logFunc])) {
                theConsole[logFunc](message);
            }
        }
    }
    var _InternalLogMessage = /** @class */ (function () {
        function _InternalLogMessage(msgId, msg, isUserAct, properties) {
            if (isUserAct === void 0) { isUserAct = false; }
            var _self = this;
            _self.messageId = msgId;
            _self.message =
                (isUserAct ? AiUserActionablePrefix : AiNonUserActionablePrefix) +
                    msgId;
            var strProps = "";
            if (hasJSON()) {
                strProps = getJSON().stringify(properties);
            }
            var diagnosticText = (msg ? " message:" + _sanitizeDiagnosticText(msg) : "") +
                (properties ? " props:" + _sanitizeDiagnosticText(strProps) : "");
            _self.message += diagnosticText;
        }
        _InternalLogMessage.dataType = "MessageData";
        return _InternalLogMessage;
    }());
    function safeGetLogger(core, config) {
        return (core || {}).logger || new DiagnosticLogger(config);
    }
    var DiagnosticLogger = /** @class */ (function () {
        function DiagnosticLogger(config) {
            this.identifier = "DiagnosticLogger";
            /**
             * The internal logging queue
             */
            this.queue = [];
            /**
             * Count of internal messages sent
             */
            var _messageCount = 0;
            /**
             * Holds information about what message types were already logged to console or sent to server.
             */
            var _messageLogged = {};
            dynamicProto(DiagnosticLogger, this, function (_self) {
                if (isNullOrUndefined(config)) {
                    config = {};
                }
                _self.consoleLoggingLevel = function () { return _getConfigValue("loggingLevelConsole", 0); };
                _self.telemetryLoggingLevel = function () { return _getConfigValue("loggingLevelTelemetry", 1); };
                _self.maxInternalMessageLimit = function () { return _getConfigValue("maxMessageLimit", 25); };
                _self.enableDebugExceptions = function () { return _getConfigValue("enableDebugExceptions", false); };
                /**
                 * This method will throw exceptions in debug mode or attempt to log the error as a console warning.
                 * @param severity {LoggingSeverity} - The severity of the log message
                 * @param message {_InternalLogMessage} - The log message.
                 */
                _self.throwInternal = function (severity, msgId, msg, properties, isUserAct) {
                    if (isUserAct === void 0) { isUserAct = false; }
                    var message = new _InternalLogMessage(msgId, msg, isUserAct, properties);
                    if (_self.enableDebugExceptions()) {
                        throw message;
                    }
                    else {
                        // Get the logging function and fallback to warnToConsole of for some reason errorToConsole doesn't exist
                        var logFunc = severity === LoggingSeverity.CRITICAL ? strErrorToConsole : strWarnToConsole;
                        if (!isUndefined(message.message)) {
                            var logLevel = _self.consoleLoggingLevel();
                            if (isUserAct) {
                                // check if this message type was already logged to console for this page view and if so, don't log it again
                                var messageKey = +message.messageId;
                                if (!_messageLogged[messageKey] && logLevel >= severity) {
                                    _self[logFunc](message.message);
                                    _messageLogged[messageKey] = true;
                                }
                            }
                            else {
                                // Only log traces if the console Logging Level is >= the throwInternal severity level
                                if (logLevel >= severity) {
                                    _self[logFunc](message.message);
                                }
                            }
                            _self.logInternalMessage(severity, message);
                        }
                        else {
                            _debugExtMsg("throw" + (severity === LoggingSeverity.CRITICAL ? "Critical" : "Warning"), message);
                        }
                    }
                };
                /**
                 * This will write a warning to the console if possible
                 * @param message {string} - The warning message
                 */
                _self.warnToConsole = function (message) {
                    _logToConsole("warn", message);
                    _debugExtMsg("warning", message);
                };
                /**
                 * This will write an error to the console if possible
                 * @param message {string} - The error message
                 */
                _self.errorToConsole = function (message) {
                    _logToConsole("error", message);
                    _debugExtMsg("error", message);
                };
                /**
                 * Resets the internal message count
                 */
                _self.resetInternalMessageCount = function () {
                    _messageCount = 0;
                    _messageLogged = {};
                };
                /**
                 * Logs a message to the internal queue.
                 * @param severity {LoggingSeverity} - The severity of the log message
                 * @param message {_InternalLogMessage} - The message to log.
                 */
                _self.logInternalMessage = function (severity, message) {
                    if (_areInternalMessagesThrottled()) {
                        return;
                    }
                    // check if this message type was already logged for this session and if so, don't log it again
                    var logMessage = true;
                    var messageKey = AIInternalMessagePrefix + message.messageId;
                    // if the session storage is not available, limit to only one message type per page view
                    if (_messageLogged[messageKey]) {
                        logMessage = false;
                    }
                    else {
                        _messageLogged[messageKey] = true;
                    }
                    if (logMessage) {
                        // Push the event in the internal queue
                        if (severity <= _self.telemetryLoggingLevel()) {
                            _self.queue.push(message);
                            _messageCount++;
                            _debugExtMsg((severity === LoggingSeverity.CRITICAL ? "error" : "warn"), message);
                        }
                        // When throttle limit reached, send a special event
                        if (_messageCount === _self.maxInternalMessageLimit()) {
                            var throttleLimitMessage = "Internal events throttle limit per PageView reached for this app.";
                            var throttleMessage = new _InternalLogMessage(_InternalMessageId.MessageLimitPerPVExceeded, throttleLimitMessage, false);
                            _self.queue.push(throttleMessage);
                            if (severity === LoggingSeverity.CRITICAL) {
                                _self.errorToConsole(throttleLimitMessage);
                            }
                            else {
                                _self.warnToConsole(throttleLimitMessage);
                            }
                        }
                    }
                };
                function _getConfigValue(name, defValue) {
                    var value = config[name];
                    if (!isNullOrUndefined(value)) {
                        return value;
                    }
                    return defValue;
                }
                function _areInternalMessagesThrottled() {
                    return _messageCount >= _self.maxInternalMessageLimit();
                }
                function _debugExtMsg(name, data) {
                    var dbgExt = getDebugExt(config);
                    if (dbgExt && dbgExt.diagLog) {
                        dbgExt.diagLog(name, data);
                    }
                }
            });
        }
    // Removed Stub for DiagnosticLogger.prototype.enableDebugExceptions.
    // Removed Stub for DiagnosticLogger.prototype.consoleLoggingLevel.
    // Removed Stub for DiagnosticLogger.prototype.telemetryLoggingLevel.
    // Removed Stub for DiagnosticLogger.prototype.maxInternalMessageLimit.
    // Removed Stub for DiagnosticLogger.prototype.throwInternal.
    // Removed Stub for DiagnosticLogger.prototype.warnToConsole.
    // Removed Stub for DiagnosticLogger.prototype.errorToConsole.
    // Removed Stub for DiagnosticLogger.prototype.resetInternalMessageCount.
    // Removed Stub for DiagnosticLogger.prototype.logInternalMessage.
        return DiagnosticLogger;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var strExecutionContextKey = "ctx";
    var _defaultPerfManager = null;
    var PerfEvent = /** @class */ (function () {
        function PerfEvent(name, payloadDetails, isAsync) {
            var _self = this;
            var accessorDefined = false;
            _self.start = dateNow();
            _self.name = name;
            _self.isAsync = isAsync;
            _self.isChildEvt = function () { return false; };
            if (isFunction(payloadDetails)) {
                // Create an accessor to minimize the potential performance impact of executing the payloadDetails callback
                var theDetails_1;
                accessorDefined = objDefineAccessors(_self, "payload", function () {
                    // Delay the execution of the payloadDetails until needed
                    if (!theDetails_1 && isFunction(payloadDetails)) {
                        theDetails_1 = payloadDetails();
                        // clear it out now so the referenced objects can be garbage collected
                        payloadDetails = null;
                    }
                    return theDetails_1;
                });
            }
            _self.getCtx = function (key) {
                if (key) {
                    // The parent and child links are located directly on the object (for better viewing in the DebugPlugin)
                    if (key === PerfEvent.ParentContextKey || key === PerfEvent.ChildrenContextKey) {
                        return _self[key];
                    }
                    return (_self[strExecutionContextKey] || {})[key];
                }
                return null;
            };
            _self.setCtx = function (key, value) {
                if (key) {
                    // Put the parent and child links directly on the object (for better viewing in the DebugPlugin)
                    if (key === PerfEvent.ParentContextKey) {
                        // Simple assumption, if we are setting a parent then we must be a child
                        if (!_self[key]) {
                            _self.isChildEvt = function () { return true; };
                        }
                        _self[key] = value;
                    }
                    else if (key === PerfEvent.ChildrenContextKey) {
                        _self[key] = value;
                    }
                    else {
                        var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                        ctx[key] = value;
                    }
                }
            };
            _self.complete = function () {
                var childTime = 0;
                var childEvts = _self.getCtx(PerfEvent.ChildrenContextKey);
                if (isArray(childEvts)) {
                    for (var lp = 0; lp < childEvts.length; lp++) {
                        var childEvt = childEvts[lp];
                        if (childEvt) {
                            childTime += childEvt.time;
                        }
                    }
                }
                _self.time = dateNow() - _self.start;
                _self.exTime = _self.time - childTime;
                _self.complete = function () { };
                if (!accessorDefined && isFunction(payloadDetails)) {
                    // If we couldn't define the property set during complete -- to minimize the perf impact until after the time
                    _self.payload = payloadDetails();
                }
            };
        }
        PerfEvent.ParentContextKey = "parent";
        PerfEvent.ChildrenContextKey = "childEvts";
        return PerfEvent;
    }());
    var PerfManager = /** @class */ (function () {
        function PerfManager(manager) {
            /**
             * General bucket used for execution context set and retrieved via setCtx() and getCtx.
             * Defined as private so it can be visualized via the DebugPlugin
             */
            this.ctx = {};
            dynamicProto(PerfManager, this, function (_self) {
                _self.create = function (src, payloadDetails, isAsync) {
                    // TODO (@MSNev): at some point we will want to add additional configuration to "select" which events to instrument
                    // for now this is just a simple do everything.
                    return new PerfEvent(src, payloadDetails, isAsync);
                };
                _self.fire = function (perfEvent) {
                    if (perfEvent) {
                        perfEvent.complete();
                        if (manager && isFunction(manager.perfEvent)) {
                            manager.perfEvent(perfEvent);
                        }
                    }
                };
                _self.setCtx = function (key, value) {
                    if (key) {
                        var ctx = _self[strExecutionContextKey] = _self[strExecutionContextKey] || {};
                        ctx[key] = value;
                    }
                };
                _self.getCtx = function (key) {
                    return (_self[strExecutionContextKey] || {})[key];
                };
            });
        }
    // Removed Stub for PerfManager.prototype.create.
    // Removed Stub for PerfManager.prototype.fire.
    // Removed Stub for PerfManager.prototype.setCtx.
    // Removed Stub for PerfManager.prototype.getCtx.
        return PerfManager;
    }());
    var doPerfActiveKey = "CoreUtils.doPerf";
    /**
     * Helper function to wrap a function with a perf event
     * @param mgrSource - The Performance Manager or a Performance provider source (may be null)
     * @param getSource - The callback to create the source name for the event (if perf monitoring is enabled)
     * @param func - The function to call and measure
     * @param details - A function to return the payload details
     * @param isAsync - Is the event / function being call asynchronously or synchronously
     */
    function doPerf(mgrSource, getSource, func, details, isAsync) {
        if (mgrSource) {
            var perfMgr = mgrSource;
            if (isFunction(perfMgr["getPerfMgr"])) {
                // Looks like a perf manager provider object
                perfMgr = perfMgr["getPerfMgr"]();
            }
            if (perfMgr) {
                var perfEvt = void 0;
                var currentActive = perfMgr.getCtx(doPerfActiveKey);
                try {
                    perfEvt = perfMgr.create(getSource(), details, isAsync);
                    if (perfEvt) {
                        if (currentActive && perfEvt.setCtx) {
                            perfEvt.setCtx(PerfEvent.ParentContextKey, currentActive);
                            if (currentActive.getCtx && currentActive.setCtx) {
                                var children = currentActive.getCtx(PerfEvent.ChildrenContextKey);
                                if (!children) {
                                    children = [];
                                    currentActive.setCtx(PerfEvent.ChildrenContextKey, children);
                                }
                                children.push(perfEvt);
                            }
                        }
                        // Set this event as the active event now
                        perfMgr.setCtx(doPerfActiveKey, perfEvt);
                        return func(perfEvt);
                    }
                }
                catch (ex) {
                    if (perfEvt && perfEvt.setCtx) {
                        perfEvt.setCtx("exception", ex);
                    }
                }
                finally {
                    // fire the perf event
                    if (perfEvt) {
                        perfMgr.fire(perfEvt);
                    }
                    // Reset the active event to the previous value
                    perfMgr.setCtx(doPerfActiveKey, currentActive);
                }
            }
        }
        return func();
    }
    /**
     * Get the current global performance manager that will be used with no performance manager is supplied.
     * @returns - The current default manager
     */
    function getGblPerfMgr() {
        return _defaultPerfManager;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var TelemetryPluginChain = /** @class */ (function () {
        function TelemetryPluginChain(plugin, defItemCtx) {
            var _self = this;
            var _nextProxy = null;
            var _hasProcessTelemetry = isFunction(plugin.processTelemetry);
            var _hasSetNext = isFunction(plugin.setNextPlugin);
            _self._hasRun = false;
            _self.getPlugin = function () {
                return plugin;
            };
            _self.getNext = function () {
                return _nextProxy;
            };
            _self.setNext = function (nextPlugin) {
                _nextProxy = nextPlugin;
            };
            _self.processTelemetry = function (env, itemCtx) {
                if (!itemCtx) {
                    // Looks like a plugin didn't pass the (optional) context, so restore to the default
                    itemCtx = defItemCtx;
                }
                var identifier = plugin ? plugin.identifier : "TelemetryPluginChain";
                doPerf(itemCtx ? itemCtx.core() : null, function () { return identifier + ":processTelemetry"; }, function () {
                    if (plugin && _hasProcessTelemetry) {
                        _self._hasRun = true;
                        try {
                            // Ensure that we keep the context in sync (for processNext()), just in case a plugin
                            // doesn't calls processTelemetry() instead of itemContext.processNext() or some
                            // other form of error occurred
                            itemCtx.setNext(_nextProxy);
                            if (_hasSetNext) {
                                // Backward compatibility setting the next plugin on the instance
                                plugin.setNextPlugin(_nextProxy);
                            }
                            // Set a flag on the next plugin so we know if it was attempted to be executed
                            _nextProxy && (_nextProxy._hasRun = false);
                            plugin.processTelemetry(env, itemCtx);
                        }
                        catch (error) {
                            var hasRun = _nextProxy && _nextProxy._hasRun;
                            if (!_nextProxy || !hasRun) {
                                // Either we have no next plugin or the current one did not attempt to call the next plugin
                                // Which means the current one is the root of the failure so log/report this failure
                                itemCtx.diagLog().throwInternal(LoggingSeverity.CRITICAL, _InternalMessageId.PluginException, "Plugin [" + plugin.identifier + "] failed during processTelemetry - " + dumpObj(error));
                            }
                            if (_nextProxy && !hasRun) {
                                // As part of the failure the current plugin did not attempt to call the next plugin in the cahin
                                // So rather than leave the pipeline dead in the water we call the next plugin
                                _nextProxy.processTelemetry(env, itemCtx);
                            }
                        }
                    }
                    else if (_nextProxy) {
                        _self._hasRun = true;
                        // The underlying plugin is either not defined or does not have a processTelemetry implementation
                        // so we still want the next plugin to be executed.
                        _nextProxy.processTelemetry(env, itemCtx);
                    }
                }, function () { return ({ item: env }); }, !(env.sync));
            };
        }
        return TelemetryPluginChain;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    /**
     * Creates the instance execution chain for the plugins
     */
    function _createProxyChain(plugins, itemCtx) {
        var proxies = [];
        if (plugins && plugins.length > 0) {
            // Create the proxies and wire up the next plugin chain
            var lastProxy = null;
            for (var idx = 0; idx < plugins.length; idx++) {
                var thePlugin = plugins[idx];
                if (thePlugin && isFunction(thePlugin.processTelemetry)) {
                    // Only add plugins that are processors
                    var newProxy = new TelemetryPluginChain(thePlugin, itemCtx);
                    proxies.push(newProxy);
                    if (lastProxy) {
                        // Set this new proxy as the next for the previous one
                        lastProxy.setNext(newProxy);
                    }
                    lastProxy = newProxy;
                }
            }
        }
        return proxies.length > 0 ? proxies[0] : null;
    }
    function _copyProxyChain(proxy, itemCtx, startAt) {
        var plugins = [];
        var add = startAt ? false : true;
        if (proxy) {
            while (proxy) {
                var thePlugin = proxy.getPlugin();
                if (add || thePlugin === startAt) {
                    add = true;
                    plugins.push(thePlugin);
                }
                proxy = proxy.getNext();
            }
        }
        if (!add) {
            plugins.push(startAt);
        }
        return _createProxyChain(plugins, itemCtx);
    }
    function _copyPluginChain(srcPlugins, itemCtx, startAt) {
        var plugins = srcPlugins;
        var add = false;
        if (startAt && srcPlugins) {
            plugins = [];
            arrForEach(srcPlugins, function (thePlugin) {
                if (add || thePlugin === startAt) {
                    add = true;
                    plugins.push(thePlugin);
                }
            });
        }
        if (startAt && !add) {
            if (!plugins) {
                plugins = [];
            }
            plugins.push(startAt);
        }
        return _createProxyChain(plugins, itemCtx);
    }
    var ProcessTelemetryContext = /** @class */ (function () {
        /**
         * Creates a new Telemetry Item context with the current config, core and plugin execution chain
         * @param plugins - The plugin instances that will be executed
         * @param config - The current config
         * @param core - The current core instance
         */
        function ProcessTelemetryContext(plugins, config, core, startAt) {
            var _self = this;
            var _nextProxy = null; // Null == No next plugin
            // There is no next element (null) vs not defined (undefined)
            if (startAt !== null) {
                if (plugins && isFunction(plugins.getPlugin)) {
                    // We have a proxy chain object
                    _nextProxy = _copyProxyChain(plugins, _self, startAt || plugins.getPlugin());
                }
                else {
                    // We just have an array
                    if (startAt) {
                        _nextProxy = _copyPluginChain(plugins, _self, startAt);
                    }
                    else if (isUndefined(startAt)) {
                        // Undefined means copy the existing chain
                        _nextProxy = _createProxyChain(plugins, _self);
                    }
                }
            }
            _self.core = function () {
                return core;
            };
            _self.diagLog = function () {
                return safeGetLogger(core, config);
            };
            _self.getCfg = function () {
                return config;
            };
            _self.getExtCfg = function (identifier, defaultValue) {
                if (defaultValue === void 0) { defaultValue = {}; }
                var theConfig;
                if (config) {
                    var extConfig = config.extensionConfig;
                    if (extConfig && identifier) {
                        theConfig = extConfig[identifier];
                    }
                }
                return (theConfig ? theConfig : defaultValue);
            };
            _self.getConfig = function (identifier, field, defaultValue) {
                if (defaultValue === void 0) { defaultValue = false; }
                var theValue;
                var extConfig = _self.getExtCfg(identifier, null);
                if (extConfig && !isNullOrUndefined(extConfig[field])) {
                    theValue = extConfig[field];
                }
                else if (config && !isNullOrUndefined(config[field])) {
                    theValue = config[field];
                }
                return !isNullOrUndefined(theValue) ? theValue : defaultValue;
            };
            _self.hasNext = function () {
                return _nextProxy != null;
            };
            _self.getNext = function () {
                return _nextProxy;
            };
            _self.setNext = function (nextPlugin) {
                _nextProxy = nextPlugin;
            };
            _self.processNext = function (env) {
                var nextPlugin = _nextProxy;
                if (nextPlugin) {
                    // Automatically move to the next plugin
                    _nextProxy = nextPlugin.getNext();
                    nextPlugin.processTelemetry(env, _self);
                }
            };
            _self.createNew = function (plugins, startAt) {
                if (plugins === void 0) { plugins = null; }
                return new ProcessTelemetryContext(plugins || _nextProxy, config, core, startAt);
            };
        }
        return ProcessTelemetryContext;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */


    var strIKey = "iKey";
    var strExtensionConfig = "extensionConfig";

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var strGetPlugin = "getPlugin";
    /**
     * BaseTelemetryPlugin provides a basic implementation of the ITelemetryPlugin interface so that plugins
     * can avoid implementation the same set of boiler plate code as well as provide a base
     * implementation so that new default implementations can be added without breaking all plugins.
     */
    var BaseTelemetryPlugin = /** @class */ (function () {
        function BaseTelemetryPlugin() {
            var _self = this;
            var _isinitialized = false;
            var _rootCtx = null; // Used as the root context, holding the current config and initialized core
            var _nextPlugin = null; // Used for backward compatibility where plugins don't call the main pipeline
            _self.core = null;
            _self.diagLog = function (itemCtx) {
                return _self._getTelCtx(itemCtx).diagLog();
            };
            _self.isInitialized = function () {
                return _isinitialized;
            };
            _self.setInitialized = function (isInitialized) {
                _isinitialized = isInitialized;
            };
            // _self.getNextPlugin = () => DO NOT IMPLEMENT
            // Sub-classes of this base class *should* not be relying on this value and instead
            // should use processNext() function. If you require access to the plugin use the
            // IProcessTelemetryContext.getNext().getPlugin() while in the pipeline, Note getNext() may return null.
            _self.setNextPlugin = function (next) {
                _nextPlugin = next;
            };
            _self.processNext = function (env, itemCtx) {
                if (itemCtx) {
                    // Normal core execution sequence
                    itemCtx.processNext(env);
                }
                else if (_nextPlugin && isFunction(_nextPlugin.processTelemetry)) {
                    // Looks like backward compatibility or out of band processing. And as it looks
                    // like a ITelemetryPlugin or ITelemetryPluginChain, just call processTelemetry
                    _nextPlugin.processTelemetry(env, null);
                }
            };
            _self._getTelCtx = function (currentCtx) {
                if (currentCtx === void 0) { currentCtx = null; }
                var itemCtx = currentCtx;
                if (!itemCtx) {
                    var rootCtx = _rootCtx || new ProcessTelemetryContext(null, {}, _self.core);
                    // tslint:disable-next-line: prefer-conditional-expression
                    if (_nextPlugin && _nextPlugin[strGetPlugin]) {
                        // Looks like a chain object
                        itemCtx = rootCtx.createNew(null, _nextPlugin[strGetPlugin]);
                    }
                    else {
                        itemCtx = rootCtx.createNew(null, _nextPlugin);
                    }
                }
                return itemCtx;
            };
            _self._baseTelInit = function (config, core, extensions, pluginChain) {
                if (config) {
                    // Make sure the extensionConfig exists
                    setValue(config, strExtensionConfig, [], null, isNullOrUndefined);
                }
                if (!pluginChain && core) {
                    // Get the first plugin from the core
                    pluginChain = core.getProcessTelContext().getNext();
                }
                var nextPlugin = _nextPlugin;
                if (_nextPlugin && _nextPlugin[strGetPlugin]) {
                    // If it looks like a proxy/chain then get the plugin
                    nextPlugin = _nextPlugin[strGetPlugin]();
                }
                // Support legacy plugins where core was defined as a property
                _self.core = core;
                _rootCtx = new ProcessTelemetryContext(pluginChain, config, core, nextPlugin);
                _isinitialized = true;
            };
        }
        BaseTelemetryPlugin.prototype.initialize = function (config, core, extensions, pluginChain) {
            this._baseTelInit(config, core, extensions, pluginChain);
        };
        return BaseTelemetryPlugin;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var processTelemetry = "processTelemetry";
    var priority = "priority";
    var setNextPlugin = "setNextPlugin";
    var isInitialized = "isInitialized";
    /**
     * Initialize the queue of plugins
     * @param plugins - The array of plugins to initialize and setting of the next plugin
     * @param config The current config for the instance
     * @param core THe current core instance
     * @param extensions The extensions
     */
    function initializePlugins(processContext, extensions) {
        // Set the next plugin and identified the uninitialized plugins
        var initPlugins = [];
        var lastPlugin = null;
        var proxy = processContext.getNext();
        while (proxy) {
            var thePlugin = proxy.getPlugin();
            if (thePlugin) {
                if (lastPlugin &&
                    isFunction(lastPlugin[setNextPlugin]) &&
                    isFunction(thePlugin[processTelemetry])) {
                    // Set this plugin as the next for the previous one
                    lastPlugin[setNextPlugin](thePlugin);
                }
                if (!isFunction(thePlugin[isInitialized]) || !thePlugin[isInitialized]()) {
                    initPlugins.push(thePlugin);
                }
                lastPlugin = thePlugin;
                proxy = proxy.getNext();
            }
        }
        // Now initiatilize the plugins
        arrForEach(initPlugins, function (thePlugin) {
            thePlugin.initialize(processContext.getCfg(), processContext.core(), extensions, processContext.getNext());
        });
    }
    function sortPlugins(plugins) {
        // Sort by priority
        return plugins.sort(function (extA, extB) {
            var result = 0;
            var bHasProcess = isFunction(extB[processTelemetry]);
            if (isFunction(extA[processTelemetry])) {
                result = bHasProcess ? extA[priority] - extB[priority] : 1;
            }
            else if (bHasProcess) {
                result = -1;
            }
            return result;
        });
        // sort complete
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var ChannelControllerPriority = 500;
    var ChannelValidationMessage = "Channel has invalid priority";
    var ChannelController = /** @class */ (function (_super) {
        __extendsFn(ChannelController, _super);
        function ChannelController() {
            var _this = _super.call(this) || this;
            _this.identifier = "ChannelControllerPlugin";
            _this.priority = ChannelControllerPriority; // in reserved range 100 to 200
            var _channelQueue;
            dynamicProto(ChannelController, _this, function (_self, _base) {
                _self.setNextPlugin = function (next) {
                    // The Channel controller is last in pipeline
                };
                _self.processTelemetry = function (item, itemCtx) {
                    if (_channelQueue) {
                        arrForEach(_channelQueue, function (queues) {
                            // pass on to first item in queue
                            if (queues.length > 0) {
                                // Copying the item context as we could have mutiple chains that are executing asynchronously
                                // and calling _getDefTelCtx as it's possible that the caller doesn't pass any context
                                var chainCtx = _this._getTelCtx(itemCtx).createNew(queues);
                                chainCtx.processNext(item);
                            }
                        });
                    }
                };
                _self.getChannelControls = function () {
                    return _channelQueue;
                };
                _self.initialize = function (config, core, extensions) {
                    if (_self.isInitialized()) {
                        // already initialized
                        return;
                    }
                    _base.initialize(config, core, extensions);
                    _createChannelQueues((config || {}).channels, extensions);
                    // Initialize the Queues
                    arrForEach(_channelQueue, function (queue) { return initializePlugins(new ProcessTelemetryContext(queue, config, core), extensions); });
                };
            });
            function _checkQueuePriority(queue) {
                arrForEach(queue, function (queueItem) {
                    if (queueItem.priority < ChannelControllerPriority) {
                        throwError(ChannelValidationMessage + queueItem.identifier);
                    }
                });
            }
            function _addChannelQueue(queue) {
                if (queue && queue.length > 0) {
                    queue = queue.sort(function (a, b) {
                        return a.priority - b.priority;
                    });
                    _checkQueuePriority(queue);
                    _channelQueue.push(queue);
                }
            }
            function _createChannelQueues(channels, extensions) {
                _channelQueue = [];
                if (channels) {
                    // Add and sort the configuration channel queues
                    arrForEach(channels, function (queue) { return _addChannelQueue(queue); });
                }
                if (extensions) {
                    // Create a new channel queue for any extensions with a priority > the ChannelControllerPriority
                    var extensionQueue_1 = [];
                    arrForEach(extensions, function (plugin) {
                        if (plugin.priority > ChannelControllerPriority) {
                            extensionQueue_1.push(plugin);
                        }
                    });
                    _addChannelQueue(extensionQueue_1);
                }
            }
            return _this;
        }
    // Removed Stub for ChannelController.prototype.processTelemetry.
    // Removed Stub for ChannelController.prototype.getChannelControls.
    // Removed Stub for ChannelController.prototype.initialize.
        /**
         * Static constructor, attempt to create accessors
         */
        // tslint:disable-next-line
        ChannelController._staticInit = (function () {
            var proto = ChannelController.prototype;
            // Dynamically create get/set property accessors
            objDefineAccessors(proto, "ChannelControls", proto.getChannelControls);
            objDefineAccessors(proto, "channelQueue", proto.getChannelControls);
        })();
        return ChannelController;
    }(BaseTelemetryPlugin));

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var strToGMTString = "toGMTString";
    var strToUTCString = "toUTCString";
    var strCookie = "cookie";
    var strExpires = "expires";
    var strEnabled = "enabled";
    var strIsCookieUseDisabled = "isCookieUseDisabled";
    var strDisableCookiesUsage = "disableCookiesUsage";
    var strConfigCookieMgr = "_ckMgr";
    var strEmpty = "";
    var _supportsCookies = null;
    var _allowUaSameSite = null;
    var _parsedCookieValue = null;
    var _doc = getDocument();
    var _cookieCache = {};
    var _globalCookieConfig = {};
    /**
     * @ignore
     * DO NOT USE or export from the module, this is exposed as public to support backward compatibility of previous static utility methods only.
     * If you want to manager cookies either use the ICookieMgr available from the core instance via getCookieMgr() or create
     * your own instance of the CookieMgr and use that.
     * Using this directly for enabling / disabling cookie handling will not only affect your usage but EVERY user of cookies.
     * Example, if you are using a shared component that is also using Application Insights you will affect their cookie handling.
     * @param logger - The DiagnosticLogger to use for reporting errors.
     */
    function _gblCookieMgr(config, logger) {
        // Stash the global instance against the BaseCookieMgr class
        var inst = createCookieMgr[strConfigCookieMgr] || _globalCookieConfig[strConfigCookieMgr];
        if (!inst) {
            // Note: not using the getSetValue() helper as that would require always creating a temporary cookieMgr
            // that ultimately is never used
            inst = createCookieMgr[strConfigCookieMgr] = createCookieMgr(config, logger);
            _globalCookieConfig[strConfigCookieMgr] = inst;
        }
        return inst;
    }
    function _isMgrEnabled(cookieMgr) {
        if (cookieMgr) {
            return cookieMgr.isEnabled();
        }
        return true;
    }
    function _createCookieMgrConfig(rootConfig) {
        var cookieMgrCfg = rootConfig.cookieCfg = rootConfig.cookieCfg || {};
        // Sets the values from the root config if not already present on the cookieMgrCfg
        setValue(cookieMgrCfg, "domain", rootConfig.cookieDomain, isNotNullOrUndefined, isNullOrUndefined);
        setValue(cookieMgrCfg, "path", rootConfig.cookiePath || "/", null, isNullOrUndefined);
        if (isNullOrUndefined(cookieMgrCfg[strEnabled])) {
            // Set the enabled from the provided setting or the legacy root values
            var cookieEnabled = void 0;
            if (!isUndefined(rootConfig[strIsCookieUseDisabled])) {
                cookieEnabled = !rootConfig[strIsCookieUseDisabled];
            }
            if (!isUndefined(rootConfig[strDisableCookiesUsage])) {
                cookieEnabled = !rootConfig[strDisableCookiesUsage];
            }
            cookieMgrCfg[strEnabled] = cookieEnabled;
        }
        return cookieMgrCfg;
    }
    /**
     * Helper to return the ICookieMgr from the core (if not null/undefined) or a default implementation
     * associated with the configuration or a legacy default.
     * @param core
     * @param config
     * @returns
     */
    function safeGetCookieMgr(core, config) {
        var cookieMgr;
        if (core) {
            // Always returns an instance
            cookieMgr = core.getCookieMgr();
        }
        else if (config) {
            var cookieCfg = config.cookieCfg;
            if (cookieCfg[strConfigCookieMgr]) {
                cookieMgr = cookieCfg[strConfigCookieMgr];
            }
            else {
                cookieMgr = createCookieMgr(config);
            }
        }
        if (!cookieMgr) {
            // Get or initialize the default global (legacy) cookie manager if we couldn't find one
            cookieMgr = _gblCookieMgr(config, (core || {}).logger);
        }
        return cookieMgr;
    }
    function createCookieMgr(rootConfig, logger) {
        var cookieMgrConfig = _createCookieMgrConfig(rootConfig || _globalCookieConfig);
        var _path = cookieMgrConfig.path || "/";
        var _domain = cookieMgrConfig.domain;
        // Explicitly checking against false, so that setting to undefined will === true
        var _enabled = cookieMgrConfig[strEnabled] !== false;
        var cookieMgr = {
            isEnabled: function () {
                var enabled = _enabled && areCookiesSupported(logger);
                // Using an indirect lookup for any global cookie manager to support tree shaking for SDK's
                // that don't use the "applicationinsights-core" version of the default cookie function
                var gblManager = _globalCookieConfig[strConfigCookieMgr];
                if (enabled && gblManager && cookieMgr !== gblManager) {
                    // Make sure the GlobalCookie Manager instance (if not this instance) is also enabled.
                    // As the global (deprecated) functions may have been called (for backward compatibility)
                    enabled = _isMgrEnabled(gblManager);
                }
                return enabled;
            },
            setEnabled: function (value) {
                // Explicitly checking against false, so that setting to undefined will === true
                _enabled = value !== false;
            },
            set: function (name, value, maxAgeSec, domain, path) {
                var result = false;
                if (_isMgrEnabled(cookieMgr)) {
                    var values = {};
                    var theValue = strTrim(value || strEmpty);
                    var idx = theValue.indexOf(";");
                    if (idx !== -1) {
                        theValue = strTrim(value.substring(0, idx));
                        values = _extractParts(value.substring(idx + 1));
                    }
                    // Only update domain if not already present (isUndefined) and the value is truthy (not null, undefined or empty string)
                    setValue(values, "domain", domain || _domain, isTruthy, isUndefined);
                    if (!isNullOrUndefined(maxAgeSec)) {
                        var _isIE = isIE();
                        if (isUndefined(values[strExpires])) {
                            var nowMs = dateNow();
                            // Only add expires if not already present
                            var expireMs = nowMs + (maxAgeSec * 1000);
                            // Sanity check, if zero or -ve then ignore
                            if (expireMs > 0) {
                                var expiry = new Date();
                                expiry.setTime(expireMs);
                                setValue(values, strExpires, _formatDate(expiry, !_isIE ? strToUTCString : strToGMTString) || _formatDate(expiry, _isIE ? strToGMTString : strToUTCString) || strEmpty, isTruthy);
                            }
                        }
                        if (!_isIE) {
                            // Only replace if not already present
                            setValue(values, "max-age", strEmpty + maxAgeSec, null, isUndefined);
                        }
                    }
                    var location_1 = getLocation();
                    if (location_1 && location_1.protocol === "https:") {
                        setValue(values, "secure", null, null, isUndefined);
                        // Only set same site if not also secure
                        if (_allowUaSameSite === null) {
                            _allowUaSameSite = !uaDisallowsSameSiteNone((getNavigator() || {}).userAgent);
                        }
                        if (_allowUaSameSite) {
                            setValue(values, "SameSite", "None", null, isUndefined);
                        }
                    }
                    setValue(values, "path", path || _path, null, isUndefined);
                    var setCookieFn = cookieMgrConfig.setCookie || _setCookieValue;
                    setCookieFn(name, _formatCookieValue(theValue, values));
                    result = true;
                }
                return result;
            },
            get: function (name) {
                var value = strEmpty;
                if (_isMgrEnabled(cookieMgr)) {
                    value = (cookieMgrConfig.getCookie || _getCookieValue)(name);
                }
                return value;
            },
            del: function (name, path) {
                var result = false;
                if (_isMgrEnabled(cookieMgr)) {
                    // Only remove the cookie if the manager and cookie support has not been disabled
                    result = cookieMgr.purge(name, path);
                }
                return result;
            },
            purge: function (name, path) {
                var _a;
                var result = false;
                if (areCookiesSupported(logger)) {
                    // Setting the expiration date in the past immediately removes the cookie
                    var values = (_a = {},
                        _a["path"] = path ? path : "/",
                        _a[strExpires] = "Thu, 01 Jan 1970 00:00:01 GMT",
                        _a);
                    if (!isIE()) {
                        // Set max age to expire now
                        values["max-age"] = "0";
                    }
                    var delCookie = cookieMgrConfig.delCookie || _setCookieValue;
                    delCookie(name, _formatCookieValue(strEmpty, values));
                    result = true;
                }
                return result;
            }
        };
        // Associated this cookie manager with the config
        cookieMgr[strConfigCookieMgr] = cookieMgr;
        return cookieMgr;
    }
    /*
    * Helper method to tell if document.cookie object is supported by the runtime
    */
    function areCookiesSupported(logger) {
        if (_supportsCookies === null) {
            _supportsCookies = false;
            try {
                var doc = _doc || {};
                _supportsCookies = doc[strCookie] !== undefined;
            }
            catch (e) {
                logger && logger.throwInternal(LoggingSeverity.WARNING, _InternalMessageId.CannotAccessCookie, "Cannot access document.cookie - " + getExceptionName(e), { exception: dumpObj(e) });
            }
        }
        return _supportsCookies;
    }
    function _extractParts(theValue) {
        var values = {};
        if (theValue && theValue.length) {
            var parts = strTrim(theValue).split(";");
            arrForEach(parts, function (thePart) {
                thePart = strTrim(thePart || strEmpty);
                if (thePart) {
                    var idx = thePart.indexOf("=");
                    if (idx === -1) {
                        values[thePart] = null;
                    }
                    else {
                        values[strTrim(thePart.substring(0, idx))] = strTrim(thePart.substring(idx + 1));
                    }
                }
            });
        }
        return values;
    }
    function _formatDate(theDate, func) {
        if (isFunction(theDate[func])) {
            return theDate[func]();
        }
        return null;
    }
    function _formatCookieValue(value, values) {
        var cookieValue = value || strEmpty;
        objForEachKey(values, function (name, theValue) {
            cookieValue += "; " + name + (!isNullOrUndefined(theValue) ? "=" + theValue : strEmpty);
        });
        return cookieValue;
    }
    function _getCookieValue(name) {
        var cookieValue = strEmpty;
        if (_doc) {
            var theCookie = _doc[strCookie] || strEmpty;
            if (_parsedCookieValue !== theCookie) {
                _cookieCache = _extractParts(theCookie);
                _parsedCookieValue = theCookie;
            }
            cookieValue = strTrim(_cookieCache[name] || strEmpty);
        }
        return cookieValue;
    }
    function _setCookieValue(name, cookieValue) {
        if (_doc) {
            _doc[strCookie] = name + "=" + cookieValue;
        }
    }
    function uaDisallowsSameSiteNone(userAgent) {
        if (!isString(userAgent)) {
            return false;
        }
        // Cover all iOS based browsers here. This includes:
        // - Safari on iOS 12 for iPhone, iPod Touch, iPad
        // - WkWebview on iOS 12 for iPhone, iPod Touch, iPad
        // - Chrome on iOS 12 for iPhone, iPod Touch, iPad
        // All of which are broken by SameSite=None, because they use the iOS networking stack
        if (strContains(userAgent, "CPU iPhone OS 12") || strContains(userAgent, "iPad; CPU OS 12")) {
            return true;
        }
        // Cover Mac OS X based browsers that use the Mac OS networking stack. This includes:
        // - Safari on Mac OS X
        // This does not include:
        // - Internal browser on Mac OS X
        // - Chrome on Mac OS X
        // - Chromium on Mac OS X
        // Because they do not use the Mac OS networking stack.
        if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strContains(userAgent, "Version/") && strContains(userAgent, "Safari")) {
            return true;
        }
        // Cover Mac OS X internal browsers that use the Mac OS networking stack. This includes:
        // - Internal browser on Mac OS X
        // This does not include:
        // - Safari on Mac OS X
        // - Chrome on Mac OS X
        // - Chromium on Mac OS X
        // Because they do not use the Mac OS networking stack.
        if (strContains(userAgent, "Macintosh; Intel Mac OS X 10_14") && strEndsWith(userAgent, "AppleWebKit/605.1.15 (KHTML, like Gecko)")) {
            return true;
        }
        // Cover Chrome 50-69, because some versions are broken by SameSite=None, and none in this range require it.
        // Note: this covers some pre-Chromium Edge versions, but pre-Chromim Edge does not require SameSite=None, so this is fine.
        // Note: this regex applies to Windows, Mac OS X, and Linux, deliberately.
        if (strContains(userAgent, "Chrome/5") || strContains(userAgent, "Chrome/6")) {
            return true;
        }
        // Unreal Engine runs Chromium 59, but does not advertise as Chrome until 4.23. Treat versions of Unreal
        // that don't specify their Chrome version as lacking support for SameSite=None.
        if (strContains(userAgent, "UnrealEngine") && !strContains(userAgent, "Chrome")) {
            return true;
        }
        // UCBrowser < 12.13.2 ignores Set-Cookie headers with SameSite=None
        // NB: this rule isn't complete - you need regex to make a complete rule.
        // See: https://www.chromium.org/updates/same-site/incompatible-clients
        if (strContains(userAgent, "UCBrowser/12") || strContains(userAgent, "UCBrowser/11")) {
            return true;
        }
        return false;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var validationError = "Extensions must provide callback to initialize";
    var strNotificationManager = "_notificationManager";
    /**
     * Helper to create the default performance manager
     * @param core
     * @param notificationMgr
     */
    function _createPerfManager(core, notificationMgr) {
        return new PerfManager(notificationMgr);
    }
    var BaseCore = /** @class */ (function () {
        function BaseCore() {
            var _isInitialized = false;
            var _eventQueue;
            var _channelController;
            var _notificationManager;
            var _perfManager;
            var _cookieManager;
            dynamicProto(BaseCore, this, function (_self) {
                _self._extensions = new Array();
                _channelController = new ChannelController();
                // Use a default logger so initialization errors are not dropped on the floor with full logging
                _self.logger = new DiagnosticLogger({ loggingLevelConsole: LoggingSeverity.CRITICAL });
                _eventQueue = [];
                _self.isInitialized = function () { return _isInitialized; };
                _self.initialize = function (config, extensions, logger, notificationManager) {
                    // Make sure core is only initialized once
                    if (_self.isInitialized()) {
                        throwError("Core should not be initialized more than once");
                    }
                    if (!config || isNullOrUndefined(config.instrumentationKey)) {
                        throwError("Please provide instrumentation key");
                    }
                    _notificationManager = notificationManager;
                    // For backward compatibility only
                    _self[strNotificationManager] = notificationManager;
                    _self.config = config || {};
                    if (notificationManager && _self.config.disableDbgExt !== true) {
                        notificationManager.addNotificationListener(getDebugListener(config));
                    }
                    if (_self.config.enablePerfMgr) {
                        // Set the performance manager creation function if not defined
                        setValue(_self.config, "createPerfMgr", _createPerfManager);
                    }
                    config.extensions = isNullOrUndefined(config.extensions) ? [] : config.extensions;
                    // add notification to the extensions in the config so other plugins can access it
                    var extConfig = getSetValue(config, strExtensionConfig);
                    extConfig.NotificationManager = notificationManager;
                    if (logger) {
                        _self.logger = logger;
                    }
                    // Concat all available extensions
                    var allExtensions = [];
                    allExtensions.push.apply(allExtensions, __spreadArrayFn(__spreadArrayFn([], extensions, false), config.extensions));
                    allExtensions = sortPlugins(allExtensions);
                    var coreExtensions = [];
                    // Check if any two extensions have the same priority, then warn to console
                    // And extract the local extensions from the
                    var extPriorities = {};
                    // Extension validation
                    arrForEach(allExtensions, function (ext) {
                        if (isNullOrUndefined(ext) || isNullOrUndefined(ext.initialize)) {
                            throwError(validationError);
                        }
                        var extPriority = ext.priority;
                        var identifier = ext.identifier;
                        if (ext && extPriority) {
                            if (!isNullOrUndefined(extPriorities[extPriority])) {
                                logger.warnToConsole("Two extensions have same priority #" + extPriority + " - " + extPriorities[extPriority] + ", " + identifier);
                            }
                            else {
                                // set a value
                                extPriorities[extPriority] = identifier;
                            }
                        }
                        // Split extensions to core and channelController
                        if (!extPriority || extPriority < _channelController.priority) {
                            // Add to core extension that will be managed by BaseCore
                            coreExtensions.push(ext);
                        }
                    });
                    // Validation complete
                    // Add the channelController to the complete extension collection and
                    // to the end of the core extensions
                    allExtensions.push(_channelController);
                    coreExtensions.push(_channelController);
                    // Sort the complete set of extensions by priority
                    allExtensions = sortPlugins(allExtensions);
                    _self._extensions = allExtensions;
                    // initialize channel controller first, this will initialize all channel plugins
                    initializePlugins(new ProcessTelemetryContext([_channelController], config, _self), allExtensions);
                    initializePlugins(new ProcessTelemetryContext(coreExtensions, config, _self), allExtensions);
                    // Now reset the extensions to just those being managed by Basecore
                    _self._extensions = coreExtensions;
                    if (_self.getTransmissionControls().length === 0) {
                        throwError("No channels available");
                    }
                    _isInitialized = true;
                    _self.releaseQueue();
                };
                _self.getTransmissionControls = function () {
                    return _channelController.getChannelControls();
                };
                _self.track = function (telemetryItem) {
                    // setup default iKey if not passed in
                    setValue(telemetryItem, strIKey, _self.config.instrumentationKey, null, isNotTruthy);
                    // add default timestamp if not passed in
                    setValue(telemetryItem, "time", toISOString(new Date()), null, isNotTruthy);
                    // Common Schema 4.0
                    setValue(telemetryItem, "ver", "4.0", null, isNullOrUndefined);
                    if (_self.isInitialized()) {
                        // Process the telemetry plugin chain
                        _self.getProcessTelContext().processNext(telemetryItem);
                    }
                    else {
                        // Queue events until all extensions are initialized
                        _eventQueue.push(telemetryItem);
                    }
                };
                _self.getProcessTelContext = function () {
                    var extensions = _self._extensions;
                    var thePlugins = extensions;
                    // invoke any common telemetry processors before sending through pipeline
                    if (!extensions || extensions.length === 0) {
                        // Pass to Channel controller so data is sent to correct channel queues
                        thePlugins = [_channelController];
                    }
                    return new ProcessTelemetryContext(thePlugins, _self.config, _self);
                };
                _self.getNotifyMgr = function () {
                    if (!_notificationManager) {
                        // Create Dummy notification manager
                        _notificationManager = objCreateFn({
                            addNotificationListener: function (listener) { },
                            removeNotificationListener: function (listener) { },
                            eventsSent: function (events) { },
                            eventsDiscarded: function (events, reason) { },
                            eventsSendRequest: function (sendReason, isAsync) { }
                        });
                        // For backward compatibility only
                        _self[strNotificationManager] = _notificationManager;
                    }
                    return _notificationManager;
                };
                _self.getCookieMgr = function () {
                    if (!_cookieManager) {
                        _cookieManager = createCookieMgr(_self.config, _self.logger);
                    }
                    return _cookieManager;
                };
                _self.setCookieMgr = function (cookieMgr) {
                    _cookieManager = cookieMgr;
                };
                _self.getPerfMgr = function () {
                    if (!_perfManager) {
                        if (_self.config && _self.config.enablePerfMgr && isFunction(_self.config.createPerfMgr)) {
                            _perfManager = _self.config.createPerfMgr(_self, _self.getNotifyMgr());
                        }
                    }
                    return _perfManager || getGblPerfMgr();
                };
                _self.setPerfMgr = function (perfMgr) {
                    _perfManager = perfMgr;
                };
                _self.eventCnt = function () {
                    return _eventQueue.length;
                };
                _self.releaseQueue = function () {
                    if (_eventQueue.length > 0) {
                        arrForEach(_eventQueue, function (event) {
                            _self.getProcessTelContext().processNext(event);
                        });
                        _eventQueue = [];
                    }
                };
            });
        }
    // Removed Stub for BaseCore.prototype.initialize.
    // Removed Stub for BaseCore.prototype.getTransmissionControls.
    // Removed Stub for BaseCore.prototype.track.
    // Removed Stub for BaseCore.prototype.getProcessTelContext.
    // Removed Stub for BaseCore.prototype.getNotifyMgr.
    // Removed Stub for BaseCore.prototype.getCookieMgr.
    // Removed Stub for BaseCore.prototype.setCookieMgr.
    // Removed Stub for BaseCore.prototype.getPerfMgr.
    // Removed Stub for BaseCore.prototype.setPerfMgr.
    // Removed Stub for BaseCore.prototype.eventCnt.
    // Removed Stub for BaseCore.prototype.releaseQueue.
        return BaseCore;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    /**
     * Class to manage sending notifications to all the listeners.
     */
    var NotificationManager = /** @class */ (function () {
        function NotificationManager(config) {
            this.listeners = [];
            var perfEvtsSendAll = !!(config || {}).perfEvtsSendAll;
            dynamicProto(NotificationManager, this, function (_self) {
                _self.addNotificationListener = function (listener) {
                    _self.listeners.push(listener);
                };
                /**
                 * Removes all instances of the listener.
                 * @param {INotificationListener} listener - AWTNotificationListener to remove.
                 */
                _self.removeNotificationListener = function (listener) {
                    var index = arrIndexOf(_self.listeners, listener);
                    while (index > -1) {
                        _self.listeners.splice(index, 1);
                        index = arrIndexOf(_self.listeners, listener);
                    }
                };
                /**
                 * Notification for events sent.
                 * @param {ITelemetryItem[]} events - The array of events that have been sent.
                 */
                _self.eventsSent = function (events) {
                    arrForEach(_self.listeners, function (listener) {
                        if (listener && listener.eventsSent) {
                            setTimeout(function () { return listener.eventsSent(events); }, 0);
                        }
                    });
                };
                /**
                 * Notification for events being discarded.
                 * @param {ITelemetryItem[]} events - The array of events that have been discarded by the SDK.
                 * @param {number} reason           - The reason for which the SDK discarded the events. The EventsDiscardedReason
                 * constant should be used to check the different values.
                 */
                _self.eventsDiscarded = function (events, reason) {
                    arrForEach(_self.listeners, function (listener) {
                        if (listener && listener.eventsDiscarded) {
                            setTimeout(function () { return listener.eventsDiscarded(events, reason); }, 0);
                        }
                    });
                };
                /**
                 * [Optional] A function called when the events have been requested to be sent to the sever.
                 * @param {number} sendReason - The reason why the event batch is being sent.
                 * @param {boolean} isAsync   - A flag which identifies whether the requests are being sent in an async or sync manner.
                 */
                _self.eventsSendRequest = function (sendReason, isAsync) {
                    arrForEach(_self.listeners, function (listener) {
                        if (listener && listener.eventsSendRequest) {
                            if (isAsync) {
                                setTimeout(function () { return listener.eventsSendRequest(sendReason, isAsync); }, 0);
                            }
                            else {
                                try {
                                    listener.eventsSendRequest(sendReason, isAsync);
                                }
                                catch (e) {
                                    // Catch errors to ensure we don't block sending the requests
                                }
                            }
                        }
                    });
                };
                _self.perfEvent = function (perfEvent) {
                    if (perfEvent) {
                        // Send all events or only parent events
                        if (perfEvtsSendAll || !perfEvent.isChildEvt()) {
                            arrForEach(_self.listeners, function (listener) {
                                if (listener && listener.perfEvent) {
                                    if (perfEvent.isAsync) {
                                        setTimeout(function () { return listener.perfEvent(perfEvent); }, 0);
                                    }
                                    else {
                                        try {
                                            listener.perfEvent(perfEvent);
                                        }
                                        catch (e) {
                                            // Catch errors to ensure we don't block sending the requests
                                        }
                                    }
                                }
                            });
                        }
                    }
                };
            });
        }
    // Removed Stub for NotificationManager.prototype.addNotificationListener.
    // Removed Stub for NotificationManager.prototype.removeNotificationListener.
    // Removed Stub for NotificationManager.prototype.eventsSent.
    // Removed Stub for NotificationManager.prototype.eventsDiscarded.
    // Removed Stub for NotificationManager.prototype.eventsSendRequest.
        return NotificationManager;
    }());

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var AppInsightsCore$2 = /** @class */ (function (_super) {
        __extendsFn(AppInsightsCore, _super);
        function AppInsightsCore() {
            var _this = _super.call(this) || this;
            /**
             * Internal log poller
             */
            var _internalLogPoller = 0;
            dynamicProto(AppInsightsCore, _this, function (_self, _base) {
                _self.initialize = function (config, extensions, logger, notificationManager) {
                    _base.initialize(config, extensions, logger || new DiagnosticLogger(config), notificationManager || new NotificationManager(config));
                };
                _self.track = function (telemetryItem) {
                    doPerf(_self.getPerfMgr(), function () { return "AppInsightsCore:track"; }, function () {
                        if (telemetryItem === null) {
                            _notifyInvalidEvent(telemetryItem);
                            // throw error
                            throwError("Invalid telemetry item");
                        }
                        // do basic validation before sending it through the pipeline
                        _validateTelemetryItem(telemetryItem);
                        _base.track(telemetryItem);
                    }, function () { return ({ item: telemetryItem }); }, !(telemetryItem.sync));
                };
                /**
                 * Adds a notification listener. The SDK calls methods on the listener when an appropriate notification is raised.
                 * The added plugins must raise notifications. If the plugins do not implement the notifications, then no methods will be
                 * called.
                 * @param {INotificationListener} listener - An INotificationListener object.
                 */
                _self.addNotificationListener = function (listener) {
                    var manager = _self.getNotifyMgr();
                    if (manager) {
                        manager.addNotificationListener(listener);
                    }
                };
                /**
                 * Removes all instances of the listener.
                 * @param {INotificationListener} listener - INotificationListener to remove.
                 */
                _self.removeNotificationListener = function (listener) {
                    var manager = _self.getNotifyMgr();
                    if (manager) {
                        manager.removeNotificationListener(listener);
                    }
                };
                /**
                 * Periodically check logger.queue for log messages to be flushed
                 */
                _self.pollInternalLogs = function (eventName) {
                    var interval = _self.config.diagnosticLogInterval;
                    if (!interval || !(interval > 0)) {
                        interval = 10000;
                    }
                    if (_internalLogPoller) {
                        _self.stopPollingInternalLogs();
                    }
                    _internalLogPoller = setInterval(function () {
                        var queue = _self.logger ? _self.logger.queue : [];
                        arrForEach(queue, function (logMessage) {
                            var item = {
                                name: eventName ? eventName : "InternalMessageId: " + logMessage.messageId,
                                iKey: _self.config.instrumentationKey,
                                time: toISOString(new Date()),
                                baseType: _InternalLogMessage.dataType,
                                baseData: { message: logMessage.message }
                            };
                            _self.track(item);
                        });
                        queue.length = 0;
                    }, interval);
                    return _internalLogPoller;
                };
                /**
                 * Stop polling log messages from logger.queue
                 */
                _self.stopPollingInternalLogs = function () {
                    if (!_internalLogPoller)
                        return;
                    clearInterval(_internalLogPoller);
                    _internalLogPoller = 0;
                };
                function _validateTelemetryItem(telemetryItem) {
                    if (isNullOrUndefined(telemetryItem.name)) {
                        _notifyInvalidEvent(telemetryItem);
                        throw Error("telemetry name required");
                    }
                }
                function _notifyInvalidEvent(telemetryItem) {
                    var manager = _self.getNotifyMgr();
                    if (manager) {
                        manager.eventsDiscarded([telemetryItem], EventsDiscardedReason.InvalidEvent);
                    }
                }
            });
            return _this;
        }
    // Removed Stub for AppInsightsCore.prototype.initialize.
    // Removed Stub for AppInsightsCore.prototype.track.
    // Removed Stub for AppInsightsCore.prototype.addNotificationListener.
    // Removed Stub for AppInsightsCore.prototype.removeNotificationListener.
    // Removed Stub for AppInsightsCore.prototype.pollInternalLogs.
    // Removed Stub for AppInsightsCore.prototype.stopPollingInternalLogs.
        return AppInsightsCore;
    }(BaseCore));

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var UInt32Mask = 0x100000000;
    var MaxUInt32 = 0xffffffff;
    // MWC based Random generator (for IE)
    var _mwcSeeded = false;
    var _mwcW = 123456789;
    var _mwcZ = 987654321;
    // Takes any integer
    function _mwcSeed(seedValue) {
        if (seedValue < 0) {
            // Make sure we end up with a positive number and not -ve one.
            seedValue >>>= 0;
        }
        _mwcW = (123456789 + seedValue) & MaxUInt32;
        _mwcZ = (987654321 - seedValue) & MaxUInt32;
        _mwcSeeded = true;
    }
    function _autoSeedMwc() {
        // Simple initialization using default Math.random() - So we inherit any entropy from the browser
        // and bitwise XOR with the current milliseconds
        try {
            var now = dateNow() & 0x7fffffff;
            _mwcSeed(((Math.random() * UInt32Mask) ^ now) + now);
        }
        catch (e) {
            // Don't crash if something goes wrong
        }
    }
    /**
     * Generate a random value between 0 and maxValue, max value should be limited to a 32-bit maximum.
     * So maxValue(16) will produce a number from 0..16 (range of 17)
     * @param maxValue
     */
    function randomValue(maxValue) {
        if (maxValue > 0) {
            return Math.floor((random32() / MaxUInt32) * (maxValue + 1)) >>> 0;
        }
        return 0;
    }
    /**
     * generate a random 32-bit number (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), defaults un-unsigned.
     * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)
     */
    function random32(signed) {
        var value;
        var c = getCrypto() || getMsCrypto();
        if (c && c.getRandomValues) {
            // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
            value = c.getRandomValues(new Uint32Array(1))[0] & MaxUInt32;
        }
        else if (isIE()) {
            // For IE 6, 7, 8 (especially on XP) Math.random is not very random
            if (!_mwcSeeded) {
                // Set the seed for the Mwc algorithm
                _autoSeedMwc();
            }
            // Don't use Math.random for IE
            // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
            value = mwcRandom32() & MaxUInt32;
        }
        else {
            // Make sure the number is converted into the specified range (-0x80000000..0x7FFFFFFF)
            value = Math.floor((UInt32Mask * Math.random()) | 0);
        }
        if (!signed) {
            // Make sure we end up with a positive number and not -ve one.
            value >>>= 0;
        }
        return value;
    }
    /**
     * Generate a random 32-bit number between (0x000000..0xFFFFFFFF) or (-0x80000000..0x7FFFFFFF), using MWC (Multiply with carry)
     * instead of Math.random() defaults to un-signed.
     * Used as a replacement random generator for IE to avoid issues with older IE instances.
     * @param signed - True to return a signed 32-bit number (-0x80000000..0x7FFFFFFF) otherwise an unsigned one (0x000000..0xFFFFFFFF)
     */
    function mwcRandom32(signed) {
        _mwcZ = (36969 * (_mwcZ & 0xFFFF) + (_mwcZ >> 16)) & MaxUInt32;
        _mwcW = (18000 * (_mwcW & 0xFFFF) + (_mwcW >> 16)) & MaxUInt32;
        var value = (((_mwcZ << 16) + (_mwcW & 0xFFFF)) >>> 0) & MaxUInt32 | 0;
        if (!signed) {
            // Make sure we end up with a positive number and not -ve one.
            value >>>= 0;
        }
        return value;
    }

    /*
     * Application Insights JavaScript SDK - Core, 2.7.4
     * Copyright (c) Microsoft and contributors. All rights reserved.
     */
    var strVisibilityChangeEvt = "visibilitychange";
    var strPageHide = "pagehide";
    var strPageShow = "pageshow";
    /**
     * Trys to add an event handler for the specified event to the window, body and document
     * @param eventName {string} - The name of the event
     * @param callback {any} - The callback function that needs to be executed for the given event
     * @return {boolean} - true if the handler was successfully added
     */
    function addEventHandler(eventName, callback) {
        var result = false;
        var w = getWindow();
        if (w) {
            result = attachEvent(w, eventName, callback);
            result = attachEvent(w["body"], eventName, callback) || result;
        }
        var doc = getDocument();
        if (doc) {
            result = attachEvent(doc, eventName, callback) || result;
        }
        return result;
    }
    /**
     * Bind the listener to the array of events
     * @param events An string array of event names to bind the listener to
     * @param listener The event callback to call when the event is triggered
     * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
     * @returns true - when at least one of the events was registered otherwise false
     */
    function addEventListeners(events, listener, excludeEvents) {
        var added = false;
        if (listener && events && isArray(events)) {
            var excluded_1 = [];
            arrForEach(events, function (name) {
                if (isString(name)) {
                    if (!excludeEvents || arrIndexOf(excludeEvents, name) === -1) {
                        added = addEventHandler(name, listener) || added;
                    }
                    else {
                        excluded_1.push(name);
                    }
                }
            });
            if (!added && excluded_1.length > 0) {
                // Failed to add any listeners and we excluded some, so just attempt to add the excluded events
                added = addEventListeners(excluded_1, listener);
            }
        }
        return added;
    }
    /**
     * Listen to the 'beforeunload', 'unload' and 'pagehide' events which indicates a page unload is occurring,
     * this does NOT listen to the 'visibilitychange' event as while it does indicate that the page is being hidden
     * it does not *necessarily* mean that the page is being completely unloaded, it can mean that the user is
     * just navigating to a different Tab and may come back (without unloading the page). As such you may also
     * need to listen to the 'addPageHideEventListener' and 'addPageShowEventListener' events.
     * @param listener - The event callback to call when a page unload event is triggered
     * @param excludeEvents - [Optional] An array of events that should not be hooked, unless no other events can be.
     * @returns true - when at least one of the events was registered otherwise false
     */
    function addPageUnloadEventListener(listener, excludeEvents) {
        // Hook the unload event for the document, window and body to ensure that the client events are flushed to the server
        // As just hooking the window does not always fire (on chrome) for page navigation's.
        return addEventListeners(["beforeunload", "unload", "pagehide"], listener, excludeEvents);
    }
    /**
     * Listen to the pagehide and visibility changing to 'hidden' events
     * @param listener - The event callback to call when a page hide event is triggered
     * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
     * Suggestion: pass as true if you are also calling addPageUnloadEventListener as that also hooks pagehide
     * @returns true - when at least one of the events was registered otherwise false
     */
    function addPageHideEventListener(listener, excludeEvents) {
        function _handlePageVisibility(evt) {
            var doc = getDocument();
            if (listener && doc && doc.visibilityState === "hidden") {
                listener(evt);
            }
        }
        var pageUnloadAdded = false;
        if (!excludeEvents || arrIndexOf(excludeEvents, strPageHide) === -1) {
            pageUnloadAdded = addEventHandler(strPageHide, listener);
        }
        if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {
            pageUnloadAdded = addEventHandler(strVisibilityChangeEvt, _handlePageVisibility) || pageUnloadAdded;
        }
        if (!pageUnloadAdded && excludeEvents) {
            // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything
            pageUnloadAdded = addPageHideEventListener(listener);
        }
        return pageUnloadAdded;
    }
    /**
     * Listen to the pageshow and visibility changing to 'visible' events
     * @param listener - The event callback to call when a page is show event is triggered
     * @param excludeEvents - [Optional] An array of events that should not be hooked (if possible), unless no other events can be.
     * @returns true - when at least one of the events was registered otherwise false
     */
    function addPageShowEventListener(listener, excludeEvents) {
        function _handlePageVisibility(evt) {
            var doc = getDocument();
            if (listener && doc && doc.visibilityState === "visible") {
                listener(evt);
            }
        }
        var pageShowAdded = false;
        if (!excludeEvents || arrIndexOf(excludeEvents, strPageShow) === -1) {
            pageShowAdded = addEventHandler(strPageShow, listener);
        }
        if (!excludeEvents || arrIndexOf(excludeEvents, strVisibilityChangeEvt) === -1) {
            pageShowAdded = addEventHandler(strVisibilityChangeEvt, _handlePageVisibility) || pageShowAdded;
        }
        if (!pageShowAdded && excludeEvents) {
            // Failed to add any listeners and we where requested to exclude some, so just call again without excluding anything
            pageShowAdded = addPageShowEventListener(listener);
        }
        return pageShowAdded;
    }
    function newGuid() {
        function randomHexDigit() {
            return randomValue(15); // Get a random value from 0..15
        }
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(GuidRegex, function (c) {
            var r = (randomHexDigit() | 0), v = (c === "x" ? r : r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * Return the current value of the Performance Api now() function (if available) and fallback to dateNow() if it is unavailable (IE9 or less)
     * https://caniuse.com/#search=performance.now
     */
    function perfNow() {
        var perf = getPerformance();
        if (perf && perf.now) {
            return perf.now();
        }
        return dateNow();
    }
    /**
     * Generate random base64 id string.
     * The default length is 22 which is 132-bits so almost the same as a GUID but as base64 (the previous default was 5)
     * @param maxLength - Optional value to specify the length of the id to be generated, defaults to 22
     */
    function newId(maxLength) {
        if (maxLength === void 0) { maxLength = 22; }
        var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        // Start with an initial random number, consuming the value in reverse byte order
        var number = random32() >>> 0; // Make sure it's a +ve number
        var chars = 0;
        var result = "";
        while (result.length < maxLength) {
            chars++;
            result += base64chars.charAt(number & 0x3F);
            number >>>= 6; // Zero fill with right shift
            if (chars === 5) {
                // 5 base64 characters === 30 bits so we don't have enough bits for another base64 char
                // So add on another 30 bits and make sure it's +ve
                number = (((random32() << 2) & 0xFFFFFFFF) | (number & 0x03)) >>> 0;
                chars = 0; // We need to reset the number every 5 chars (30 bits)
            }
        }
        return result;
    }
    /**
     * generate W3C trace id
     */
    function generateW3CId() {
        var hexValues = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
        // rfc4122 version 4 UUID without dashes and with lowercase letters
        var oct = "", tmp;
        for (var a = 0; a < 4; a++) {
            tmp = random32();
            oct +=
                hexValues[tmp & 0xF] +
                    hexValues[tmp >> 4 & 0xF] +
                    hexValues[tmp >> 8 & 0xF] +
                    hexValues[tmp >> 12 & 0xF] +
                    hexValues[tmp >> 16 & 0xF] +
                    hexValues[tmp >> 20 & 0xF] +
                    hexValues[tmp >> 24 & 0xF] +
                    hexValues[tmp >> 28 & 0xF];
        }
        // "Set the two most significant bits (bits 6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively"
        var clockSequenceHi = hexValues[8 + (random32() & 0x03) | 0];
        return oct.substr(0, 8) + oct.substr(9, 4) + "4" + oct.substr(13, 3) + clockSequenceHi + oct.substr(16, 3) + oct.substr(19, 12);
    }
    var GuidRegex = /[xy]/g;

    /*
     * 1DS JS SDK Core, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
     * The ValueKind contains a set of values that specify value kind of the property.
     * Either PII (Personal Identifiable Information) or customer content.
     */
    var ValueKind = {
        /**
         * No kind.
         */
        NotSet: 0,
        /**
         * An LDAP distinguished name. For example, CN=Jeff Smith,OU=Sales,DC=Fabrikam,DC=COM.
         */
        Pii_DistinguishedName: 1,
        /**
         * Generic information.
         */
        Pii_GenericData: 2,
        /**
         * An IPV4 Internet address. For example, 192.0.2.1.
         */
        Pii_IPV4Address: 3,
        /**
         * An IPV6 Internet address. For example, 2001:0db8:85a3:0000:0000:8a2e:0370:7334.
         */
        Pii_IPv6Address: 4,
        /**
         * The Subject of an e-mail message.
         */
        Pii_MailSubject: 5,
        /**
         * A telephone number.
         */
        Pii_PhoneNumber: 6,
        /**
         * A query string.
         */
        Pii_QueryString: 7,
        /**
         * An SIP (Session Internet Protocol) address.
         */
        Pii_SipAddress: 8,
        /**
         * An e-mail address.
         */
        Pii_SmtpAddress: 9,
        /**
         * An user ID.
         */
        Pii_Identity: 10,
        /**
         * A URI (Uniform Resource Identifier).
         */
        Pii_Uri: 11,
        /**
         * The fully-qualified domain name.
         */
        Pii_Fqdn: 12,
        /**
         * Scrubs the last octet in a IPV4 Internet address.
         * For example: 10.121.227.147 becomes 10.121.227.*
         */
        Pii_IPV4AddressLegacy: 13,
        /**
         * Generic content.
         */
        CustomerContent_GenericContent: 32
    };
    /**
     * The EventLatency contains a set of values that specify the latency with which an event is sent.
     */
    var EventLatency = {
        /**
         * Normal latency.
         */
        Normal: 1 /* Normal */,
        /**
         * Cost deferred latency. At the moment this latency is treated as Normal latency.
         */
        CostDeferred: 2 /* CostDeferred */,
        /**
         * Real time latency.
         */
        RealTime: 3 /* RealTime */,
        /**
         * Bypass normal batching/timing and send as soon as possible, this will still send asynchronously.
         * Added in v3.1.1
         */
        Immediate: 4 /* Immediate */
    };
    /**
     * Enum for property types.
     */
    var EventPropertyType = {
        Unspecified: 0,
        String: 1,
        Int32: 2,
        UInt32: 3,
        Int64: 4,
        UInt64: 5,
        Double: 6,
        Bool: 7,
        Guid: 8,
        DateTime: 9
    };
    var _ExtendedInternalMessageId = __assignFn(__assignFn({}, _InternalMessageId), { AuthHandShakeError: 501, AuthRedirectFail: 502, BrowserCannotReadLocalStorage: 503, BrowserCannotWriteLocalStorage: 504, BrowserDoesNotSupportLocalStorage: 505, CannotParseBiBlobValue: 506, CannotParseDataAttribute: 507, CVPluginNotAvailable: 508, DroppedEvent: 509, ErrorParsingAISessionCookie: 510, ErrorProvidedChannels: 511, FailedToGetCookies: 512, FailedToInitializeCorrelationVector: 513, FailedToInitializeSDK: 514, InvalidContentBlob: 515, InvalidCorrelationValue: 516, SessionRenewalDateIsZero: 517, SendPostOnCompleteFailure: 518, PostResponseHandler: 519, SDKNotInitialized: 520 });

    /*
     * 1DS JS SDK Core, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var _a$1;
    var Version = '3.1.11';
    var FullVersionString = "1DS-Web-JS-" + Version;
    // Defining here so we don't need to take (import) the ApplicationInsights Common module
    var strDisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
    var strWithCredentials = "withCredentials";
    var strTimeout = "timeout";
    // If value is array just get the type for the first element
    var _fieldTypeEventPropMap = (_a$1 = {},
        _a$1[0 /* NotSet */] = EventPropertyType.Unspecified,
        _a$1[2 /* Number */] = EventPropertyType.Double,
        _a$1[1 /* String */] = EventPropertyType.String,
        _a$1[3 /* Boolean */] = EventPropertyType.Bool,
        _a$1[4096 /* Array */ | 2 /* Number */] = EventPropertyType.Double,
        _a$1[4096 /* Array */ | 1 /* String */] = EventPropertyType.String,
        _a$1[4096 /* Array */ | 3 /* Boolean */] = EventPropertyType.Bool,
        _a$1);
    // var _areCookiesAvailable: boolean | undefined;
    /**
     * Checks if document object is available
     */
    Boolean(getDocument());
    /**
     * Checks if window object is available
     */
    var isWindowObjectAvailable = Boolean(getWindow());
    /**
     * Checks if value is assigned to the given param.
     * @param value - The token from which the tenant id is to be extracted.
     * @returns True/false denoting if value is assigned to the param.
     */
    function isValueAssigned(value) {
        /// <summary> takes a value and checks for undefined, null and empty string </summary>
        /// <param type="any"> value to be tested </param>
        /// <returns> true if value is null undefined or emptyString </returns>
        return !(value === "" || isNullOrUndefined(value));
    }
    /**
     * Gets the tenant id from the tenant token.
     * @param apiKey - The token from which the tenant id is to be extracted.
     * @returns The tenant id.
     */
    function getTenantId(apiKey) {
        if (apiKey) {
            var indexTenantId = apiKey.indexOf("-");
            if (indexTenantId > -1) {
                return apiKey.substring(0, indexTenantId);
            }
        }
        return "";
    }
    /**
     * Checks if the value is a valid EventLatency.
     * @param value - The value that needs to be checked.
     * @returns True if the value is in AWTEventLatency, false otherwise.
     */
    function isLatency(value) {
        if (value && isNumber(value) && value >= EventLatency.Normal && value <= EventLatency.Immediate) {
            return true;
        }
        return false;
    }
    /**
     * Sanitizes the Property. It checks the that the property name and value are valid. It also
     * checks/populates the correct type and pii of the property value.
     * @param name - property name                          - The property name.
     * @param property - The property value or an IEventProperty containing value,
     * type ,pii and customer content.
     * @returns IEventProperty containing valid name, value, pii and type or null if invalid.
     */
    function sanitizeProperty(name, property, stringifyObjects) {
        // Check that property is valid
        if ((!property && !isValueAssigned(property)) || typeof name !== "string") {
            return null;
        }
        // Perf optimization -- only need to get the type once not multiple times
        var propType = typeof property;
        // If the property isn't IEventProperty (and is either string, number, boolean or array), convert it into one.
        if (propType === "string" || propType === "number" || propType === "boolean" || isArray(property)) {
            property = { value: property };
        }
        else if (propType === "object" && !property.hasOwnProperty("value")) {
            property = { value: stringifyObjects ? JSON.stringify(property) : property };
        }
        else if (isNullOrUndefined(property.value)
            || property.value === "" || (!isString(property.value)
            && !isNumber(property.value) && !isBoolean(property.value)
            && !isArray(property.value))) {
            // Since property is IEventProperty, we need to validate its value
            return null;
        }
        // We need to check that if the property value is an array, it is valid
        if (isArray(property.value) &&
            !isArrayValid(property.value)) {
            return null;
        }
        // If either pii or cc is set convert value to string (since only string pii/cc is allowed).
        // If the value is a complex type like an array that can't be converted to string we will drop
        // the property.
        if (!isNullOrUndefined(property.kind)) {
            if (isArray(property.value) || !isValueKind(property.kind)) {
                return null;
            }
            property.value = property.value.toString();
        }
        return property;
    }
    function getCommonSchemaMetaData(value, kind, type) {
        var encodedTypeValue = -1;
        if (!isUndefined(value)) {
            if (kind > 0) {
                if (kind === 32) {
                    // encode customer content. Value can only be string. bit 13-16 are for cc
                    encodedTypeValue = (1 << 13);
                }
                else if (kind <= 13) {
                    // encode PII. Value can only be string. bits 5-12 are for Pii
                    encodedTypeValue = (kind << 5);
                }
            }
            // isDataType checks that the "type" is a number so we don't need to check for undefined
            if (isDataType(type)) {
                // Data Type is provided and valid, so use that
                if (encodedTypeValue === -1) {
                    // Don't return -1
                    encodedTypeValue = 0;
                }
                encodedTypeValue |= type;
            }
            else {
                var propType = _fieldTypeEventPropMap[getFieldValueType(value)] || -1;
                if (encodedTypeValue !== -1 && propType !== -1) {
                    // pii exists so we must return correct type
                    encodedTypeValue |= propType;
                }
                else if (propType === EventPropertyType.Double) {
                    encodedTypeValue = propType;
                }
            }
        }
        return encodedTypeValue;
    }
    /**
     * @deprecated - Use the oneDs.getCookieMgr().get()
     * Gets the cookie value for the specified cookie.
     * if value is k1=v1&k2==v2 then will return 'v1' for key 'k1'
     * @param cookieName - Cookie name.
     */
    function getCookie(name) {
        if (areCookiesSupported(null)) {
            return getCookieValue(safeGetCookieMgr(null), name);
        }
        return "";
    }
    /**
     * Helper to get and decode the cookie value using decodeURIComponent, this is for historical
     * backward compatibility where the document.cookie value was decoded before parsing.
     * @param cookieMgr - The cookie manager to use
     * @param name - The name of the cookie to get
     * @param decode - A flag to indicate whether the cookie value should be decoded
     * @returns The decoded cookie value (if available) otherwise an empty string.
     */
    function getCookieValue(cookieMgr, name, decode) {
        if (decode === void 0) { decode = true; }
        var cookieValue;
        if (cookieMgr) {
            cookieValue = cookieMgr.get(name);
            if (decode && cookieValue && decodeURIComponent) {
                cookieValue = decodeURIComponent(cookieValue);
            }
        }
        return cookieValue || "";
    }
    /**
     * Create a new guid.
     * @param style - The style of guid to generated, defaults to Digits
     * Digits (Default) : 32 digits separated by hyphens: 00000000-0000-0000-0000-000000000000
     * Braces - 32 digits separated by hyphens, enclosed in braces: {00000000-0000-0000-0000-000000000000}
     * Parentheses - 32 digits separated by hyphens, enclosed in parentheses: (00000000-0000-0000-0000-000000000000)
     * Numeric - 32 digits: 00000000000000000000000000000000
     * @returns The formatted guid.
     */
    function createGuid(style) {
        if (style === void 0) { style = "D" /* Digits */; }
        var theGuid = newGuid();
        if (style === "B" /* Braces */) {
            theGuid = "{" + theGuid + "}";
        }
        else if (style === "P" /* Parentheses */) {
            theGuid = "(" + theGuid + ")";
        }
        else if (style === "N" /* Numeric */) {
            theGuid = theGuid.replace(/-/g, "");
        }
        return theGuid;
    }
    /**
     * Pass in the objects to merge as arguments.
     * @param obj1 - object to merge.  Set this argument to 'true' for a deep extend.
     * @param obj2 - object to merge.
     * @param obj3 - object to merge.
     * @param obj4 - object to merge.
     * @param obj5 - object to merge.
     * @returns The extended object.
     */
    function extend(obj, obj2, obj3, obj4, obj5) {
        // Variables
        var extended = {};
        var deep = false;
        var i = 0;
        var length = arguments.length;
        var objProto = Object[strShimPrototype];
        var theArgs = arguments;
        // Check if a deep merge
        if (objProto.toString.call(theArgs[0]) === "[object Boolean]") {
            deep = theArgs[0];
            i++;
        }
        // Loop through each object and conduct a merge
        for (; i < length; i++) {
            var obj = theArgs[i];
            objForEachKey(obj, function (prop, value) {
                // If deep merge and property is an object, merge properties
                if (deep && value && isObject(value)) {
                    if (isArray(value)) {
                        extended[prop] = extended[prop] || [];
                        arrForEach(value, function (arrayValue, arrayIndex) {
                            if (arrayValue && isObject(arrayValue)) {
                                extended[prop][arrayIndex] = extend(true, extended[prop][arrayIndex], arrayValue);
                            }
                            else {
                                extended[prop][arrayIndex] = arrayValue;
                            }
                        });
                    }
                    else {
                        extended[prop] = extend(true, extended[prop], value);
                    }
                }
                else {
                    extended[prop] = value;
                }
            });
        }
        return extended;
    }
    var getTime = perfNow;
    function isValueKind(value) {
        // Always assume that it's a number (no type checking) for performance as this is used during the JSON serialization
        if (value === ValueKind.NotSet || ((value > ValueKind.NotSet && value <= ValueKind.Pii_IPV4AddressLegacy) || value === ValueKind.CustomerContent_GenericContent)) {
            return true;
        }
        return false;
    }
    function isDataType(value) {
        // Remark: 0 returns false, but it doesn't affect encoding anyways
        // Always assume that it's a number (no type checking) for performance as this is used during the JSON serialization
        if (value >= 0 && value <= 9) {
            return true;
        }
        return false;
    }
    function isArrayValid(value) {
        return value.length > 0;
    }
    function setProcessTelemetryTimings(event, identifier) {
        var evt = event;
        evt.timings = evt.timings || {};
        evt.timings.processTelemetryStart = evt.timings.processTelemetryStart || {};
        evt.timings.processTelemetryStart[identifier] = getTime();
    }
    /**
     * Returns a bitwise value for the FieldValueSanitizerType enum representing the decoded type of the passed value
     * @param value The value to determine the type
     */
    function getFieldValueType(value) {
        var theType = 0 /* NotSet */;
        if (value !== null && value !== undefined) {
            var objType = typeof value;
            if (objType === "string") {
                theType = 1 /* String */;
            }
            else if (objType === "number") {
                theType = 2 /* Number */;
            }
            else if (objType === "boolean") {
                theType = 3 /* Boolean */;
            }
            else if (objType === strShimObject) {
                theType = 4 /* Object */;
                if (isArray(value)) {
                    theType = 4096 /* Array */;
                    if (value.length > 0) {
                        // Empty arrays are not supported and are considered to be the same as null
                        theType |= getFieldValueType(value[0]);
                    }
                }
                else if (hasOwnProperty(value, "value")) {
                    // Looks like an IEventProperty
                    theType = 8192 /* EventProperty */ | getFieldValueType(value.value);
                }
            }
        }
        return theType;
    }
    /**
     * Helper to identify whether we are running in a chromium based browser environment
     */
    function isChromium() {
        return !!getGlobalInst("chrome");
    }
    /**
     * Create and open an XMLHttpRequest object
     * @param method - The request method
     * @param urlString - The url
     * @param withCredentials - Option flag indicating that credentials should be sent
     * @param disabled - Optional flag indicating that the XHR object should be marked as disabled and not tracked (default is false)
     * @param isSync - Optional flag indicating if the instance should be a synchronous request (defaults to false)
     * @param timeout - Optional value identifying the timeout value that should be assigned to the XHR request
     * @returns A new opened XHR request
     */
    function openXhr(method, urlString, withCredentials, disabled, isSync, timeout) {
        if (disabled === void 0) { disabled = false; }
        if (isSync === void 0) { isSync = false; }
        function _wrapSetXhrProp(xhr, prop, value) {
            try {
                xhr[prop] = value;
            }
            catch (e) {
                // - Wrapping as depending on the environment setting the property may fail (non-terminally)
            }
        }
        var xhr = new XMLHttpRequest();
        if (disabled) {
            // Tag the instance so it's not tracked (trackDependency)
            // If the environment has locked down the XMLHttpRequest (preventExtensions and/or freeze), this would
            // cause the request to fail and we no telemetry would be sent
            _wrapSetXhrProp(xhr, strDisabledPropertyName, disabled);
        }
        if (withCredentials) {
            // Some libraries require that the withCredentials flag is set "before" open and
            // - Wrapping as IE 10 has started throwing when setting before open
            _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
        }
        xhr.open(method, urlString, !isSync);
        if (withCredentials) {
            // withCredentials should be set AFTER open (https://xhr.spec.whatwg.org/#the-withcredentials-attribute)
            // And older firefox instances from 11+ will throw for sync events (current versions don't) which happens during unload processing
            _wrapSetXhrProp(xhr, strWithCredentials, withCredentials);
        }
        // Only set the timeout for asynchronous requests as
        // "Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception.""
        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout
        if (!isSync && timeout) {
            _wrapSetXhrProp(xhr, strTimeout, timeout);
        }
        return xhr;
    }

    /*
     * 1DS JS SDK Core, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var PropVersion = "version";
    var properties = "properties";
    var AppInsightsCore = /** @class */ (function (_super) {
        __extendsFn(AppInsightsCore, _super);
        function AppInsightsCore() {
            var _this = _super.call(this) || this;
            _this.pluginVersionStringArr = [];
            _this.pluginVersionString = "";
            dynamicProto(AppInsightsCore, _this, function (_self, _base) {
                if (!_self.logger || !_self.logger.queue) {
                    // The AI Base can inject a No-Op logger so if not defined or the No-Op, change to use a default logger so initialization errors
                    // are not dropped on the floor if one is not already defined
                    _self.logger = new DiagnosticLogger({ loggingLevelConsole: LoggingSeverity.CRITICAL });
                }
                _self.initialize = function (config, extensions, logger, notificationManager) {
                    doPerf(_self, function () { return "AppInsightsCore.initialize"; }, function () {
                        // Add default collector url
                        if (config) {
                            if (!config.endpointUrl) {
                                config.endpointUrl = "https://browser.events.data.microsoft.com/OneCollector/1.0/";
                            }
                            var propertyStorageOverride = config.propertyStorageOverride;
                            // Validate property storage override
                            if (propertyStorageOverride && (!propertyStorageOverride.getProperty || !propertyStorageOverride.setProperty)) {
                                throw new Error("Invalid property storage override passed.");
                            }
                            if (config.channels) {
                                arrForEach(config.channels, function (channels) {
                                    if (channels) {
                                        arrForEach(channels, function (channel) {
                                            if (channel.identifier && channel.version) {
                                                var ver = channel.identifier + "=" + channel.version;
                                                _self.pluginVersionStringArr.push(ver);
                                            }
                                        });
                                    }
                                });
                            }
                        }
                        _self.getWParam = function () {
                            return typeof document !== "undefined" ? 0 : -1;
                        };
                        if (extensions) {
                            arrForEach(extensions, function (ext) {
                                if (ext && ext.identifier && ext.version) {
                                    var ver = ext.identifier + "=" + ext.version;
                                    _self.pluginVersionStringArr.push(ver);
                                }
                            });
                        }
                        _self.pluginVersionString = _self.pluginVersionStringArr.join(";");
                        try {
                            _base.initialize(config, extensions, logger, notificationManager);
                            _self.pollInternalLogs("InternalLog");
                        }
                        catch (e) {
                            var logger_1 = _self.logger;
                            var message = dumpObj(e);
                            if (message.indexOf("channels") !== -1) {
                                // Add some additional context to the underlying reported error
                                message += "\r\n - Channels must be provided through config.channels only!";
                            }
                            logger_1.throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.FailedToInitializeSDK, "SDK Initialization Failed - no telemetry will be sent: " + message);
                        }
                    }, function () { return ({ config: config, extensions: extensions, logger: logger, notificationManager: notificationManager }); });
                };
                _self.track = function (item) {
                    doPerf(_self, function () { return "AppInsightsCore.track"; }, function () {
                        var telemetryItem = item;
                        if (telemetryItem) {
                            telemetryItem.timings = telemetryItem.timings || {};
                            telemetryItem.timings.trackStart = getTime();
                            if (!isLatency(telemetryItem.latency)) {
                                telemetryItem.latency = EventLatency.Normal;
                            }
                            var itemExt = telemetryItem.ext = telemetryItem.ext || {};
                            itemExt.sdk = itemExt.sdk || {};
                            itemExt.sdk.ver = FullVersionString;
                            var baseData = telemetryItem.baseData = telemetryItem.baseData || {};
                            if (!baseData[properties]) {
                                baseData[properties] = {};
                            }
                            var itemProperties = baseData[properties];
                            if (!itemProperties[PropVersion]) {
                                itemProperties[PropVersion] = "";
                            }
                            if (_self.pluginVersionString !== "") {
                                itemProperties[PropVersion] = _self.pluginVersionString;
                            }
                        }
                        _base.track(telemetryItem);
                    }, function () { return ({ item: item }); }, !(item.sync));
                };
            });
            return _this;
        }
    // Removed Stub for AppInsightsCore.prototype.initialize.
    // Removed Stub for AppInsightsCore.prototype.track.
        return AppInsightsCore;
    }(AppInsightsCore$2));
    var AppInsightsCore$1 = AppInsightsCore;

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var defaultFlightIdNameSpaces = [
        "AX",
        "EX",
        "SF",
        "CS",
        "CF",
        "CT",
        "CU",
        "DC",
        "DF",
        "H5",
        "HL",
        "WS",
        "WP" // WINDOWSPHONE
    ];
    /// <summary>Validate each flight id in appExpId against the app flight ID
    /// format and create a comma seperated appExpId with valid flight ids.Ignore invalid flight IDs< /summary>
    /// <param type='Object'>A list of comma seperated appExpId</param>
    /// <returns type='void'>none</returns>
    function _validateAppExpId(appExpIdNew, flightIdNameSpaces) {
        if (flightIdNameSpaces === void 0) { flightIdNameSpaces = defaultFlightIdNameSpaces; }
        var appExpId = null;
        if (appExpIdNew) {
            var expIdArray = appExpIdNew.split(",");
            for (var i = 0; i < expIdArray.length; i++) {
                if (_isValidAppFlightId(expIdArray[i], flightIdNameSpaces)) {
                    if (!appExpId) {
                        appExpId = expIdArray[i];
                    }
                    else {
                        appExpId += "," + expIdArray[i];
                    }
                }
            }
        }
        return appExpId;
    }
    /// <summary>Verify an expId against the CS2.1 spec</summary>
    /// <param type='Object'>expId to verify in string format</param>
    /// <returns type='true'>true if expId is valid, false otherwise</returns>
    function _isValidAppFlightId(appFlightId, flightIdNameSpaces) {
        if (flightIdNameSpaces === void 0) { flightIdNameSpaces = defaultFlightIdNameSpaces; }
        if (!appFlightId || appFlightId.length < 4) {
            return false;
        }
        var isValid = false;
        var MAXFLIGHTIDLENGTH = 256;
        var curNameSpace = (appFlightId.substring(0, 3)).toString().toUpperCase();
        // The prefix check must include ':', else strings starting with prefixes will slip through
        for (var i = 0; i < flightIdNameSpaces.length; i++) {
            if (flightIdNameSpaces[i] + ":" === curNameSpace && appFlightId.length <= MAXFLIGHTIDLENGTH) {
                isValid = true;
                break;
            }
        }
        return isValid;
    }
    var Application = /** @class */ (function () {
        function Application(propertiesConfig, core) {
            this.core = core;
            this.appExpId = null;
            // Create a copy of the defaultNamespaces
            this.flightIdNameSpaces = defaultFlightIdNameSpaces.slice(0);
            this.expIdCookieName = "Treatments";
            this._cookieMgr = safeGetCookieMgr(core);
            this._propertiesConfig = propertiesConfig;
            var doc = getDocument();
            // Add app language
            if (doc) {
                var documentElement = doc.documentElement;
                if (doc) {
                    this.locale = documentElement.lang;
                }
            }
            this.env = propertiesConfig.env ? propertiesConfig.env : this._getMetaDataFromDOM("awa-")["env"];
        }
        /**
        * The application experiment Id.
        */
        Application.prototype.getExpId = function () {
            return this._propertiesConfig.expId ? this._readExpIdFromCoreData(this._propertiesConfig.expId) : this._readExpIdFromCookie();
        };
        /**
        * Retrieve a specified metadata tag value from the DOM.
        * @param prefix - Prefix to search the metatags with.
        * @returns Metadata collection/property bag
        */
        Application.prototype._getMetaDataFromDOM = function (prefix) {
            var metaElements;
            var metaData = {};
            var doc = getDocument();
            if (doc) {
                metaElements = doc && doc.querySelectorAll("meta");
                for (var i = 0; i < metaElements.length; i++) {
                    var meta = metaElements[i];
                    if (meta.name) {
                        var mt = meta.name.toLowerCase();
                        if (mt.indexOf(prefix) === 0) {
                            var name = meta.name.replace(prefix, "");
                            metaData[name] = meta.content;
                        }
                    }
                }
            }
            return metaData;
        };
        /// <summary>Validate each flight id in appExpId against the app flight ID
        /// format and create a comma seperated appExpId with valid flight ids.Ignore invalid flight IDs< /summary>
        /// <param type='Object'>A list of comma seperated appExpId</param>
        /// <returns type='void'>none</returns>
        Application.prototype._setAppExpId = function (appExpIdNew) {
            if (appExpIdNew === this.appExpId) {
                return; // Nothing to do if seen before
            }
            // Reset to empty first. The new but invalid appExpId should not be logged and we cannot leave the old one hanging around
            // since it means old experiment id cannot represent the new experiment with an invalid appExpId.
            this.appExpId = _validateAppExpId(appExpIdNew, this.flightIdNameSpaces);
        };
        /// <summary>Get experiment ids based on flight ID string format.</summary>
        /// <returns type='true'>Comma seperated experiment ids</returns>
        Application.prototype._getAppExpId = function () {
            return this.appExpId;
        };
        Application.prototype._readExpIdFromCookie = function () {
            var cookieValue = getCookieValue(this._cookieMgr, this.expIdCookieName);
            this._setAppExpId(cookieValue);
            return this._getAppExpId();
        };
        Application.prototype._readExpIdFromCoreData = function (expId) {
            this._setAppExpId(expId);
            return this._getAppExpId();
        };
        /// <summary>Validate each flight id in appExpId against the app flight ID
        /// format and create a comma seperated appExpId with valid flight ids.Ignore invalid flight IDs< /summary>
        /// <param type='Object'>A list of comma seperated appExpId</param>
        /// <returns type='void'>none</returns>
        /**
         * Validate each flight id in appExpId against the app flight ID format and create
         * a comma seperated appExpId with valid flight ids.Ignore invalid flight IDs
         * @param appExpId - The current experiment id
         * @param appExpIdNew - The new experiment id to set (if valid)
         * @param flightIdNameSpaces - The valid set of flight id names
         * @returns The validated experiment id,
         */
        Application.validateAppExpId = _validateAppExpId;
        /**
         * Static constructor, attempt to create accessors
         */
        Application._staticInit = (function () {
            // Dynamically create get/set property accessors
            objDefineAccessors(Application.prototype, "expId", Application.prototype.getExpId);
        })();
        return Application;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * Cloud.ts
    * @author Hector Hernandez (hectorh)
    * @copyright Microsoft 2020
    */
    var Cloud = /** @class */ (function () {
        function Cloud() {
        }
        return Cloud;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var User = /** @class */ (function () {
        function User(coreConfig, propertiesConfig, core) {
            this.core = core;
            this._propertiesConfig = propertiesConfig;
            var cookieMgr = this._cookieMgr = safeGetCookieMgr(core, coreConfig);
            // Add MUID in user localId
            if (cookieMgr && cookieMgr.isEnabled()) {
                // Only add default local ID is hash or drop config are not enabled
                if (!this._propertiesConfig.hashIdentifiers && !this._propertiesConfig.dropIdentifiers) {
                    var muidValue = getCookieValue(cookieMgr, "MUID");
                    if (muidValue) {
                        this.setLocalId("t:" + muidValue);
                    }
                }
                if (this._propertiesConfig.enableApplicationInsightsUser) {
                    // get userId or create new one if none exists
                    var aiUser = getCookieValue(cookieMgr, User.userCookieName);
                    if (aiUser) {
                        var params = aiUser.split(User.cookieSeparator);
                        if (params.length > 0) {
                            this.id = params[0];
                        }
                    }
                    if (!this.id) {
                        this.id = newId((coreConfig && !isUndefined(coreConfig.idLength)) ? coreConfig.idLength : 22);
                        var date = new Date();
                        var acqStr = toISOString(date);
                        this.accountAcquisitionDate = acqStr;
                        // without expiration, cookies expire at the end of the session
                        // set it to 365 days from now
                        // 365 * 24 * 60 * 60 * 1000 = 31536000
                        var newCookie = [this.id, acqStr];
                        var cookieDomain = this._propertiesConfig.cookieDomain ? this._propertiesConfig.cookieDomain : undefined;
                        cookieMgr.set(User.userCookieName, newCookie.join(User.cookieSeparator), 31536000, cookieDomain);
                    }
                }
            }
            // Add user language
            if (typeof navigator !== "undefined") {
                var nav = navigator;
                this.locale = nav.userLanguage || nav.language;
            }
        }
        /**
         * The userId as known by the logging library.
         */
        User.prototype.getLocalId = function () {
            if (this._customLocalId) {
                return this._customLocalId;
            }
            // Only add default local ID is hash or drop config are not enabled
            if (!this._propertiesConfig.hashIdentifiers && !this._propertiesConfig.dropIdentifiers) {
                var muidValue = getCookieValue(this._cookieMgr, "MUID");
                if (muidValue) {
                    this.setLocalId("t:" + muidValue);
                }
            }
            return undefined;
        };
        User.prototype.setLocalId = function (value) {
            this._customLocalId = value;
        };
        User.cookieSeparator = "|";
        User.userCookieName = "ai_user";
        /**
         * Static constructor, attempt to create accessors
         */
        User._staticInit = (function () {
            // Dynamically create get/set property accessors
            objDefineAccessors(User.prototype, "localId", User.prototype.getLocalId, User.prototype.setLocalId);
        })();
        return User;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var REGEX_VERSION$1 = "([\\d,.]+)";
    var UNKNOWN$1 = "Unknown";
    var EDGE_CHROMIUM = "Edg/";
    var USER_AGENTS = [
        { ua: "OPR/", b: "Opera" /* OPERA */ },
        { ua: "PhantomJS" /* PHANTOMJS */, b: "PhantomJS" /* PHANTOMJS */ },
        { ua: "Edge" /* EDGE */, b: "Edge" /* EDGE */ },
        { ua: EDGE_CHROMIUM, b: "Edge" /* EDGE */ },
        { ua: "Electron" /* ELECTRON */, b: "Electron" /* ELECTRON */ },
        { ua: "Chrome" /* CHROME */, b: "Chrome" /* CHROME */ },
        { ua: "Trident", b: "MSIE" /* MSIE */ },
        { ua: "MSIE ", b: "MSIE" /* MSIE */ },
        { ua: "Firefox" /* FIREFOX */, b: "Firefox" /* FIREFOX */ },
        { ua: "Safari" /* SAFARI */, b: "Safari" /* SAFARI */ },
        { ua: "SkypeShell" /* SKYPE_SHELL */, b: "SkypeShell" /* SKYPE_SHELL */ } // Check for Skype shell
    ];
    var BRANDS = [
        { br: "Microsoft Edge", b: "Edge" /* EDGE */ },
        { br: "Google Chrome", b: "Chrome" /* CHROME */ },
        { br: "Opera", b: "Opera" /* OPERA */ }
    ];
    function _userAgentContainsString(searchString, userAgent) {
        return userAgent.indexOf(searchString) > -1;
    }
    function _getBrandVersion(match, brands) {
        for (var lp = 0; lp < brands.length; lp++) {
            if (match == brands[lp].brand) {
                return brands[lp].version;
            }
        }
        return null;
    }
    function _getBrowserName(userAgent) {
        if (userAgent) {
            for (var lp = 0; lp < USER_AGENTS.length; lp++) {
                var ua = USER_AGENTS[lp].ua;
                if (_userAgentContainsString(ua, userAgent)) {
                    return USER_AGENTS[lp].b;
                }
            }
        }
        return UNKNOWN$1;
    }
    function _getBrowserVersion(userAgent, browserName) {
        if (browserName === "MSIE" /* MSIE */) {
            return _getIeVersion(userAgent);
        }
        return _getOtherVersion(browserName, userAgent);
    }
    function _getIeVersion(userAgent) {
        var classicIeVersionMatches = userAgent.match(new RegExp("MSIE" /* MSIE */ + " " + REGEX_VERSION$1));
        if (classicIeVersionMatches) {
            return classicIeVersionMatches[1];
        }
        var ieVersionMatches = userAgent.match(new RegExp("rv:" + REGEX_VERSION$1));
        if (ieVersionMatches) {
            return ieVersionMatches[1];
        }
    }
    function _getOtherVersion(browserString, userAgent) {
        if (browserString === "Safari" /* SAFARI */) {
            browserString = "Version";
        }
        else if (browserString === "Edge" /* EDGE */) {
            if (_userAgentContainsString(EDGE_CHROMIUM, userAgent)) {
                browserString = "Edg";
            }
        }
        var matches = userAgent.match(new RegExp(browserString + "/" + REGEX_VERSION$1));
        if (matches) {
            return matches[1];
        }
        if (browserString === "Opera" /* OPERA */) {
            matches = userAgent.match(new RegExp("OPR/" + REGEX_VERSION$1));
            if (matches) {
                return matches[1];
            }
        }
        return UNKNOWN$1;
    }
    /**
    * Get Screen resolution
    * @returns {ScreenResolution} - Screen resolution
    */
    function _getScreenResolution() {
        var screenRes = { h: 0, w: 0 };
        var win = getWindow();
        if (win && win.screen) {
            screenRes.h = screen.height;
            screenRes.w = screen.width;
        }
        return screenRes;
    }
    var Web = /** @class */ (function () {
        function Web(propertiesConfig, core) {
            var _cookieMgr = safeGetCookieMgr(core);
            var _propertiesConfig = propertiesConfig || {};
            dynamicProto(Web, this, function (_self) {
                // Add the domain
                var windowLocation = getLocation();
                if (windowLocation) {
                    var domain = windowLocation.hostname;
                    if (domain) {
                        _self.domain = windowLocation.protocol === "file:" ? "local" : domain;
                    }
                }
                if (_propertiesConfig.populateBrowserInfo) {
                    var userAgent = _propertiesConfig.userAgent;
                    var userAgentBrands = (_propertiesConfig.userAgentData || {}).brands;
                    var theNav = getNavigator();
                    if (theNav) {
                        userAgent = userAgent || theNav.userAgent || "";
                        userAgentBrands = userAgentBrands || (theNav.userAgentData || {}).brands;
                    }
                    _parseUserAgent(userAgent, userAgentBrands);
                    var screenRes = _getScreenResolution();
                    _self.screenRes = screenRes.w + "X" + screenRes.h;
                }
                _self.getUserConsent = function () {
                    return _propertiesConfig.userConsented || (getCookieValue(_cookieMgr, _propertiesConfig.userConsentCookieName || "MSCC") ? true : false);
                };
                /**
                *
                ** Function to retrieve user consent details.
                * @param callback - Callback function to get user consent details
                * @returns IUserContentDetails stringified object
                */
                _self.getUserConsentDetails = function () {
                    try {
                        var callback = _propertiesConfig.callback;
                        if (callback && callback.userConsentDetails) {
                            var result = callback.userConsentDetails();
                            if (result) {
                                return JSON.stringify({
                                    Required: result.Required || false,
                                    Analytics: result.Analytics || false,
                                    SocialMedia: result.SocialMedia || false,
                                    Advertising: result.Advertising || false
                                });
                            }
                        }
                    }
                    catch (e) {
                        // Unexpected - Just making sure we don't crash
                    }
                    return null;
                };
                function _parseUserAgent(userAgent, userAgentBrands) {
                    if (isArray(userAgentBrands)) {
                        try {
                            // Go through the ordered list of "known" brands and use the first matching value
                            for (var lp = 0; lp < BRANDS.length; lp++) {
                                var version = _getBrandVersion(BRANDS[lp].br, userAgentBrands);
                                if (version) {
                                    _self.browser = BRANDS[lp].b;
                                    _self.browserVer = version;
                                    return;
                                }
                            }
                        }
                        catch (e) {
                            // Unexpected - Just making sure we don't crash
                        }
                    }
                    if (userAgent) {
                        var browserName = _getBrowserName(userAgent);
                        _self.browser = browserName;
                        _self.browserVer = _getBrowserVersion(userAgent, browserName);
                    }
                }
                // Remap this get userContext for this instance
                objDefineAccessors(_self, "userConsent", _self.getUserConsent);
            });
        }
    // Removed Stub for Web.prototype.getUserConsent.
    // Removed Stub for Web.prototype.getUserConsentDetails.
        /**
         * Static constructor, attempt to create accessors
         */
        Web._staticInit = (function () {
            // Dynamically create get/set property accessors
            objDefineAccessors(Web.prototype, "userConsent", Web.prototype.getUserConsent);
        })();
        return Web;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var OSNAMEREGEX = {
        WIN: /(windows|win32)/i,
        WINRT: / arm;/i,
        WINPHONE: /windows\sphone\s\d+\.\d+/i,
        OSX: /(macintosh|mac os x)/i,
        IOS: /(ipad|iphone|ipod)(?=.*like mac os x)/i,
        LINUX: /(linux|joli|[kxln]?ubuntu|debian|[open]*suse|gentoo|arch|slackware|fedora|mandriva|centos|pclinuxos|redhat|zenwalk)/i,
        ANDROID: /android/i,
        CROS: /CrOS/i
    };
    var VERSION_MAPPINGS = {
        "5.1": "XP",
        "6.0": "Vista",
        "6.1": "7",
        "6.2": "8",
        "6.3": "8.1",
        "10.0": "10"
    };
    var REGEX_VERSION = "([\\d,.]+)";
    var REGEX_VERSION_MAC = "([\\d,_,.]+)";
    var UNKNOWN = "Unknown";
    var OSNAMES = [
        { r: OSNAMEREGEX.WINPHONE, os: "Windows Phone" },
        { r: OSNAMEREGEX.WINRT, os: "Windows RT" },
        { r: OSNAMEREGEX.WIN, os: "Windows" /* WINDOWS */ },
        { r: OSNAMEREGEX.IOS, os: "iOS" /* IOS */ },
        { r: OSNAMEREGEX.ANDROID, os: "Android" /* ANDROID */ },
        { r: OSNAMEREGEX.LINUX, os: "Linux" },
        { r: OSNAMEREGEX.CROS, os: "Chrome OS" },
        { s: "x11", os: "Unix" },
        { s: "blackberry", os: "BlackBerry" },
        { s: "symbian", os: "Symbian" },
        { s: "nokia", os: "Nokia" },
        { r: OSNAMEREGEX.OSX, os: "Mac OS X" /* MACOSX */ }
    ];
    function _getOsName(lowerCaseUserAgent) {
        for (var lp = 0; lp < OSNAMES.length; lp++) {
            var match = OSNAMES[lp];
            if (match.r && lowerCaseUserAgent.match(match.r)) {
                return match.os;
            }
            else if (match.s && lowerCaseUserAgent.indexOf(match.s) !== -1) {
                return match.os;
            }
        }
        return UNKNOWN;
    }
    function _getOsVersion(userAgent, osName) {
        if (osName === "Windows" /* WINDOWS */) {
            return _getGenericOsVersion(userAgent, "Windows NT");
        }
        if (osName === "Android" /* ANDROID */) {
            return _getGenericOsVersion(userAgent, osName);
        }
        if (osName === "Mac OS X" /* MACOSX */) {
            return _getMacOsxVersion(userAgent);
        }
        if (osName === "iOS" /* IOS */) {
            return _getIosVersion(userAgent);
        }
        return UNKNOWN;
    }
    function _getGenericOsVersion(userAgent, osName) {
        var ntVersionMatches = userAgent.match(new RegExp(osName + " " + REGEX_VERSION));
        if (ntVersionMatches) {
            if (VERSION_MAPPINGS[ntVersionMatches[1]]) {
                return VERSION_MAPPINGS[ntVersionMatches[1]];
            }
            return ntVersionMatches[1];
        }
        return UNKNOWN;
    }
    function _getMacOsxVersion(userAgent) {
        var macOsxVersionInUserAgentMatches = userAgent.match(new RegExp("Mac OS X" /* MACOSX */ + " " + REGEX_VERSION_MAC));
        if (macOsxVersionInUserAgentMatches) {
            var versionString = macOsxVersionInUserAgentMatches[1].replace(/_/g, ".");
            if (versionString) {
                var delimiter = _getDelimiter(versionString);
                if (delimiter) {
                    var components = versionString.split(delimiter);
                    return components[0];
                }
                else {
                    return versionString;
                }
            }
        }
        return UNKNOWN;
    }
    function _getIosVersion(userAgent) {
        var iosVersionInUserAgentMatches = userAgent.match(new RegExp("OS " + REGEX_VERSION_MAC));
        if (iosVersionInUserAgentMatches) {
            var versionString = iosVersionInUserAgentMatches[1].replace(/_/g, ".");
            if (versionString) {
                var delimiter = _getDelimiter(versionString);
                if (delimiter) {
                    var components = versionString.split(delimiter);
                    return components[0];
                }
                else {
                    return versionString;
                }
            }
        }
        return UNKNOWN;
    }
    function _getDelimiter(versionString) {
        if (versionString.indexOf(".") > -1) {
            return ".";
        }
        if (versionString.indexOf("_") > -1) {
            return "_";
        }
        return null;
    }
    var OperatingSystem = /** @class */ (function () {
        function OperatingSystem(propertiesConfig) {
            if (propertiesConfig.populateOperatingSystemInfo) {
                var theNav = getNavigator() || {};
                var userAgent = propertiesConfig.userAgent || theNav.userAgent || "";
                var userAgentData = propertiesConfig.userAgentData || theNav.userAgentData || {};
                if (userAgent) {
                    var osName = _getOsName(userAgent.toLowerCase());
                    this.name = osName;
                    this.ver = _getOsVersion(userAgent, osName);
                }
                if ((!this.name || this.name === UNKNOWN) && isString(userAgentData.platform)) {
                    this.name = userAgentData.platform;
                }
            }
        }
        return OperatingSystem;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var IntWeb = /** @class */ (function () {
        function IntWeb(propertiesConfig, core) {
            this.core = core;
            if (propertiesConfig.serviceName) {
                this.serviceName = propertiesConfig.serviceName;
            }
            this._cookieMgr = safeGetCookieMgr(core);
        }
        /**
         * Anonymous visitor Id in hosting domain.
         */
        IntWeb.prototype.getMsfpc = function () {
            return getCookieValue(this._cookieMgr, "MSFPC");
        }; /**
         * ANON - MSA Anonymous ID.
         */
        IntWeb.prototype.getAnid = function () {
            return getCookieValue(this._cookieMgr, "ANON").slice(0, 34);
        };
        /**
         * Static constructor, attempt to create accessors
         */
        IntWeb._staticInit = (function () {
            // Dynamically create get/set property accessors
            objDefineAccessors(IntWeb.prototype, "msfpc", IntWeb.prototype.getMsfpc);
            objDefineAccessors(IntWeb.prototype, "anid", IntWeb.prototype.getAnid);
        })();
        return IntWeb;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * Utc.ts
    * @author Hector Hernandez (hectorh)
    * @copyright Microsoft 2019
    */
    var HASH_IDENTIFIERS_FLAG = 0x100000;
    var DROP_IDENTIFIERS_FLAG = 0x200000;
    var Utc = /** @class */ (function () {
        function Utc(propertiesConfig) {
            this.popSample = 100;
            this.eventFlags = 0;
            if (propertiesConfig.hashIdentifiers) {
                this.eventFlags = this.eventFlags | HASH_IDENTIFIERS_FLAG;
            }
            if (propertiesConfig.dropIdentifiers) {
                this.eventFlags = this.eventFlags | DROP_IDENTIFIERS_FLAG;
            }
        }
        return Utc;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * Loc.ts
    * @author Hector Hernandez (hectorh)
    * @copyright Microsoft 2019
    */
    var Loc = /** @class */ (function () {
        function Loc() {
            // Add time zone
            var timeZone = new Date().getTimezoneOffset();
            var minutes = timeZone % 60;
            var hours = (timeZone - minutes) / 60;
            var timeZonePrefix = "+";
            if (hours > 0) {
                timeZonePrefix = "-";
            }
            hours = Math.abs(hours);
            minutes = Math.abs(minutes);
            this.tz = timeZonePrefix + (hours < 10 ? "0" + hours : hours.toString()) + ":"
                + (minutes < 10 ? "0" + minutes : minutes.toString());
        }
        return Loc;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * Device.ts
    * @author Hector Hernandez (hectorh)
    * @copyright Microsoft 2019
    */
    var Device = /** @class */ (function () {
        function Device() {
        }
        return Device;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var Session = /** @class */ (function () {
        function Session() {
        }
        Session.prototype.setId = function (id) {
            this.customId = id;
        };
        Session.prototype.getId = function () {
            if (isString(this.customId)) {
                return this.customId;
            }
            else {
                return this.automaticId;
            }
        };
        /**
         * Static constructor, attempt to create accessors
         */
        Session._staticInit = (function () {
            // Dynamically create get/set property accessors
            objDefineAccessors(Session.prototype, "id", Session.prototype.getId, Session.prototype.setId);
        })();
        return Session;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var Trace = /** @class */ (function () {
        function Trace(propertiesConfig, id, parentId, name) {
            if (propertiesConfig.enableApplicationInsightsTrace) {
                this.traceId = id || generateW3CId();
                this.parentId = parentId;
                this.name = name;
                var loc = getLocation();
                if (loc && loc.pathname) {
                    this.name = loc.pathname;
                }
            }
        }
        return Trace;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var AppExtensionKeys = objFreeze({
        id: "id",
        ver: "ver",
        appName: "name",
        locale: "locale",
        expId: "expId",
        env: "env"
    });
    var WebExtensionKeys = objFreeze({
        domain: "domain",
        browser: "browser",
        browserVer: "browserVer",
        screenRes: "screenRes",
        userConsent: "userConsent",
        consentDetails: "consentDetails"
    });
    var UserExtensionKeys = objFreeze({
        locale: "locale",
        localId: "localId",
        id: "id"
    });
    var OSExtKeys = objFreeze({
        osName: "name",
        ver: "ver"
    });
    var SDKExtKeys = objFreeze({
        ver: "ver",
        seq: "seq",
        installId: "installId",
        epoch: "epoch"
    });
    var IntWebExtKeys = objFreeze({
        msfpc: "msfpc",
        anid: "anid",
        serviceName: "serviceName"
    });
    var UtcExtKeys = objFreeze({
        popSample: "popSample",
        eventFlags: "eventFlags"
    });
    var LocExtKeys = objFreeze({
        tz: "tz"
    });
    var SessionExtKeys = objFreeze({
        sessionId: "sesId"
    });
    var DeviceExtKeys = objFreeze({
        localId: "localId",
        deviceClass: "deviceClass",
        make: "make",
        model: "model"
    });
    var CloudExtKeys = objFreeze({
        role: "role",
        roleInstance: "roleInstance",
        roleVer: "roleVer"
    });
    var TraceExtKeys = objFreeze({
        traceId: "traceID",
        traceName: "name",
        parentId: "parentID"
    });

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var Extensions = objFreeze({
        UserExt: "user",
        DeviceExt: "device",
        TraceExt: "trace",
        WebExt: "web",
        AppExt: "app",
        OSExt: "os",
        SdkExt: "sdk",
        IntWebExt: "intweb",
        UtcExt: "utc",
        LocExt: "loc",
        CloudExt: "cloud"
    });

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var DEVICE_ID_COOKIE = "MicrosoftApplicationsTelemetryDeviceId";
    function _saveData(mgr, propertyStorage, name, value) {
        if (propertyStorage) {
            propertyStorage.setProperty(name, value);
        }
        else {
            // Expires in 365 days (365 * 24 * 60 * 60)
            mgr.set(name, value, 31536000);
        }
    }
    function _getData(mgr, propertyStorage, name) {
        if (propertyStorage) {
            return propertyStorage.getProperty(name) || "";
        }
        return getCookieValue(mgr, name);
    }
    var Sdk = /** @class */ (function () {
        function Sdk(coreConfig, core) {
            this._sequenceId = 0;
            var propertyStorage = coreConfig.propertyStorageOverride;
            // Start sequence
            this.seq = this._sequenceId;
            this.epoch = random32(false).toString();
            var mgr = safeGetCookieMgr(core, coreConfig);
            if (mgr.isEnabled() || propertyStorage) {
                // Only collect device id if it can be stored
                var deviceId = _getData(mgr, propertyStorage, DEVICE_ID_COOKIE);
                if (!deviceId) {
                    deviceId = newGuid();
                }
                _saveData(mgr, propertyStorage, DEVICE_ID_COOKIE, deviceId);
                this.installId = deviceId;
            }
            else {
                mgr.purge(DEVICE_ID_COOKIE);
            }
        }
        // Get seq value
        Sdk.prototype.getSequenceId = function () {
            return ++this._sequenceId;
        };
        return Sdk;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var _canUseLocalStorage;
    /**
    * Type of storage to differentiate between local storage and session storage
    */
    var StorageType;
    (function (StorageType) {
        StorageType[StorageType["LocalStorage"] = 0] = "LocalStorage";
        StorageType[StorageType["SessionStorage"] = 1] = "SessionStorage";
    })(StorageType || (StorageType = {}));
    /**
         *  Check if the browser supports local storage.
         *
         *  @returns {boolean} True if local storage is supported.
         */
    function canUseLocalStorage() {
        if (_canUseLocalStorage === undefined) {
            _canUseLocalStorage = !!_getVerifiedStorageObject(StorageType.LocalStorage);
        }
        return _canUseLocalStorage;
    }
    /**
    * Gets the localStorage object if available
    * @returns Returns the storage object if available else returns null
    */
    function _getLocalStorageObject() {
        if (canUseLocalStorage()) {
            return _getVerifiedStorageObject(StorageType.LocalStorage);
        }
        return null;
    }
    /**
         * Tests storage object (localStorage or sessionStorage) to verify that it is usable
         * More details here: https://mathiasbynens.be/notes/localstorage-pattern
         * @param storageType - Type of storage
         * @returns Returns storage object verified that it is usable
         */
    function _getVerifiedStorageObject(storageType) {
        var storage = null;
        var fail;
        var uid;
        try {
            var global_1 = getGlobal();
            if (!global_1) {
                return null;
            }
            uid = new Date();
            storage = storageType === StorageType.LocalStorage ? global_1.localStorage : global_1.sessionStorage;
            if (storage && isFunction(storage.setItem)) {
                storage.setItem(uid, uid);
                fail = storage.getItem(uid) !== uid;
                storage.removeItem(uid);
                if (fail) {
                    storage = null;
                }
            }
        }
        catch (exception) {
            storage = null;
        }
        return storage;
    }
    /**
         *  Set the contents of an object in the browser's local storage
         *
         *  @param name - the name of the object to set in storage
         *  @param data - the contents of the object to set in storage
         *  @returns True if the storage object could be written.
         */
    function setStorage(logger, name, data) {
        var storage = _getLocalStorageObject();
        if (storage !== null) {
            try {
                storage.setItem(name, data);
                return true;
            }
            catch (e) {
                _canUseLocalStorage = false;
                logger.throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.BrowserCannotWriteLocalStorage, "Browser failed write to local storage. " + e);
            }
        }
        return false;
    }
    /**
         *  Get an object from the browser's local storage
         *
         *  @param name - the name of the object to get from storage
         *  @returns The contents of the storage object with the given name. Null if storage is not supported.
         */
    function getStorage(logger, name) {
        var storage = _getLocalStorageObject();
        if (storage !== null) {
            try {
                return storage.getItem(name);
            }
            catch (e) {
                _canUseLocalStorage = false;
                logger.throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.BrowserCannotReadLocalStorage, "Browser failed read of local storage. " + e);
            }
        }
        return null;
    }

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var SessionManager = /** @class */ (function () {
        function SessionManager(core, propConfig) {
            var _cookieUpdatedTimestamp;
            var _logger = safeGetLogger(core);
            var cookieMgr = safeGetCookieMgr(core);
            var _storageNamePrefix;
            dynamicProto(SessionManager, this, function (_self) {
                var functionalConfig = getDefaultConfig(propConfig);
                if (!isFunction(propConfig.sessionExpirationMs)) {
                    functionalConfig.sessionExpirationMs = function () { return SessionManager.acquisitionSpan; };
                }
                if (!isFunction(propConfig.sessionRenewalMs)) {
                    functionalConfig.sessionRenewalMs = function () { return SessionManager.renewalSpan; };
                }
                _self.config = functionalConfig;
                _storageNamePrefix = function () { return _self.config.namePrefix && _self.config.namePrefix() ? SessionManager.cookieNameConst + _self.config.namePrefix() : SessionManager.cookieNameConst; };
                _self.automaticSession = new Session();
                _self.update = function () {
                    if (!_self.automaticSession.getId()) {
                        _initializeAutomaticSession();
                    }
                    var autoSession = _self.automaticSession;
                    var config = _self.config;
                    var now = new Date().getTime();
                    var acquisitionExpired = now - autoSession.acquisitionDate > config.sessionExpirationMs();
                    var renewalExpired = now - autoSession.renewalDate > config.sessionRenewalMs();
                    // renew if acquisitionSpan or renewalSpan has ellapsed
                    if (acquisitionExpired || renewalExpired) {
                        // update automaticSession so session state has correct id
                        _renew();
                    }
                    else {
                        // do not update the cookie more often than cookieUpdateInterval
                        var cookieUpdatedTimestamp = _cookieUpdatedTimestamp;
                        if (!cookieUpdatedTimestamp || now - cookieUpdatedTimestamp > SessionManager.cookieUpdateInterval) {
                            autoSession.renewalDate = now;
                            _setCookie(autoSession.getId(), autoSession.acquisitionDate, autoSession.renewalDate);
                        }
                    }
                };
                _self.backup = function () {
                    var automaticSession = _self.automaticSession;
                    _setStorage(automaticSession.getId(), automaticSession.acquisitionDate, automaticSession.renewalDate);
                };
                /**
                 * @ignore
                 * Create functional configs if value is provided, else SessionManager provides the defaults
                 * @param config - Property configuration
                 */
                function getDefaultConfig(config) {
                    return {
                        sessionRenewalMs: config.sessionRenewalMs && (function () { return config.sessionRenewalMs; }),
                        sessionExpirationMs: config.sessionExpirationMs && (function () { return config.sessionExpirationMs; }),
                        cookieDomain: config.cookieDomain && (function () { return config.cookieDomain; }),
                        namePrefix: config.namePrefix && (function () { return config.namePrefix; }),
                        sessionAsGuid: (function () { return config.sessionAsGuid; }),
                        idLength: (function () { return config.idLength ? config.idLength : 22; })
                    };
                }
                /**
                 * @ignore
                 * Use config.namePrefix + ai_session cookie data or local storage data (when the cookie is unavailable) to
                 * initialize the automatic session.
                 */
                function _initializeAutomaticSession() {
                    var cookie = getCookie(_storageNamePrefix());
                    if (cookie && isFunction(cookie.split)) {
                        _initializeAutomaticSessionWithData(cookie);
                    }
                    else {
                        // There's no cookie, but we might have session data in local storage
                        // This can happen if the session expired or the user actively deleted the cookie
                        // We only want to recover data if the cookie is missing from expiry. We should respect the user's wishes if the cookie was deleted actively.
                        // The User class handles this for us and deletes our local storage object if the persistent user cookie was removed.
                        var storage = getStorage(_logger, _storageNamePrefix());
                        if (storage) {
                            _initializeAutomaticSessionWithData(storage);
                        }
                    }
                    if (!_self.automaticSession.getId()) {
                        _renew();
                    }
                }
                /**
                 * @ignore
                 * Extract id, aquisitionDate, and renewalDate from an ai_session payload string and
                 * use this data to initialize automaticSession.
                 *
                 * @param sessionData - The string stored in an ai_session cookie or local storage backup
                 */
                function _initializeAutomaticSessionWithData(sessionData) {
                    var automaticSession = _self.automaticSession;
                    var params = sessionData.split("|");
                    if (params.length > 0) {
                        automaticSession.setId(params[0]);
                    }
                    try {
                        if (params.length > 1) {
                            var acq = +params[1];
                            automaticSession.acquisitionDate = +new Date(acq);
                            automaticSession.acquisitionDate = automaticSession.acquisitionDate > 0 ? automaticSession.acquisitionDate : 0;
                        }
                        if (params.length > 2) {
                            var renewal = +params[2];
                            automaticSession.renewalDate = +new Date(renewal);
                            automaticSession.renewalDate = automaticSession.renewalDate > 0 ? automaticSession.renewalDate : 0;
                        }
                    }
                    catch (e) {
                        _logger.throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.ErrorParsingAISessionCookie, "Error parsing ai_session cookie, session will be reset: " + e);
                    }
                    if (automaticSession.renewalDate === 0) {
                        _logger.throwInternal(LoggingSeverity.WARNING, _ExtendedInternalMessageId.SessionRenewalDateIsZero, "AI session renewal date is 0, session will be reset.");
                    }
                }
                function _renew() {
                    var automaticSession = _self.automaticSession;
                    var now = new Date().getTime();
                    var sessionAsGuid = _self.config.sessionAsGuid();
                    if (!isUndefined(sessionAsGuid) && sessionAsGuid) {
                        if (!isBoolean(sessionAsGuid)) {
                            automaticSession.setId(createGuid(sessionAsGuid));
                        }
                        else {
                            automaticSession.setId(createGuid());
                        }
                    }
                    else {
                        automaticSession.setId(newId((functionalConfig && functionalConfig.idLength) ? functionalConfig.idLength() : 22));
                    }
                    automaticSession.acquisitionDate = now;
                    automaticSession.renewalDate = now;
                    _setCookie(automaticSession.getId(), automaticSession.acquisitionDate, automaticSession.renewalDate);
                    // If this browser does not support local storage, fire an internal log to keep track of it at this point
                    if (!canUseLocalStorage()) {
                        _logger.throwInternal(LoggingSeverity.WARNING, _ExtendedInternalMessageId.BrowserDoesNotSupportLocalStorage, "Browser does not support local storage. Session durations will be inaccurate.");
                    }
                }
                function _setCookie(guid, acq, renewal) {
                    // Set cookie to expire after the session expiry time passes or the session renewal deadline, whichever is sooner
                    // Expiring the cookie will cause the session to expire even if the user isn't on the page
                    var acquisitionExpiry = acq + _self.config.sessionExpirationMs();
                    var renewalExpiry = renewal + _self.config.sessionRenewalMs();
                    var cookieExpiry = new Date();
                    var cookie = [guid, acq, renewal];
                    if (acquisitionExpiry < renewalExpiry) {
                        cookieExpiry.setTime(acquisitionExpiry);
                    }
                    else {
                        cookieExpiry.setTime(renewalExpiry);
                    }
                    var cookieDomain = _self.config.cookieDomain ? _self.config.cookieDomain() : null;
                    cookieMgr.set(_storageNamePrefix(), cookie.join("|") + ";expires=" + cookieExpiry.toUTCString(), null, cookieDomain);
                    _cookieUpdatedTimestamp = new Date().getTime();
                }
                function _setStorage(guid, acq, renewal) {
                    // Keep data in local storage to retain the last session id, allowing us to cleanly end the session when it expires
                    // Browsers that don't support local storage won't be able to end sessions cleanly from the client
                    // The server will notice this and end the sessions itself, with loss of accurate session duration
                    setStorage(_logger, _storageNamePrefix(), [guid, acq, renewal].join("|"));
                }
            });
        }
    // Removed Stub for SessionManager.prototype.update.
    // Removed Stub for SessionManager.prototype.backup.
        SessionManager.acquisitionSpan = 86400000; // 24 hours in ms
        SessionManager.renewalSpan = 1800000; // 30 minutes in ms
        SessionManager.cookieUpdateInterval = 60000; // 1 minute in ms
        SessionManager.cookieNameConst = "ai_session";
        return SessionManager;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    // Use a local variable as the reference so it will be minified for the 25ish usages
    var _isString = isString;
    var TelemetryContext = /** @class */ (function () {
        function TelemetryContext(coreConfig, propertiesConfig, core) {
            var self = this;
            self.app = new Application(propertiesConfig, core);
            self.cloud = new Cloud();
            self.user = new User(coreConfig, propertiesConfig, core);
            self.os = new OperatingSystem(propertiesConfig);
            self.web = new Web(propertiesConfig, core);
            self.sdk = new Sdk(coreConfig, core);
            self.intWeb = new IntWeb(propertiesConfig, core);
            self.utc = new Utc(propertiesConfig);
            self.loc = new Loc();
            self.device = new Device();
            self.telemetryTrace = new Trace(propertiesConfig);
            self.sessionManager = new SessionManager(core, propertiesConfig);
            self.session = new Session();
        }
        /**
         * Returns the current session id, if one does not already exist a new one will be attempted to be created.
         * If you have set a specific custom id via session.setId(), this function will return that value.
         */
        TelemetryContext.prototype.getSessionId = function () {
            var session = this.session;
            if (session && _isString(session.customId)) {
                return session.customId;
            }
            var sessionManager = this.sessionManager;
            sessionManager.update();
            var autoSession = sessionManager.automaticSession;
            if (autoSession) {
                var autoId = autoSession.getId();
                if (autoId && _isString(autoId)) {
                    session.automaticId = autoId;
                }
            }
            return session.automaticId;
        };
        TelemetryContext.prototype.applyApplicationContext = function (event) {
            var app = this.app;
            var evtApp = event.ext[Extensions.AppExt];
            setValue(evtApp, AppExtensionKeys.id, app.id, _isString);
            setValue(evtApp, AppExtensionKeys.ver, app.ver, _isString);
            setValue(evtApp, AppExtensionKeys.appName, app.name, _isString);
            setValue(evtApp, AppExtensionKeys.locale, app.locale, _isString);
            setValue(evtApp, AppExtensionKeys.expId, app.getExpId(), _isString);
            setValue(evtApp, AppExtensionKeys.env, app.env, _isString);
        };
        TelemetryContext.prototype.applyUserContext = function (event) {
            var user = this.user;
            var evtUser = event.ext[Extensions.UserExt];
            setValue(evtUser, UserExtensionKeys.localId, user.getLocalId(), _isString);
            setValue(evtUser, UserExtensionKeys.locale, user.locale, _isString);
            setValue(evtUser, UserExtensionKeys.id, user.id, _isString);
        };
        TelemetryContext.prototype.applyWebContext = function (event) {
            var web = this.web;
            var evtWeb = event.ext[Extensions.WebExt];
            setValue(evtWeb, WebExtensionKeys.domain, web.domain, _isString);
            setValue(evtWeb, WebExtensionKeys.browser, web.browser, _isString);
            setValue(evtWeb, WebExtensionKeys.browserVer, web.browserVer, _isString);
            setValue(evtWeb, WebExtensionKeys.screenRes, web.screenRes, _isString);
            evtWeb[WebExtensionKeys.userConsent] = web.getUserConsent();
            evtWeb[WebExtensionKeys.consentDetails] = web.getUserConsentDetails();
        };
        TelemetryContext.prototype.applyOsContext = function (event) {
            var os = this.os;
            var evtOs = event.ext[Extensions.OSExt];
            setValue(evtOs, OSExtKeys.osName, os.name, _isString);
            setValue(evtOs, OSExtKeys.ver, os.ver, _isString);
        };
        TelemetryContext.prototype.applySdkContext = function (event) {
            var sdk = this.sdk;
            var evtSdk = event.ext[Extensions.SdkExt];
            evtSdk[SDKExtKeys.seq] = sdk.getSequenceId();
            evtSdk[SDKExtKeys.epoch] = sdk.epoch;
            setValue(evtSdk, SDKExtKeys.installId, sdk.installId, _isString);
        };
        TelemetryContext.prototype.applyIntWebContext = function (event) {
            var intWeb = this.intWeb;
            var evtIntWeb = event.ext[Extensions.IntWebExt];
            setValue(evtIntWeb, IntWebExtKeys.msfpc, intWeb.getMsfpc(), _isString);
            setValue(evtIntWeb, IntWebExtKeys.anid, intWeb.getAnid(), _isString);
            setValue(evtIntWeb, IntWebExtKeys.serviceName, intWeb.serviceName, _isString);
        };
        TelemetryContext.prototype.applyUtcContext = function (event) {
            var utc = this.utc;
            var evtUtc = event.ext[Extensions.UtcExt];
            evtUtc[UtcExtKeys.popSample] = utc.popSample;
            if (utc.eventFlags > 0) {
                evtUtc[UtcExtKeys.eventFlags] = utc.eventFlags;
            }
        };
        TelemetryContext.prototype.applyLocContext = function (event) {
            event.ext[Extensions.LocExt][LocExtKeys.tz] = this.loc.tz;
        };
        TelemetryContext.prototype.applySessionContext = function (event) {
            event.ext[Extensions.AppExt][SessionExtKeys.sessionId] = this.getSessionId();
        };
        TelemetryContext.prototype.applyDeviceContext = function (event) {
            var device = this.device;
            var evtDevice = event.ext[Extensions.DeviceExt];
            setValue(evtDevice, DeviceExtKeys.localId, device.localId, _isString);
            setValue(evtDevice, DeviceExtKeys.make, device.make, _isString);
            setValue(evtDevice, DeviceExtKeys.model, device.model, _isString);
            setValue(evtDevice, DeviceExtKeys.deviceClass, device.deviceClass, _isString);
        };
        TelemetryContext.prototype.applyCloudContext = function (event) {
            var cloud = this.cloud;
            var evtCloud = event.ext[Extensions.CloudExt];
            setValue(evtCloud, CloudExtKeys.role, cloud.role, _isString);
            setValue(evtCloud, CloudExtKeys.roleInstance, cloud.roleInstance, _isString);
            setValue(evtCloud, CloudExtKeys.roleVer, cloud.roleVer, _isString);
        };
        TelemetryContext.prototype.applyAITraceContext = function (event) {
            var trace = this.telemetryTrace;
            var evtTrace = event.ext[Extensions.TraceExt];
            setValue(evtTrace, TraceExtKeys.traceId, trace.traceId, _isString);
            setValue(evtTrace, TraceExtKeys.traceName, trace.name, _isString);
            setValue(evtTrace, TraceExtKeys.parentId, trace.parentId, _isString);
        };
        return TelemetryContext;
    }());

    /*
     * 1DS JS SDK Properties plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var PropertiesPlugin = /** @class */ (function (_super) {
        __extendsFn(PropertiesPlugin, _super);
        function PropertiesPlugin() {
            var _this = _super.call(this) || this;
            _this.identifier = "SystemPropertiesCollector";
            _this.priority = 3;
            _this.version = '3.1.11';
            var _context;
            var _properties = {};
            dynamicProto(PropertiesPlugin, _this, function (_self, _base) {
                _self.initialize = function (coreConfig, core, extensions) {
                    _super.prototype.initialize.call(_this, coreConfig, core, extensions);
                    _context = new TelemetryContext(coreConfig, _self._getTelCtx().getExtCfg(_self.identifier), core);
                };
                /**
                 * Process the event and add part A fields to it.
                 * @param event - The event that needs to be stored.
                 * @param itemCtx - This is the context for the current request, ITelemetryPlugin instances
                 * can optionally use this to access the current core instance or define / pass additional information
                 * to later plugins (vs appending items to the telemetry item)
                 */
                _self.processTelemetry = function (event, itemCtx) {
                    setProcessTelemetryTimings(event, _self.identifier);
                    itemCtx = _self._getTelCtx(itemCtx);
                    var evtExt = event.ext = event.ext ? event.ext : {};
                    event.data = event.data ? event.data : {};
                    evtExt[Extensions.AppExt] = evtExt[Extensions.AppExt] || {};
                    evtExt[Extensions.UserExt] = evtExt[Extensions.UserExt] || {};
                    evtExt[Extensions.WebExt] = evtExt[Extensions.WebExt] || {};
                    evtExt[Extensions.OSExt] = evtExt[Extensions.OSExt] || {};
                    evtExt[Extensions.SdkExt] = evtExt[Extensions.SdkExt] || {};
                    evtExt[Extensions.IntWebExt] = evtExt[Extensions.IntWebExt] || {};
                    evtExt[Extensions.UtcExt] = evtExt[Extensions.UtcExt] || {};
                    evtExt[Extensions.LocExt] = evtExt[Extensions.LocExt] || {};
                    evtExt[Extensions.DeviceExt] = evtExt[Extensions.DeviceExt] || {};
                    evtExt[Extensions.TraceExt] = evtExt[Extensions.TraceExt] || {};
                    evtExt[Extensions.CloudExt] = evtExt[Extensions.CloudExt] || {};
                    _context.applyApplicationContext(event);
                    _context.applyUserContext(event);
                    _context.applyWebContext(event);
                    _context.applyOsContext(event);
                    _context.applySdkContext(event);
                    _context.applyIntWebContext(event);
                    _context.applyUtcContext(event);
                    _context.applyLocContext(event);
                    _context.applySessionContext(event);
                    _context.applyDeviceContext(event);
                    _context.applyAITraceContext(event);
                    _context.applyCloudContext(event);
                    // Delete empty ext fields
                    arrForEach(objKeys(evtExt), function (key) {
                        if (objKeys(evtExt[key]).length === 0) {
                            delete evtExt[key];
                        }
                    });
                    // Add custom properties
                    _addPropertiesIfAbsent(_properties, event.data);
                    _self.processNext(event, itemCtx);
                };
                /**
                 * Get properties context to override or specify specific part A properties
                 * @returns the Context
                 */
                _self.getPropertiesContext = function () {
                    return _context;
                };
                /**
                 * Sets a custom property to be sent with every event. IEventProperty can be used to tag the property as
                 * pii or customer content.
                 * @param name - The name of the property.
                 * @param value - The context property's value.
                 */
                _self.setProperty = function (name, value) {
                    _properties[name] = value;
                };
                function _addPropertiesIfAbsent(inputMap, outputMap) {
                    if (inputMap) {
                        objForEachKey(inputMap, function (name, inputValue) {
                            if (!outputMap[name]) {
                                outputMap[name] = inputValue;
                            }
                        });
                    }
                }
            });
            return _this;
        }
    // Removed Stub for PropertiesPlugin.prototype.initialize.
    // Removed Stub for PropertiesPlugin.prototype.processTelemetry.
    // Removed Stub for PropertiesPlugin.prototype.getPropertiesContext.
    // Removed Stub for PropertiesPlugin.prototype.setProperty.
        return PropertiesPlugin;
    }(BaseTelemetryPlugin));
    var PropertiesPlugin$1 = PropertiesPlugin;

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
     * Real Time profile (default profile). RealTime Latency events are sent every 1 sec and
     * Normal Latency events are sent every 2 sec.
     */
    var RT_PROFILE = "REAL_TIME";
    /**
     * Near Real Time profile. RealTime Latency events are sent every 3 sec and
     * Normal Latency events are sent every 6 sec.
     */
    var NRT_PROFILE = "NEAR_REAL_TIME";
    /**
     * Best Effort. RealTime Latency events are sent every 9 sec and
     * Normal Latency events are sent every 18 sec.
     */
    var BE_PROFILE = "BEST_EFFORT";

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var Method = "POST";
    var DisabledPropertyName = "Microsoft_ApplicationInsights_BypassAjaxInstrumentation";
    var strDropped = "drop";
    var strSending = "send";
    var strRequeue = "requeue";
    var strResponseFail = "rspFail";
    var strOther = "oth";
    var defaultCacheControl = "no-cache, no-store";
    var defaultContentType = "application/x-json-stream";
    var strCacheControl = "cache-control";
    var strContentTypeHeader = "content-type";
    var strKillTokensHeader = "kill-tokens";
    var strKillDurationHeader = "kill-duration";
    var strKillDurationSecondsHeader = "kill-duration-seconds";
    var strTimeDeltaHeader = "time-delta-millis";
    var strClientVersion = "client-version";
    var strClientId = "client-id";
    var strTimeDeltaToApply = "time-delta-to-apply-millis";
    var strUploadTime = "upload-time";
    var strApiKey = "apikey";
    var strMsaDeviceTicket = "AuthMsaDeviceTicket";
    var strNoResponseBody = "NoResponseBody";
    var strMsfpc = "msfpc";

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    function _getEventMsfpc(theEvent) {
        var intWeb = ((theEvent.ext || {})["intweb"]);
        if (intWeb && isValueAssigned(intWeb[strMsfpc])) {
            return intWeb[strMsfpc];
        }
        return null;
    }
    function _getMsfpc(theEvents) {
        var msfpc = null;
        for (var lp = 0; msfpc === null && lp < theEvents.length; lp++) {
            msfpc = _getEventMsfpc(theEvents[lp]);
        }
        return msfpc;
    }
    /**
    * This class defines a "batch" events related to a specific iKey, it is used by the PostChannel and HttpManager
    * to collect and transfer ownership of events without duplicating them in-memory. This reduces the previous
    * array duplication and shared ownership issues that occurred due to race conditions caused by the async nature
    * of sending requests.
    */
    var EventBatch = /** @class */ (function () {
        /**
         * Private constructor so that caller is forced to use the static create method.
         * @param iKey - The iKey to associate with the events (not validated)
         * @param addEvents - The optional collection of events to assign to this batch - defaults to an empty array.
         */
        function EventBatch(iKey, addEvents) {
            var events = addEvents ? [].concat(addEvents) : [];
            var _self = this;
            var _msfpc = _getMsfpc(events);
            _self.iKey = function () {
                return iKey;
            };
            _self.Msfpc = function () {
                // return the cached value unless it's undefined -- used to avoid cpu
                return _msfpc || "";
            };
            _self.count = function () {
                return events.length;
            };
            _self.events = function () {
                return events;
            };
            _self.addEvent = function (theEvent) {
                if (theEvent) {
                    events.push(theEvent);
                    if (!_msfpc) {
                        // Not found so try and find one
                        _msfpc = _getEventMsfpc(theEvent);
                    }
                    return true;
                }
                return false;
            };
            _self.split = function (fromEvent, numEvents) {
                // Create a new batch with the same iKey
                var theEvents;
                if (fromEvent < events.length) {
                    var cnt = events.length - fromEvent;
                    if (!isNullOrUndefined(numEvents)) {
                        cnt = numEvents < cnt ? numEvents : cnt;
                    }
                    theEvents = events.splice(fromEvent, cnt);
                    // reset the fetched msfpc value
                    _msfpc = _getMsfpc(events);
                }
                return new EventBatch(iKey, theEvents);
            };
        }
        /**
         * Creates a new Event Batch object
         * @param iKey The iKey associated with this batch of events
         */
        EventBatch.create = function (iKey, theEvents) {
            return new EventBatch(iKey, theEvents);
        };
        return EventBatch;
    }());

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
     * Note: This is an optimization for V8-based browsers. When V8 concatenates a string,
     * the strings are only joined logically using a "cons string" or "constructed/concatenated
     * string". These containers keep references to one another and can result in very large
     * memory usage. For example, if a 2MB string is constructed by concatenating 4 bytes
     * together at a time, the memory usage will be ~44MB; so ~22x increase. The strings are
     * only joined together when an operation requiring their joining takes place, such as
     * substr(). This function is called when adding data to this buffer to ensure these
     * types of strings are periodically joined to reduce the memory footprint.
     * Setting to every 20 events as the JSON.stringify() may have joined many strings
     * and calling this too much causes a minor delay while processing.
     */
    var _MAX_STRING_JOINS = 20;
    var RequestSizeLimitBytes = 3984588; // approx 3.8 Mb
    var BeaconRequestSizeLimitBytes = 65000; // approx 64kb (the current Edge, Firefox and Chrome max limit)
    var MaxRecordSize = 2000000; // approx 2 Mb
    var MaxBeaconRecordSize = Math.min(MaxRecordSize, BeaconRequestSizeLimitBytes);
    var metadata = "metadata";
    var f = "f";
    var rCheckDot = /\./;
    /**
    * Class to handle serialization of event and request.
    * Currently uses Bond for serialization. Please note that this may be subject to change.
    */
    var Serializer = /** @class */ (function () {
        function Serializer(perfManager, valueSanitizer, stringifyObjects, enableCompoundKey) {
            var strData = "data";
            var strBaseData = "baseData";
            var strExt = "ext";
            var _checkForCompoundkey = !!enableCompoundKey;
            var _processSubMetaData = true;
            var _theSanitizer = valueSanitizer;
            var _isReservedCache = {};
            dynamicProto(Serializer, this, function (_self) {
                _self.createPayload = function (retryCnt, isTeardown, isSync, useSendBeacon, sendReason, sendType) {
                    return {
                        apiKeys: [],
                        payloadBlob: "",
                        overflow: null,
                        sizeExceed: [],
                        failedEvts: [],
                        batches: [],
                        numEvents: 0,
                        retryCnt: retryCnt,
                        isTeardown: isTeardown,
                        isSync: isSync,
                        isBeacon: useSendBeacon,
                        sendType: sendType,
                        sendReason: sendReason
                    };
                };
                _self.appendPayload = function (payload, theBatch, maxEventsPerBatch) {
                    var canAddEvents = payload && theBatch && !payload.overflow;
                    if (canAddEvents) {
                        doPerf(perfManager, function () { return "Serializer:appendPayload"; }, function () {
                            var theEvents = theBatch.events();
                            var payloadBlob = payload.payloadBlob;
                            var payloadEvents = payload.numEvents;
                            var eventsAdded = false;
                            var sizeExceeded = [];
                            var failedEvts = [];
                            var isBeaconPayload = payload.isBeacon;
                            var requestMaxSize = isBeaconPayload ? BeaconRequestSizeLimitBytes : RequestSizeLimitBytes;
                            var recordMaxSize = isBeaconPayload ? MaxBeaconRecordSize : MaxRecordSize;
                            var lp = 0;
                            var joinCount = 0;
                            while (lp < theEvents.length) {
                                var theEvent = theEvents[lp];
                                if (theEvent) {
                                    if (payloadEvents >= maxEventsPerBatch) {
                                        // Maximum events per payload reached, so don't add any more
                                        payload.overflow = theBatch.split(lp);
                                        break;
                                    }
                                    var eventBlob = _self.getEventBlob(theEvent);
                                    if (eventBlob && eventBlob.length <= recordMaxSize) {
                                        // This event will fit into the payload
                                        var blobLength = eventBlob.length;
                                        var currentSize = payloadBlob.length;
                                        if (currentSize + blobLength > requestMaxSize) {
                                            // Request or batch size exceeded, so don't add any more to the payload
                                            payload.overflow = theBatch.split(lp);
                                            break;
                                        }
                                        if (payloadBlob) {
                                            payloadBlob += "\r\n";
                                        }
                                        payloadBlob += eventBlob;
                                        joinCount++;
                                        // v8 memory optimization only
                                        if (joinCount > _MAX_STRING_JOINS) {
                                            // this substr() should cause the constructed string to join
                                            payloadBlob.substr(0, 1);
                                            joinCount = 0;
                                        }
                                        eventsAdded = true;
                                        payloadEvents++;
                                    }
                                    else {
                                        if (eventBlob) {
                                            // Single event size exceeded so remove from the batch
                                            sizeExceeded.push(theEvent);
                                        }
                                        else {
                                            failedEvts.push(theEvent);
                                        }
                                        // We also need to remove this event from the existing array, otherwise a notification will be sent
                                        // indicating that it was successfully sent
                                        theEvents.splice(lp, 1);
                                        lp--;
                                    }
                                }
                                lp++;
                            }
                            if (sizeExceeded && sizeExceeded.length > 0) {
                                payload.sizeExceed.push(EventBatch.create(theBatch.iKey(), sizeExceeded));
                                // Remove the exceeded events from the batch
                            }
                            if (failedEvts && failedEvts.length > 0) {
                                payload.failedEvts.push(EventBatch.create(theBatch.iKey(), failedEvts));
                                // Remove the failed events from the batch
                            }
                            if (eventsAdded) {
                                payload.batches.push(theBatch);
                                payload.payloadBlob = payloadBlob;
                                payload.numEvents = payloadEvents;
                                var apiKey = theBatch.iKey();
                                if (arrIndexOf(payload.apiKeys, apiKey) === -1) {
                                    payload.apiKeys.push(apiKey);
                                }
                            }
                        }, function () { return ({ payload: payload, theBatch: { iKey: theBatch.iKey(), evts: theBatch.events() }, max: maxEventsPerBatch }); });
                    }
                    return canAddEvents;
                };
                _self.getEventBlob = function (eventData) {
                    try {
                        return doPerf(perfManager, function () { return "Serializer.getEventBlob"; }, function () {
                            var serializedEvent = {};
                            // Adding as dynamic keys for v8 performance
                            serializedEvent.name = eventData.name;
                            serializedEvent.time = eventData.time;
                            serializedEvent.ver = eventData.ver;
                            serializedEvent.iKey = "o:" + getTenantId(eventData.iKey);
                            // Assigning local var so usage in part b/c don't throw if there is no ext
                            var serializedExt = {};
                            // Part A
                            var eventExt = eventData[strExt];
                            if (eventExt) {
                                // Only assign ext if the event had one (There are tests covering this use case)
                                serializedEvent[strExt] = serializedExt;
                                objForEachKey(eventExt, function (key, value) {
                                    var data = serializedExt[key] = {};
                                    // Don't include a metadata callback as we don't currently set metadata Part A fields
                                    _processPathKeys(value, data, "ext." + key, true, null, null, true);
                                });
                            }
                            var serializedData = serializedEvent[strData] = {};
                            serializedData.baseType = eventData.baseType;
                            var serializedBaseData = serializedData[strBaseData] = {};
                            // Part B
                            _processPathKeys(eventData.baseData, serializedBaseData, strBaseData, false, [strBaseData], function (pathKeys, name, value) {
                                _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);
                            }, _processSubMetaData);
                            // Part C
                            _processPathKeys(eventData.data, serializedData, strData, false, [], function (pathKeys, name, value) {
                                _addJSONPropertyMetaData(serializedExt, pathKeys, name, value);
                            }, _processSubMetaData);
                            return JSON.stringify(serializedEvent);
                        }, function () { return ({ item: eventData }); });
                    }
                    catch (e) {
                        return null;
                    }
                };
                function _isReservedField(path, name) {
                    var result = _isReservedCache[path];
                    if (result === undefined) {
                        if (path.length >= 7) {
                            // Do not allow the changing of fields located in the ext.metadata or ext.web extension
                            result = strStartsWith(path, "ext.metadata") || strStartsWith(path, "ext.web");
                        }
                        _isReservedCache[path] = result;
                    }
                    return result;
                }
                function _processPathKeys(srcObj, target, thePath, checkReserved, metadataPathKeys, metadataCallback, processSubKeys) {
                    objForEachKey(srcObj, function (key, srcValue) {
                        var prop = null;
                        if (srcValue || isValueAssigned(srcValue)) {
                            var path = thePath;
                            var name_1 = key;
                            var theMetaPathKeys = metadataPathKeys;
                            var destObj = target;
                            // Handle keys with embedded '.', like "TestObject.testProperty"
                            if (_checkForCompoundkey && !checkReserved && rCheckDot.test(key)) {
                                var subKeys = key.split(".");
                                var keyLen = subKeys.length;
                                if (keyLen > 1) {
                                    if (theMetaPathKeys) {
                                        // Create a copy of the meta path keys so we can add the extra ones
                                        theMetaPathKeys = theMetaPathKeys.slice();
                                    }
                                    for (var lp = 0; lp < keyLen - 1; lp++) {
                                        var subKey = subKeys[lp];
                                        // Add/reuse the sub key object
                                        destObj = destObj[subKey] = destObj[subKey] || {};
                                        path += "." + subKey;
                                        if (theMetaPathKeys) {
                                            theMetaPathKeys.push(subKey);
                                        }
                                    }
                                    name_1 = subKeys[keyLen - 1];
                                }
                            }
                            var isReserved = checkReserved && _isReservedField(path);
                            if (!isReserved && _theSanitizer && _theSanitizer.handleField(path, name_1)) {
                                prop = _theSanitizer.value(path, name_1, srcValue, stringifyObjects);
                            }
                            else {
                                prop = sanitizeProperty(name_1, srcValue, stringifyObjects);
                            }
                            if (prop) {
                                // Set the value
                                var newValue = prop.value;
                                destObj[name_1] = newValue;
                                if (metadataCallback) {
                                    metadataCallback(theMetaPathKeys, name_1, prop);
                                }
                                if (processSubKeys && typeof newValue === "object" && !isArray(newValue)) {
                                    var newPath = theMetaPathKeys;
                                    if (newPath) {
                                        newPath = newPath.slice();
                                        newPath.push(name_1);
                                    }
                                    // Make sure we process sub objects as well (for value sanitization and metadata)
                                    _processPathKeys(srcValue, newValue, path + "." + name_1, checkReserved, newPath, metadataCallback, processSubKeys);
                                }
                            }
                        }
                    });
                }
            });
        }
    // Removed Stub for Serializer.prototype.createPayload.
    // Removed Stub for Serializer.prototype.appendPayload.
    // Removed Stub for Serializer.prototype.getEventBlob.
    // Removed Stub for Serializer.prototype.handleField.
    // Removed Stub for Serializer.prototype.getSanitizer.
        return Serializer;
    }());
    /**
     * @ignore
     */
    function _addJSONPropertyMetaData(json, propKeys, name, propertyValue) {
        if (propertyValue && json) {
            var encodedTypeValue = getCommonSchemaMetaData(propertyValue.value, propertyValue.kind, propertyValue.propertyType);
            if (encodedTypeValue > -1) {
                // Add the root metadata
                var metaData = json[metadata];
                if (!metaData) {
                    // Sets the root 'f'
                    metaData = json[metadata] = { f: {} };
                }
                var metaTarget = metaData[f];
                if (!metaTarget) {
                    // This can occur if someone has manually added an ext.metadata object
                    // Such as ext.metadata.privLevel and ext.metadata.privTags
                    metaTarget = metaData[f] = {};
                }
                // Traverse the metadata path and build each object (contains an 'f' key) -- if required
                if (propKeys) {
                    for (var lp = 0; lp < propKeys.length; lp++) {
                        var key = propKeys[lp];
                        if (!metaTarget[key]) {
                            metaTarget[key] = { f: {} };
                        }
                        var newTarget = metaTarget[key][f];
                        if (!newTarget) {
                            // Not expected, but can occur if the metadata context was pre-created as part of the event
                            newTarget = metaTarget[key][f] = {};
                        }
                        metaTarget = newTarget;
                    }
                }
                metaTarget = metaTarget[name] = {};
                if (isArray(propertyValue.value)) {
                    metaTarget["a"] = {
                        t: encodedTypeValue
                    };
                }
                else {
                    metaTarget["t"] = encodedTypeValue;
                }
            }
        }
    }

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * RetryPolicy.ts
    * @author Abhilash Panwar (abpanwar)
    * @copyright Microsoft 2018
    */
    var RandomizationLowerThreshold = 0.8;
    var RandomizationUpperThreshold = 1.2;
    var BaseBackoff = 3000;
    var MaxBackoff = 600000;
    /**
    * Class for retry policy.
    */
    var RetryPolicy = /** @class */ (function () {
        function RetryPolicy() {
        }
        /**
         * Determine if the request should be retried for the given status code.
         * The below expression reads that we should only retry for:
         *      - HttpStatusCodes that are smaller than 300.
         *      - HttpStatusCodes greater or equal to 500 (except for 501-NotImplement
         *        and 505-HttpVersionNotSupport).
         *      - HttpStatusCode 408-RequestTimeout.
         *      - HttpStatusCode 429.
         * This is based on Microsoft.WindowsAzure.Storage.RetryPolicies.ExponentialRetry class
         * @param httpStatusCode - The status code returned for the request.
         * @returns True if request should be retried, false otherwise.
         */
        RetryPolicy.shouldRetryForStatus = function (httpStatusCode) {
            /* tslint:disable:triple-equals */
            // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value
            return !((httpStatusCode >= 300 && httpStatusCode < 500 && httpStatusCode != 408 && httpStatusCode != 429)
                || (httpStatusCode == 501)
                || (httpStatusCode == 505));
            /* tslint:enable:triple-equals */
        };
        /**
         * Gets the number of milliseconds to back off before retrying the request. The
         * back off duration is exponentially scaled based on the number of retries already
         * done for the request.
         * @param retriesSoFar - The number of times the request has already been retried.
         * @returns The back off duration for the request before it can be retried.
         */
        RetryPolicy.getMillisToBackoffForRetry = function (retriesSoFar) {
            var waitDuration = 0;
            var minBackoff = BaseBackoff * RandomizationLowerThreshold;
            var maxBackoff = BaseBackoff * RandomizationUpperThreshold;
            var randomBackoff = Math.floor(Math.random() * (maxBackoff - minBackoff)) + minBackoff;
            waitDuration = Math.pow(2, retriesSoFar) * randomBackoff;
            return Math.min(waitDuration, MaxBackoff);
        };
        return RetryPolicy;
    }());
    var RetryPolicy$1 = RetryPolicy;

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var SecToMsMultiplier = 1000;
    /**
    * Class to stop certain tenants sending events.
    */
    var KillSwitch = /** @class */ (function () {
        function KillSwitch() {
            var _killedTokenDictionary = {};
            function _normalizeTenants(values) {
                var result = [];
                if (values) {
                    arrForEach(values, function (value) {
                        result.push(strTrim(value));
                    });
                }
                return result;
            }
            dynamicProto(KillSwitch, this, function (_self) {
                _self.setKillSwitchTenants = function (killTokens, killDuration) {
                    if (killTokens && killDuration) {
                        try {
                            var killedTokens = _normalizeTenants(killTokens.split(","));
                            if (killDuration === "this-request-only") {
                                return killedTokens;
                            }
                            var durationMs = parseInt(killDuration, 10) * SecToMsMultiplier;
                            for (var i = 0; i < killedTokens.length; ++i) {
                                _killedTokenDictionary[killedTokens[i]] = dateNow() + durationMs;
                            }
                        }
                        catch (ex) {
                            return [];
                        }
                    }
                    return [];
                };
                _self.isTenantKilled = function (tenantToken) {
                    var killDictionary = _killedTokenDictionary;
                    var name = strTrim(tenantToken);
                    if (killDictionary[name] !== undefined && killDictionary[name] > dateNow()) {
                        return true;
                    }
                    delete killDictionary[name];
                    return false;
                };
            });
        }
    // Removed Stub for KillSwitch.prototype.setKillSwitchTenants.
    // Removed Stub for KillSwitch.prototype.isTenantKilled.
        return KillSwitch;
    }());
    var EVTKillSwitch = KillSwitch;

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    /**
    * Class to manage clock skew correction.
    */
    var ClockSkewManager = /** @class */ (function () {
        function ClockSkewManager() {
            var _allowRequestSending = true;
            var _shouldAddClockSkewHeaders = true;
            var _isFirstRequest = true;
            var _clockSkewHeaderValue = "use-collector-delta";
            var _clockSkewSet = false;
            dynamicProto(ClockSkewManager, this, function (_self) {
                /**
                 * Determine if requests can be sent.
                 * @returns True if requests can be sent, false otherwise.
                 */
                _self.allowRequestSending = function () {
                    return _allowRequestSending;
                };
                /**
                 * Tells the ClockSkewManager that it should assume that the first request has now been sent,
                 * If this method had not yet been called AND the clock Skew had not been set this will set
                 * allowRequestSending to false until setClockSet() is called.
                 */
                _self.firstRequestSent = function () {
                    if (_isFirstRequest) {
                        _isFirstRequest = false;
                        if (!_clockSkewSet) {
                            // Block sending until we get the first clock Skew
                            _allowRequestSending = false;
                        }
                    }
                };
                /**
                 * Determine if clock skew headers should be added to the request.
                 * @returns True if clock skew headers should be added, false otherwise.
                 */
                _self.shouldAddClockSkewHeaders = function () {
                    return _shouldAddClockSkewHeaders;
                };
                /**
                 * Gets the clock skew header value.
                 * @returns The clock skew header value.
                 */
                _self.getClockSkewHeaderValue = function () {
                    return _clockSkewHeaderValue;
                };
                /**
                 * Sets the clock skew header value. Once clock skew is set this method
                 * is no-op.
                 * @param timeDeltaInMillis - Time delta to be saved as the clock skew header value.
                 */
                _self.setClockSkew = function (timeDeltaInMillis) {
                    if (!_clockSkewSet) {
                        if (timeDeltaInMillis) {
                            _clockSkewHeaderValue = timeDeltaInMillis;
                            _shouldAddClockSkewHeaders = true;
                            _clockSkewSet = true;
                        }
                        else {
                            _shouldAddClockSkewHeaders = false;
                        }
                        // Unblock sending
                        _allowRequestSending = true;
                    }
                };
            });
        }
    // Removed Stub for ClockSkewManager.prototype.allowRequestSending.
    // Removed Stub for ClockSkewManager.prototype.firstRequestSent.
    // Removed Stub for ClockSkewManager.prototype.shouldAddClockSkewHeaders.
    // Removed Stub for ClockSkewManager.prototype.getClockSkewHeaderValue.
    // Removed Stub for ClockSkewManager.prototype.setClockSkew.
        return ClockSkewManager;
    }());
    var EVTClockSkewManager = ClockSkewManager;

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var _a;
    var strSendAttempt = "sendAttempt";
    var _noResponseQs = "&" + strNoResponseBody + "=true";
    /**
     * Identifies the default notification reason to the action names
     */
    var _eventActionMap = (_a = {},
        _a[1 /* Paused */] = strRequeue,
        _a[100 /* RequeueEvents */] = strRequeue,
        _a[200 /* Complete */] = "sent",
        _a[8004 /* KillSwitch */] = strDropped,
        _a[8003 /* SizeLimitExceeded */] = strDropped,
        _a);
    var _collectorQsHeaders = {};
    function _addCollectorHeaderQsMapping(qsName, headerName) {
        _collectorQsHeaders[qsName] = headerName;
    }
    _addCollectorHeaderQsMapping(strMsaDeviceTicket, strMsaDeviceTicket);
    function _getResponseText(xhr) {
        try {
            return xhr.responseText;
        }
        catch (e) {
            // Best effort, as XHR may throw while XDR wont so just ignore
        }
        return "";
    }
    function _hasHeader(headers, header) {
        var hasHeader = false;
        if (headers && header) {
            var keys = objKeys(headers);
            if (keys && keys.length > 0) {
                var lowerHeader = header.toLowerCase();
                for (var lp = 0; lp < keys.length; lp++) {
                    var value = keys[lp];
                    if (value && hasOwnProperty(header, value) &&
                        value.toLowerCase() === lowerHeader) {
                        hasHeader = true;
                        break;
                    }
                }
            }
        }
        return hasHeader;
    }
    function _addRequestDetails(details, name, value, useHeaders) {
        if (name && value && value.length > 0) {
            if (useHeaders && _collectorQsHeaders[name]) {
                details.hdrs[_collectorQsHeaders[name]] = value;
                details.useHdrs = true;
            }
            else {
                details.url += "&" + name + "=" + value;
            }
        }
    }
    /**
     * Class managing the sending of requests.
     */
    var HttpManager = /** @class */ (function () {
        /**
         * @constructor
         * @param requestQueue   - The queue that contains the requests to be sent.
         */
        function HttpManager(maxEventsPerBatch, maxConnections, maxRequestRetriesBeforeBackoff, actions) {
            this._responseHandlers = [];
            var _urlString = "?cors=true&" + strContentTypeHeader.toLowerCase() + "=" + defaultContentType;
            var _killSwitch = new EVTKillSwitch();
            var _paused = false;
            var _clockSkewManager = new EVTClockSkewManager();
            var _useBeacons = false;
            var _outstandingRequests = 0; // Holds the number of outstanding async requests that have not returned a response yet
            var _postManager;
            var _sendInterfaces;
            var _core;
            var _customHttpInterface = true;
            var _queryStringParameters = [];
            var _headers = {};
            var _batchQueue = [];
            var _serializer = null;
            var _enableEventTimings = false;
            var _cookieMgr;
            var _isUnloading = false;
            var _useHeaders = false;
            var _xhrTimeout;
            var _disableXhrSync;
            dynamicProto(HttpManager, this, function (_self) {
                var _sendCredentials = true;
                _self.initialize = function (endpointUrl, core, postChannel, httpInterface, channelConfig) {
                    var _a;
                    if (!channelConfig) {
                        channelConfig = {};
                    }
                    _urlString = endpointUrl + _urlString;
                    // Task 12886642: Defaulting to 'false' until the Collector handles sending upload-time header in the OPTIONS call
                    _useHeaders = !isUndefined(channelConfig.avoidOptions) ? !channelConfig.avoidOptions : false;
                    _core = core;
                    _cookieMgr = core.getCookieMgr();
                    _enableEventTimings = !_core.config.disableEventTimings;
                    var enableCompoundKey = !!_core.config.enableCompoundKey;
                    _postManager = postChannel;
                    var valueSanitizer = channelConfig.valueSanitizer;
                    var stringifyObjects = channelConfig.stringifyObjects;
                    if (!isUndefined(channelConfig.enableCompoundKey)) {
                        enableCompoundKey = !!channelConfig.enableCompoundKey;
                    }
                    _xhrTimeout = channelConfig.xhrTimeout;
                    _disableXhrSync = channelConfig.disableXhrSync;
                    _useBeacons = !isReactNative(); // Only use beacons if not running in React Native
                    _serializer = new Serializer(_core, valueSanitizer, stringifyObjects, enableCompoundKey);
                    var syncHttpInterface = httpInterface;
                    var beaconHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;
                    var fetchSyncHttpInterface = channelConfig.alwaysUseXhrOverride ? httpInterface : null;
                    if (!httpInterface) {
                        _customHttpInterface = false;
                        var location_1 = getLocation();
                        if (location_1 && location_1.protocol && location_1.protocol.toLowerCase() === "file:") {
                            // Special case where a local html file fails with a CORS error on Chromium browsers
                            _sendCredentials = false;
                        }
                        var theTransports = [];
                        if (isReactNative()) {
                            // Use Fetch or XDR/XHR
                            theTransports = [2 /* Fetch */, 1 /* Xhr */];
                        }
                        else {
                            // Use XDR/XHR, Fetch or beacons
                            theTransports = [1 /* Xhr */, 2 /* Fetch */, 3 /* Beacon */];
                        }
                        // Prefix any user requested transport(s) values
                        var configTransports = channelConfig.transports;
                        if (configTransports) {
                            if (isNumber(configTransports)) {
                                theTransports = [configTransports].concat(theTransports);
                            }
                            else if (isArray(configTransports)) {
                                theTransports = configTransports.concat(theTransports);
                            }
                        }
                        httpInterface = _getSenderInterface(theTransports, false);
                        syncHttpInterface = _getSenderInterface(theTransports, true);
                        if (!httpInterface) {
                            _postManager.diagLog().warnToConsole("No available transport to send events");
                        }
                    }
                    _sendInterfaces = (_a = {},
                        _a[0 /* Batched */] = httpInterface,
                        _a[1 /* Synchronous */] = syncHttpInterface || _getSenderInterface([1 /* Xhr */, 2 /* Fetch */, 3 /* Beacon */], true),
                        _a[2 /* SendBeacon */] = beaconHttpInterface || _getSenderInterface([3 /* Beacon */, 2 /* Fetch */], true) || syncHttpInterface || _getSenderInterface([1 /* Xhr */], true),
                        _a[3 /* SyncFetch */] = fetchSyncHttpInterface || _getSenderInterface([2 /* Fetch */, 3 /* Beacon */], true) || syncHttpInterface || _getSenderInterface([1 /* Xhr */], true),
                        _a);
                };
                // Special internal method to allow the DebugPlugin to hook embedded objects
                function _getSenderInterface(transports, syncSupport) {
                    var transportType = 0 /* NotSet */;
                    var sendPostFunc = null;
                    var lp = 0;
                    while (sendPostFunc == null && lp < transports.length) {
                        transportType = transports[lp];
                        if (transportType === 1 /* Xhr */) {
                            if (useXDomainRequest()) {
                                sendPostFunc = _xdrSendPost;
                            }
                            else if (isXhrSupported()) {
                                sendPostFunc = _xhrSendPost;
                            }
                        }
                        else if (transportType === 2 /* Fetch */ && isFetchSupported(syncSupport)) {
                            sendPostFunc = _fetchSendPost;
                        }
                        else if (_useBeacons && transportType === 3 /* Beacon */ && isBeaconsSupported()) {
                            sendPostFunc = _beaconSendPost;
                        }
                        lp++;
                    }
                    if (sendPostFunc) {
                        return {
                            _transport: transportType,
                            _isSync: syncSupport,
                            sendPOST: sendPostFunc
                        };
                    }
                    return null;
                }
                _self["_getDbgPlgTargets"] = function () {
                    return [_sendInterfaces[0 /* Batched */], _killSwitch, _serializer, _sendInterfaces];
                };
                function _xdrSendPost(payload, oncomplete, sync) {
                    // It doesn't support custom headers, so no action is taken with current requestHeaders
                    var xdr = new XDomainRequest();
                    xdr.open(Method, payload.urlString);
                    if (payload.timeout) {
                        xdr.timeout = payload.timeout;
                    }
                    // can't get the status code in xdr.
                    xdr.onload = function () {
                        // we will assume onload means the request succeeded.
                        var response = _getResponseText(xdr);
                        _doOnComplete(oncomplete, 200, {}, response);
                        _handleCollectorResponse(response);
                    };
                    // we will assume onerror means we need to drop the events.
                    xdr.onerror = function () {
                        _doOnComplete(oncomplete, 400, {});
                    };
                    // we will assume ontimeout means we need to retry the events.
                    xdr.ontimeout = function () {
                        _doOnComplete(oncomplete, 500, {});
                    };
                    // https://cypressnorth.com/web-programming-and-development/internet-explorer-aborting-ajax-requests-fixed/
                    // tslint:disable-next-line:no-empty
                    xdr.onprogress = function () { };
                    if (sync) {
                        xdr.send(payload.data);
                    }
                    else {
                        _postManager._setTimeoutOverride(function () {
                            xdr.send(payload.data);
                        }, 0);
                    }
                }
                function _fetchSendPost(payload, oncomplete, sync) {
                    var _a;
                    var theUrl = payload.urlString;
                    var ignoreResponse = false;
                    var responseHandled = false;
                    var requestInit = (_a = {
                            body: payload.data,
                            method: Method
                        },
                        _a[DisabledPropertyName] = true,
                        _a);
                    if (sync) {
                        requestInit.keepalive = true;
                        if (payload._sendReason === 2 /* Unload */) {
                            // As a sync request (during unload), it is unlikely that we will get a chance to process the response so
                            // just like beacon send assume that the events have been accepted and processed
                            ignoreResponse = true;
                            theUrl += _noResponseQs;
                        }
                    }
                    if (_sendCredentials) {
                        // Don't send credentials when URL is file://
                        requestInit.credentials = "include";
                    }
                    // Only add headers if there are headers to add, due to issue with some polyfills
                    if (payload.headers && objKeys(payload.headers).length > 0) {
                        requestInit.headers = payload.headers;
                    }
                    fetch(theUrl, requestInit).then(function (response) {
                        var headerMap = {};
                        var responseText = "";
                        if (response.headers) {
                            response.headers.forEach(function (value, name) {
                                headerMap[name] = value;
                            });
                        }
                        if (response.body) {
                            response.text().then(function (text) {
                                responseText = text;
                            });
                        }
                        if (!responseHandled) {
                            responseHandled = true;
                            _doOnComplete(oncomplete, response.status, headerMap, responseText);
                            _handleCollectorResponse(responseText);
                        }
                    })["catch"](function (error) {
                        // In case there is an error in the request. Set the status to 0
                        // so that the events can be retried later.
                        if (!responseHandled) {
                            responseHandled = true;
                            _doOnComplete(oncomplete, 0, {});
                        }
                    });
                    if (ignoreResponse && !responseHandled) {
                        // Assume success during unload processing
                        responseHandled = true;
                        _doOnComplete(oncomplete, 200, {});
                    }
                    if (!responseHandled && payload.timeout > 0) {
                        // Simulate timeout
                        _postManager._setTimeoutOverride(function () {
                            if (!responseHandled) {
                                // Assume a 500 response (which will cause a retry)
                                responseHandled = true;
                                _doOnComplete(oncomplete, 500, {});
                            }
                        }, payload.timeout);
                    }
                }
                function _xhrSendPost(payload, oncomplete, sync) {
                    var theUrl = payload.urlString;
                    function _appendHeader(theHeaders, xhr, name) {
                        if (!theHeaders[name] && xhr && xhr.getResponseHeader) {
                            var value = xhr.getResponseHeader(name);
                            if (value) {
                                theHeaders[name] = strTrim(value);
                            }
                        }
                        return theHeaders;
                    }
                    function _getAllResponseHeaders(xhr) {
                        var theHeaders = {};
                        if (!xhr.getAllResponseHeaders) {
                            // Firefox 2-63 doesn't have getAllResponseHeaders function but it does have getResponseHeader
                            // Only call these if getAllResponseHeaders doesn't exist, otherwise we can get invalid response errors
                            // as collector is not currently returning the correct header to allow JS to access these headers
                            theHeaders = _appendHeader(theHeaders, xhr, strTimeDeltaHeader);
                            theHeaders = _appendHeader(theHeaders, xhr, strKillDurationHeader);
                            theHeaders = _appendHeader(theHeaders, xhr, strKillDurationSecondsHeader);
                        }
                        else {
                            theHeaders = _convertAllHeadersToMap(xhr.getAllResponseHeaders());
                        }
                        return theHeaders;
                    }
                    function xhrComplete(xhr, responseTxt) {
                        _doOnComplete(oncomplete, xhr.status, _getAllResponseHeaders(xhr), responseTxt);
                    }
                    if (sync && payload.disableXhrSync) {
                        sync = false;
                    }
                    var xhrRequest = openXhr(Method, theUrl, _sendCredentials, true, sync, payload.timeout);
                    // Set custom headers (e.g. gzip) here (after open())
                    objForEachKey(payload.headers, function (name, value) {
                        xhrRequest.setRequestHeader(name, value);
                    });
                    xhrRequest.onload = function () {
                        var response = _getResponseText(xhrRequest);
                        xhrComplete(xhrRequest, response);
                        _handleCollectorResponse(response);
                    };
                    xhrRequest.onerror = function () {
                        xhrComplete(xhrRequest);
                    };
                    xhrRequest.ontimeout = function () {
                        xhrComplete(xhrRequest);
                    };
                    xhrRequest.send(payload.data);
                }
                function _doOnComplete(oncomplete, status, headers, response) {
                    try {
                        oncomplete(status, headers, response);
                    }
                    catch (e) {
                        _postManager.diagLog().throwInternal(LoggingSeverity.WARNING, _ExtendedInternalMessageId.SendPostOnCompleteFailure, dumpObj(e));
                    }
                }
                function _beaconSendPost(payload, oncomplete, sync) {
                    // Custom headers not supported in sendBeacon payload.headers would be ignored
                    var internalPayloadData = payload;
                    var status = 200;
                    var thePayload = internalPayloadData._thePayload;
                    var theUrl = payload.urlString + _noResponseQs;
                    try {
                        var nav_1 = getNavigator();
                        if (!nav_1.sendBeacon(theUrl, payload.data)) {
                            if (thePayload) {
                                // Failed to send entire payload so try and split data and try to send as much events as possible
                                var droppedBatches_1 = [];
                                arrForEach(thePayload.batches, function (theBatch) {
                                    if (droppedBatches_1 && theBatch && theBatch.count() > 0) {
                                        var theEvents = theBatch.events();
                                        for (var lp = 0; lp < theEvents.length; lp++) {
                                            if (!nav_1.sendBeacon(theUrl, _serializer.getEventBlob(theEvents[lp]))) {
                                                // Can't send anymore, so split the batch and drop the rest
                                                droppedBatches_1.push(theBatch.split(lp));
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        // Remove all of the events from the existing batch in the payload as the copy includes the original
                                        droppedBatches_1.push(theBatch.split(0));
                                    }
                                });
                                _sendBatchesNotification(droppedBatches_1, 8003 /* SizeLimitExceeded */, thePayload.sendType, true);
                            }
                            else {
                                status = 0;
                            }
                        }
                    }
                    catch (ex) {
                        _postManager.diagLog().warnToConsole("Failed to send telemetry using sendBeacon API. Ex:" + ex);
                        status = 0;
                    }
                    finally {
                        _doOnComplete(oncomplete, status, {}, "");
                    }
                }
                function _isBeaconPayload(sendType) {
                    // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit, so treat both as a beacon send
                    return sendType === 2 /* SendBeacon */ || sendType === 3 /* SyncFetch */;
                }
                function _adjustSendType(sendType) {
                    if (_isUnloading && _isBeaconPayload(sendType)) {
                        sendType = 2 /* SendBeacon */;
                    }
                    return sendType;
                }
                _self.addQueryStringParameter = function (name, value) {
                    for (var i = 0; i < _queryStringParameters.length; i++) {
                        if (_queryStringParameters[i].name === name) {
                            _queryStringParameters[i].value = value;
                            return;
                        }
                    }
                    _queryStringParameters.push({ name: name, value: value });
                };
                _self.addHeader = function (name, value) {
                    _headers[name] = value;
                };
                _self.canSendRequest = function () {
                    return _hasIdleConnection() && _clockSkewManager.allowRequestSending();
                };
                _self.sendQueuedRequests = function (sendType, sendReason) {
                    if (isUndefined(sendType)) {
                        sendType = 0 /* Batched */;
                    }
                    if (_isUnloading) {
                        sendType = _adjustSendType(sendType);
                        sendReason = 2 /* Unload */;
                    }
                    if (_canSendPayload(_batchQueue, sendType, 0)) {
                        _sendBatches(_clearQueue(), 0, false, sendType, sendReason || 0 /* Undefined */);
                    }
                };
                _self.isCompletelyIdle = function () {
                    return !_paused && _outstandingRequests === 0 && _batchQueue.length === 0;
                };
                _self.setUnloading = function (value) {
                    _isUnloading = value;
                };
                _self.addBatch = function (theBatch) {
                    if (theBatch && theBatch.count() > 0) {
                        // Try and kill the event faster
                        if (_killSwitch.isTenantKilled(theBatch.iKey())) {
                            return false;
                        }
                        _batchQueue.push(theBatch);
                    }
                    return true;
                };
                /**
                 * Queue all the remaining requests to be sent. The requests will be
                 * sent using HTML5 Beacons if they are available.
                 */
                _self.teardown = function () {
                    if (_batchQueue.length > 0) {
                        _sendBatches(_clearQueue(), 0, true, 2 /* SendBeacon */, 2 /* Unload */);
                    }
                };
                /**
                 * Pause the sending of requests. No new requests will be sent.
                 */
                _self.pause = function () {
                    _paused = true;
                };
                /**
                 * Resume the sending of requests.
                 */
                _self.resume = function () {
                    _paused = false;
                    _self.sendQueuedRequests(0 /* Batched */, 4 /* Resumed */);
                };
                /**
                 * Sends a request synchronously to the Aria collector. This api is used to send
                 * a request containing a single immediate event.
                 *
                 * @param batch - The request to be sent.
                 * @param sendReason   - The token used to send the request.
                 */
                _self.sendSynchronousBatch = function (batch, sendType, sendReason) {
                    // This will not take into account the max connections restriction. Since this is sync, we can
                    // only send one of this request at a time and thus should not worry about multiple connections
                    // being used to send synchronous events.
                    // Increment active connection since we are still going to use a connection to send the request.
                    if (batch && batch.count() > 0) {
                        if (isNullOrUndefined(sendType)) {
                            sendType = 1 /* Synchronous */;
                        }
                        if (_isUnloading) {
                            sendType = _adjustSendType(sendType);
                            sendReason = 2 /* Unload */;
                        }
                        // For sync requests we will not wait for the clock skew.
                        _sendBatches([batch], 0, false, sendType, sendReason || 0 /* Undefined */);
                    }
                };
                function _hasIdleConnection() {
                    return !_paused && _outstandingRequests < maxConnections;
                }
                function _clearQueue() {
                    var theQueue = _batchQueue;
                    _batchQueue = [];
                    return theQueue;
                }
                function _canSendPayload(theBatches, sendType, retryCnt) {
                    var result = false;
                    if (theBatches && theBatches.length > 0 && !_paused && _sendInterfaces[sendType] && _serializer) {
                        // Always attempt to send synchronous events don't wait for idle or clockSkew
                        // and don't block retry requests if clockSkew is not yet set
                        result = (sendType !== 0 /* Batched */) || (_hasIdleConnection() && (retryCnt > 0 || _clockSkewManager.allowRequestSending()));
                    }
                    return result;
                }
                function _createDebugBatches(theBatches) {
                    var values = {};
                    if (theBatches) {
                        arrForEach(theBatches, function (theBatch, idx) {
                            values[idx] = {
                                iKey: theBatch.iKey(),
                                evts: theBatch.events()
                            };
                        });
                    }
                    return values;
                }
                function _sendBatches(theBatches, retryCount, isTeardown, sendType, sendReason) {
                    if (!theBatches || theBatches.length === 0) {
                        // Nothing to do
                        return;
                    }
                    if (_paused) {
                        _sendBatchesNotification(theBatches, 1 /* Paused */, sendType);
                        return;
                    }
                    // Make sure that if we are unloading the sendType is a supported version
                    sendType = _adjustSendType(sendType);
                    try {
                        var orgBatches_1 = theBatches;
                        var isSynchronous_1 = sendType !== 0 /* Batched */;
                        doPerf(_core, function () { return "HttpManager:_sendBatches"; }, function (perfEvt) {
                            if (perfEvt) {
                                // Perf Monitoring is enabled, so create a "Quick" copy of the original batches so we still report
                                // the original values as part of the perfEvent. This is because theBatches uses .shift() to remove each
                                // batch as they are processed - removing from the original array, so by the time the _createDebugBatches()
                                // function is called the passed in value has changed and therefore the reported value for the perfEvent is incorrect
                                theBatches = theBatches.slice(0);
                            }
                            var droppedBatches = [];
                            var thePayload = null;
                            var serializationStart = getTime();
                            var sendInterface = _sendInterfaces[sendType] || (isSynchronous_1 ? _sendInterfaces[1 /* Synchronous */] : _sendInterfaces[0 /* Batched */]);
                            // Sync Fetch has the same payload limitation as sendBeacon -- 64kb limit
                            var isBeaconTransport = (_isUnloading || _isBeaconPayload(sendType) || (sendInterface && sendInterface._transport === 3 /* Beacon */)) && _canUseSendBeaconApi();
                            while (_canSendPayload(theBatches, sendType, retryCount)) {
                                var theBatch = theBatches.shift();
                                if (theBatch && theBatch.count() > 0) {
                                    if (!_killSwitch.isTenantKilled(theBatch.iKey())) {
                                        // Make sure we have a payload object
                                        thePayload = thePayload || _serializer.createPayload(retryCount, isTeardown, isSynchronous_1, isBeaconTransport, sendReason, sendType);
                                        // Add the batch to the current payload
                                        if (!_serializer.appendPayload(thePayload, theBatch, maxEventsPerBatch)) {
                                            // Entire batch was not added so send the payload and retry adding this batch
                                            _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                                            serializationStart = getTime();
                                            theBatches = [theBatch].concat(theBatches);
                                            thePayload = null;
                                        }
                                        else if (thePayload.overflow !== null) {
                                            // Total Payload size was exceeded so send the payload and add the unsent as the next batch to send
                                            theBatches = [thePayload.overflow].concat(theBatches);
                                            thePayload.overflow = null;
                                            _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                                            serializationStart = getTime();
                                            thePayload = null;
                                        }
                                    }
                                    else {
                                        droppedBatches.push(theBatch);
                                    }
                                }
                            }
                            // Make sure to flush any remaining payload
                            if (thePayload) {
                                _doPayloadSend(thePayload, serializationStart, getTime(), sendReason);
                            }
                            if (theBatches.length > 0) {
                                // Add any unsent batches back to the head of the queue
                                _batchQueue = theBatches.concat(_batchQueue);
                            }
                            // Now send notification about any dropped events
                            _sendBatchesNotification(droppedBatches, 8004 /* KillSwitch */, sendType);
                        }, function () { return ({ batches: _createDebugBatches(orgBatches_1), retryCount: retryCount, isTeardown: isTeardown, isSynchronous: isSynchronous_1, sendReason: sendReason, useSendBeacon: _isBeaconPayload(sendType), sendType: sendType }); }, !isSynchronous_1);
                    }
                    catch (ex) {
                        _postManager.diagLog().throwInternal(LoggingSeverity.WARNING, _ExtendedInternalMessageId.CannotSerializeObject, "Unexpected Exception sending batch: " + dumpObj(ex));
                    }
                }
                function _buildRequestDetails(thePayload, useHeaders) {
                    var requestDetails = {
                        url: _urlString,
                        hdrs: {},
                        useHdrs: false // Assume no headers
                    };
                    // ----------------------------------------------------------------------------------------------------------------
                    // Task 12886642: Need to wait until an updated version of the collector is released to return these as allowed in the OPTIONS call
                    // ----------------------------------------------------------------------------------------------------------------
                    // if (!useHeaders) {
                    //     // Attempt to map headers to a query string if possible
                    //     objForEachKey(_headers, (name, value) => {
                    //         if (_collectorHeaderToQs[name]) {
                    //             _addRequestDetails(requestDetails, _collectorHeaderToQs[name], value, false);
                    //         } else {
                    //             // No mapping, so just include in the headers anyway (may not get sent if using sendBeacon())
                    //             requestDetails.hdrs[name] = value;
                    //             requestDetails.useHdrs = true;
                    //         }
                    //     });
                    // } else {
                    // Copy the pre-defined headers into the payload headers
                    requestDetails.hdrs = extend(requestDetails.hdrs, _headers);
                    requestDetails.useHdrs = (objKeys(requestDetails.hdrs).length > 0);
                    // }
                    // ----------------------------------------------------------------------------------------------------------------
                    _addRequestDetails(requestDetails, strClientId, "NO_AUTH", useHeaders);
                    _addRequestDetails(requestDetails, strClientVersion, FullVersionString, useHeaders);
                    var apiQsKeys = "";
                    arrForEach(thePayload.apiKeys, function (apiKey) {
                        if (apiQsKeys.length > 0) {
                            apiQsKeys += ",";
                        }
                        apiQsKeys += apiKey;
                    });
                    _addRequestDetails(requestDetails, strApiKey, apiQsKeys, useHeaders);
                    _addRequestDetails(requestDetails, strUploadTime, dateNow().toString(), useHeaders);
                    var msfpc = _getMsfpc(thePayload);
                    if (isValueAssigned(msfpc)) {
                        requestDetails.url += "&ext.intweb.msfpc=" + msfpc;
                    }
                    if (_clockSkewManager.shouldAddClockSkewHeaders()) {
                        _addRequestDetails(requestDetails, strTimeDeltaToApply, _clockSkewManager.getClockSkewHeaderValue(), useHeaders);
                    }
                    if (_core.getWParam) {
                        var wParam = _core.getWParam();
                        if (wParam >= 0) {
                            requestDetails.url += "&w=" + wParam;
                        }
                    }
                    for (var i = 0; i < _queryStringParameters.length; i++) {
                        requestDetails.url += "&" + _queryStringParameters[i].name + "=" + _queryStringParameters[i].value;
                    }
                    return requestDetails;
                }
                function _canUseSendBeaconApi() {
                    return !_customHttpInterface && _useBeacons && isBeaconsSupported();
                }
                function _setTimingValue(timings, name, value) {
                    timings[name] = timings[name] || {};
                    timings[name][_postManager.identifier] = value;
                }
                function _doPayloadSend(thePayload, serializationStart, serializationCompleted, sendReason) {
                    if (thePayload && thePayload.payloadBlob && thePayload.payloadBlob.length > 0) {
                        var useSendHook_1 = !!_self.sendHook;
                        var sendInterface_1 = _sendInterfaces[thePayload.sendType];
                        // Send all data using a beacon style transport if closing mode is on or channel was teared down
                        if (!_isBeaconPayload(thePayload.sendType) && thePayload.isBeacon && thePayload.sendReason === 2 /* Unload */) {
                            sendInterface_1 = _sendInterfaces[2 /* SendBeacon */] || _sendInterfaces[3 /* SyncFetch */] || sendInterface_1;
                        }
                        var useHeaders_1 = _useHeaders;
                        // Disable header usage if we know we are using sendBeacon as additional headers are not supported
                        if (thePayload.isBeacon || sendInterface_1._transport === 3 /* Beacon */) {
                            useHeaders_1 = false;
                        }
                        var requestDetails_1 = _buildRequestDetails(thePayload, useHeaders_1);
                        useHeaders_1 = useHeaders_1 || requestDetails_1.useHdrs;
                        var sendEventStart_1 = getTime();
                        doPerf(_core, function () { return "HttpManager:_doPayloadSend"; }, function () {
                            // Increment the send attempt count and add timings after packaging (So it's not serialized in the 1st attempt)
                            for (var batchLp = 0; batchLp < thePayload.batches.length; batchLp++) {
                                var theBatch = thePayload.batches[batchLp];
                                var theEvents = theBatch.events();
                                for (var evtLp = 0; evtLp < theEvents.length; evtLp++) {
                                    var telemetryItem = theEvents[evtLp];
                                    if (_enableEventTimings) {
                                        var timings = telemetryItem.timings = telemetryItem.timings || {};
                                        _setTimingValue(timings, "sendEventStart", sendEventStart_1);
                                        _setTimingValue(timings, "serializationStart", serializationStart);
                                        _setTimingValue(timings, "serializationCompleted", serializationCompleted);
                                    }
                                    telemetryItem[strSendAttempt] > 0 ? telemetryItem[strSendAttempt]++ : telemetryItem[strSendAttempt] = 1;
                                }
                            }
                            // Note: always sending this notification in a synchronous manner.
                            _sendBatchesNotification(thePayload.batches, (1000 /* SendingUndefined */ + (sendReason || 0 /* Undefined */)), thePayload.sendType, true);
                            // Disabling the use of const because of Issue:
                            // - Task 9227844: [1DS] Some environments and packagers automatically "freeze" objects which are defined as const which causes any mutations to throw
                            // eslint-disable-next-line prefer-const
                            var orgPayloadData = {
                                data: thePayload.payloadBlob,
                                urlString: requestDetails_1.url,
                                headers: requestDetails_1.hdrs,
                                _thePayload: thePayload,
                                _sendReason: sendReason,
                                timeout: _xhrTimeout
                            };
                            if (!isUndefined(_disableXhrSync)) {
                                orgPayloadData.disableXhrSync = !!_disableXhrSync;
                            }
                            // Only automatically add the following headers if already sending headers and we are not attempting to avoid an options call
                            if (useHeaders_1) {
                                if (!_hasHeader(orgPayloadData.headers, strCacheControl)) {
                                    orgPayloadData.headers[strCacheControl] = defaultCacheControl;
                                }
                                if (!_hasHeader(orgPayloadData.headers, strContentTypeHeader)) {
                                    orgPayloadData.headers[strContentTypeHeader] = defaultContentType;
                                }
                            }
                            var sender = null;
                            if (sendInterface_1) {
                                // Send sync requests if the request is immediate or we are tearing down telemetry.
                                sender = function (payload) {
                                    // Notify the clock skew manager that we are sending the first request (Potentially blocking all further requests)
                                    _clockSkewManager.firstRequestSent();
                                    var onComplete = function (status, headers) {
                                        _retryRequestIfNeeded(status, headers, thePayload, sendReason);
                                    };
                                    var isSync = thePayload.isTeardown || thePayload.isSync;
                                    try {
                                        sendInterface_1.sendPOST(payload, onComplete, isSync);
                                        if (_self.sendListener) {
                                            // Send the original payload to the listener
                                            _self.sendListener(orgPayloadData, payload, isSync, thePayload.isBeacon);
                                        }
                                    }
                                    catch (ex) {
                                        _postManager.diagLog().warnToConsole("Unexpected exception sending payload. Ex:" + dumpObj(ex));
                                        _doOnComplete(onComplete, 0, {});
                                    }
                                };
                            }
                            doPerf(_core, function () { return "HttpManager:_doPayloadSend.sender"; }, function () {
                                if (sender) {
                                    if (thePayload.sendType === 0 /* Batched */) {
                                        _outstandingRequests++;
                                    }
                                    // Only call the hook if it's defined and we are not using sendBeacon as additional headers are not supported
                                    if (useSendHook_1 && !thePayload.isBeacon && sendInterface_1._transport !== 3 /* Beacon */) {
                                        // Create a new IPayloadData that is sent into the hook method, so that the hook method
                                        // can't change the object references to the orgPayloadData (it can still change the content -- mainly the headers)
                                        // Disabling the use of const because of Issue:
                                        // - Task 9227844: [1DS] Some environments and packagers automatically "freeze" objects which are defined as const which causes any mutations to throw
                                        // eslint-disable-next-line prefer-const
                                        var hookData_1 = {
                                            data: orgPayloadData.data,
                                            urlString: orgPayloadData.urlString,
                                            headers: extend({}, orgPayloadData.headers),
                                            timeout: orgPayloadData.timeout,
                                            disableXhrSync: orgPayloadData.disableXhrSync
                                        };
                                        var senderCalled_1 = false;
                                        doPerf(_core, function () { return "HttpManager:_doPayloadSend.sendHook"; }, function () {
                                            try {
                                                _self.sendHook(hookData_1, function (payload) {
                                                    senderCalled_1 = true;
                                                    // Add back the internal properties
                                                    if (!_customHttpInterface && !payload._thePayload) {
                                                        payload._thePayload = payload._thePayload || orgPayloadData._thePayload;
                                                        payload._sendReason = payload._sendReason || orgPayloadData._sendReason;
                                                    }
                                                    sender(payload);
                                                }, thePayload.isSync || thePayload.isTeardown);
                                            }
                                            catch (ex) {
                                                if (!senderCalled_1) {
                                                    // The hook never called the sender -- assume that it never will
                                                    sender(orgPayloadData);
                                                }
                                            }
                                        });
                                    }
                                    else {
                                        sender(orgPayloadData);
                                    }
                                }
                            });
                        }, function () { return ({ thePayload: thePayload, serializationStart: serializationStart, serializationCompleted: serializationCompleted, sendReason: sendReason }); }, thePayload.isSync);
                    }
                    if (thePayload.sizeExceed && thePayload.sizeExceed.length > 0) {
                        // Ensure that we send any discard events for oversize events even when there was no payload to send
                        _sendBatchesNotification(thePayload.sizeExceed, 8003 /* SizeLimitExceeded */, thePayload.sendType);
                    }
                    if (thePayload.failedEvts && thePayload.failedEvts.length > 0) {
                        // Ensure that we send any discard events for events that could not be serialized even when there was no payload to send
                        _sendBatchesNotification(thePayload.failedEvts, 8002 /* InvalidEvent */, thePayload.sendType);
                    }
                }
                function _addEventCompletedTimings(theEvents, sendEventCompleted) {
                    if (_enableEventTimings) {
                        arrForEach(theEvents, function (theEvent) {
                            var timings = theEvent.timings = theEvent.timings || {};
                            _setTimingValue(timings, "sendEventCompleted", sendEventCompleted);
                        });
                    }
                }
                function _retryRequestIfNeeded(status, headers, thePayload, sendReason) {
                    var reason = 9000 /* ResponseFailure */;
                    var droppedBatches = null;
                    var isRetrying = false;
                    var backOffTrans = false;
                    try {
                        var shouldRetry = true;
                        if (typeof status !== strShimUndefined) {
                            if (headers) {
                                _clockSkewManager.setClockSkew(headers[strTimeDeltaHeader]);
                                var killDuration = headers[strKillDurationHeader] || headers["kill-duration-seconds"];
                                arrForEach(_killSwitch.setKillSwitchTenants(headers[strKillTokensHeader], killDuration), function (killToken) {
                                    arrForEach(thePayload.batches, function (theBatch) {
                                        if (theBatch.iKey() === killToken) {
                                            // Make sure we have initialized the array
                                            droppedBatches = droppedBatches || [];
                                            // Create a copy of the batch with all of the events (and more importantly the action functions)
                                            var removedEvents = theBatch.split(0);
                                            // And then remove the events for the payload batch and reduce the actual number of processed
                                            thePayload.numEvents -= removedEvents.count();
                                            droppedBatches.push(removedEvents);
                                        }
                                    });
                                });
                            }
                            // Disabling triple-equals rule to avoid httpOverrides from failing because they are returning a string value
                            // tslint:disable-next-line:triple-equals
                            if (status == 200 || status == 204) {
                                // Response was successfully sent
                                reason = 200 /* Complete */;
                                return;
                            }
                            if (!RetryPolicy$1.shouldRetryForStatus(status) || thePayload.numEvents <= 0) {
                                // Only retry for specific response codes and if there is still events after kill switch processing
                                shouldRetry = false;
                            }
                            // Derive the notification response from the HttpStatus Code
                            reason = 9000 /* ResponseFailure */ + (status % 1000);
                        }
                        if (shouldRetry) {
                            // The events should be retried -- so change notification to requeue them
                            reason = 100 /* RequeueEvents */;
                            var retryCount_1 = thePayload.retryCnt;
                            if (thePayload.sendType === 0 /* Batched */) {
                                // attempt to resend the entire batch
                                if (retryCount_1 < maxRequestRetriesBeforeBackoff) {
                                    isRetrying = true;
                                    _doAction(function () {
                                        // try to resend the same batches
                                        if (thePayload.sendType === 0 /* Batched */) {
                                            // Reduce the outstanding request count (if this was an async request) as we didn't reduce the count
                                            // previously and we are about to reschedule our retry attempt and we want an attempt to send
                                            // to occur, it's also required to ensure that a follow up handleRequestFinished() call occurs
                                            _outstandingRequests--;
                                        }
                                        _sendBatches(thePayload.batches, retryCount_1 + 1, thePayload.isTeardown, _isUnloading ? 2 /* SendBeacon */ : thePayload.sendType, 5 /* Retry */);
                                    }, _isUnloading, RetryPolicy$1.getMillisToBackoffForRetry(retryCount_1));
                                }
                                else {
                                    backOffTrans = true;
                                    if (_isUnloading) {
                                        // we are unloading so don't try and requeue the events otherwise let the events get requeued and resent during the backoff sending
                                        // This will also cause the events to be purged based on the priority (if necessary)
                                        reason = 8001 /* NonRetryableStatus */;
                                    }
                                }
                            }
                        }
                    }
                    finally {
                        if (!isRetrying) {
                            // Make sure the clockSkewManager doesn't blocking further sending of requests once we have a proper response
                            // This won't override any previously sent clock Skew value
                            _clockSkewManager.setClockSkew();
                            _handleRequestFinished(thePayload, reason, sendReason, backOffTrans);
                        }
                        _sendBatchesNotification(droppedBatches, 8004 /* KillSwitch */, thePayload.sendType);
                    }
                }
                function _handleRequestFinished(thePayload, batchReason, sendReason, backOffTrans) {
                    try {
                        if (backOffTrans) {
                            // Slow down the transmission requests
                            _postManager._backOffTransmission();
                        }
                        if (batchReason === 200 /* Complete */) {
                            if (!backOffTrans && !thePayload.isSync) {
                                // We have a successful async response, so the lets open the floodgates
                                // The reason for checking isSync is to avoid unblocking if beacon send occurred as it
                                // doesn't wait for a response.
                                _postManager._clearBackOff();
                            }
                            _addCompleteTimings(thePayload.batches);
                        }
                        // Send the notifications synchronously
                        _sendBatchesNotification(thePayload.batches, batchReason, thePayload.sendType, true);
                    }
                    finally {
                        if (thePayload.sendType === 0 /* Batched */) {
                            // we always need to decrement this value otherwise the httpmanager locks up and won't send any more events
                            _outstandingRequests--;
                            // Don't try to send additional queued events if this is a retry operation as the retried
                            // response will eventually call _handleRequestFinished for the retried event
                            if (sendReason !== 5 /* Retry */) {
                                // Try and send any other queued batched events
                                _self.sendQueuedRequests(thePayload.sendType, sendReason);
                            }
                        }
                    }
                }
                function _addCompleteTimings(theBatches) {
                    if (_enableEventTimings) {
                        var sendEventCompleted_1 = getTime();
                        arrForEach(theBatches, function (theBatch) {
                            if (theBatch && theBatch.count() > 0) {
                                _addEventCompletedTimings(theBatch.events(), sendEventCompleted_1);
                            }
                        });
                    }
                }
                function _doAction(cb, isSync, interval) {
                    if (isSync) {
                        cb();
                    }
                    else {
                        _postManager._setTimeoutOverride(cb, interval);
                    }
                }
                /**
                * Converts the XHR getAllResponseHeaders to a map containing the header key and value.
                */
                // tslint:disable-next-line: align
                function _convertAllHeadersToMap(headersString) {
                    var headers = {};
                    if (isString(headersString)) {
                        var headersArray = strTrim(headersString).split(/[\r\n]+/);
                        arrForEach(headersArray, function (headerEntry) {
                            if (headerEntry) {
                                var idx = headerEntry.indexOf(": ");
                                if (idx !== -1) {
                                    // The new spec has the headers returning all as lowercase -- but not all browsers do this yet
                                    var header = strTrim(headerEntry.substring(0, idx)).toLowerCase();
                                    var value = strTrim(headerEntry.substring(idx + 1));
                                    headers[header] = value;
                                }
                                else {
                                    headers[strTrim(headerEntry)] = 1;
                                }
                            }
                        });
                    }
                    return headers;
                }
                function _getMsfpc(thePayload) {
                    for (var lp = 0; lp < thePayload.batches.length; lp++) {
                        var msfpc = thePayload.batches[lp].Msfpc();
                        if (msfpc) {
                            return encodeURIComponent(msfpc);
                        }
                    }
                    return "";
                }
                function _handleCollectorResponse(responseText) {
                    var responseHandlers = _self._responseHandlers;
                    try {
                        for (var i = 0; i < responseHandlers.length; i++) {
                            try {
                                responseHandlers[i](responseText);
                            }
                            catch (e) {
                                _postManager.diagLog().throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.PostResponseHandler, "Response handler failed: " + e);
                            }
                        }
                        if (responseText) {
                            var response = JSON.parse(responseText);
                            if (isValueAssigned(response.webResult) && isValueAssigned(response.webResult[strMsfpc])) {
                                // Set cookie
                                _cookieMgr.set("MSFPC", response.webResult[strMsfpc], 365 * 86400);
                            }
                        }
                    }
                    catch (ex) {
                        // Doing nothing
                    }
                }
                function _sendBatchesNotification(theBatches, batchReason, sendType, sendSync) {
                    if (theBatches && theBatches.length > 0 && actions) {
                        var theAction_1 = actions[_getNotificationAction(batchReason)];
                        if (theAction_1) {
                            var isSyncRequest_1 = sendType !== 0 /* Batched */;
                            doPerf(_core, function () { return "HttpManager:_sendBatchesNotification"; }, function () {
                                _doAction(function () {
                                    try {
                                        theAction_1.call(actions, theBatches, batchReason, isSyncRequest_1, sendType);
                                    }
                                    catch (e) {
                                        _postManager.diagLog().throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.NotificationException, "send request notification failed: " + e);
                                    }
                                }, sendSync || isSyncRequest_1, 0);
                            }, function () { return ({ batches: _createDebugBatches(theBatches), reason: batchReason, isSync: isSyncRequest_1, sendSync: sendSync, sendType: sendType }); }, !isSyncRequest_1);
                        }
                    }
                }
                function _getNotificationAction(reason) {
                    var action = _eventActionMap[reason];
                    if (!isValueAssigned(action)) {
                        action = strOther;
                        if (reason >= 9000 /* ResponseFailure */ && reason <= 9999 /* ResponseFailureMax */) {
                            action = strResponseFail;
                        }
                        else if (reason >= 8000 /* EventsDropped */ && reason <= 8999 /* EventsDroppedMax */) {
                            action = strDropped;
                        }
                        else if (reason >= 1000 /* SendingUndefined */ && reason <= 1999 /* SendingEventMax */) {
                            action = strSending;
                        }
                    }
                    return action;
                }
            });
        }
    // Removed Stub for HttpManager.prototype.initialize.
    // Removed Stub for HttpManager.prototype.addQueryStringParameter.
    // Removed Stub for HttpManager.prototype.addHeader.
    // Removed Stub for HttpManager.prototype.addBatch.
    // Removed Stub for HttpManager.prototype.canSendRequest.
    // Removed Stub for HttpManager.prototype.sendQueuedRequests.
    // Removed Stub for HttpManager.prototype.isCompletelyIdle.
    // Removed Stub for HttpManager.prototype.setUnloading.
    // Removed Stub for HttpManager.prototype.teardown.
    // Removed Stub for HttpManager.prototype.pause.
    // Removed Stub for HttpManager.prototype.resume.
    // Removed Stub for HttpManager.prototype.sendSynchronousBatch.
        return HttpManager;
    }());

    /*
     * 1DS JS SDK POST plugin, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var FlushCheckTimer = 0.250; // This needs to be in seconds, so this is 250ms
    var MaxNumberEventPerBatch = 500;
    var EventsDroppedAtOneTime = 20;
    var MaxSendAttempts = 6;
    var MaxSyncUnloadSendAttempts = 2; // Assuming 2 based on beforeunload and unload
    var MaxBackoffCount = 4;
    var globalContext = isWindowObjectAvailable ? window : undefined;
    var MaxConnections = 2;
    var MaxRequestRetriesBeforeBackoff = 1;
    var strEventsDiscarded = "eventsDiscarded";
    var strOverrideInstrumentationKey = "overrideInstrumentationKey";
    var strMaxEventRetryAttempts = "maxEventRetryAttempts";
    var strMaxUnloadEventRetryAttempts = "maxUnloadEventRetryAttempts";
    /**
     * Class that manages adding events to inbound queues and batching of events
     * into requests.
     */
    var PostChannel = /** @class */ (function (_super) {
        __extendsFn(PostChannel, _super);
        function PostChannel() {
            var _this = _super.call(this) || this;
            _this.identifier = "PostChannel";
            _this.priority = 1011;
            _this.version = '3.1.11';
            var _config;
            var _isTeardownCalled = false;
            var _flushCallbackQueue = [];
            var _flushCallbackTimerId = null;
            var _paused = false;
            var _immediateQueueSize = 0;
            var _immediateQueueSizeLimit = 500;
            var _queueSize = 0;
            var _queueSizeLimit = 10000;
            var _profiles = {};
            var _currentProfile = RT_PROFILE;
            var _scheduledTimerId = null;
            var _immediateTimerId = null;
            var _currentBackoffCount = 0;
            var _timerCount = 0;
            var _xhrOverride;
            var _httpManager;
            var _batchQueues = {};
            var _autoFlushEventsLimit;
            // either MaxBatchSize * (1+ Max Connections) or _queueLimit / 6 (where 3 latency Queues [normal, realtime, cost deferred] * 2 [allow half full -- allow for retry])
            var _autoFlushBatchLimit;
            var _delayedBatchSendLatency = -1;
            var _delayedBatchReason;
            var _optimizeObject = true;
            var _isPageUnloadTriggered = false;
            var _disableXhrSync = false;
            var _maxEventSendAttempts = MaxSendAttempts;
            var _maxUnloadEventSendAttempts = MaxSyncUnloadSendAttempts;
            dynamicProto(PostChannel, _this, function (_self, _base) {
                _initializeProfiles();
                _clearQueues();
                _setAutoLimits();
                _httpManager = new HttpManager(MaxNumberEventPerBatch, MaxConnections, MaxRequestRetriesBeforeBackoff, {
                    requeue: _requeueEvents,
                    send: _sendingEvent,
                    sent: _eventsSentEvent,
                    drop: _eventsDropped,
                    rspFail: _eventsResponseFail,
                    oth: _otherEvent
                });
                // Special internal method to allow the DebugPlugin to hook embedded objects
                _self["_getDbgPlgTargets"] = function () {
                    return [_httpManager];
                };
                _self.initialize = function (coreConfig, core, extensions) {
                    doPerf(core, function () { return "PostChannel:initialize"; }, function () {
                        var extendedCore = core;
                        _base.initialize(coreConfig, core, extensions);
                        _self.setInitialized(false);
                        var ctx = _self._getTelCtx();
                        coreConfig.extensionConfig[_self.identifier] = coreConfig.extensionConfig[_self.identifier] || {};
                        _config = ctx.getExtCfg(_self.identifier);
                        _self._setTimeoutOverride = _config.setTimeoutOverride ? _config.setTimeoutOverride : setTimeout.bind(globalContext);
                        _self._clearTimeoutOverride = _config.clearTimeoutOverride ? _config.clearTimeoutOverride : clearTimeout.bind(globalContext);
                        // Only try and use the optimizeObject() if this appears to be a chromium based browser and it has not been explicitly disabled
                        _optimizeObject = !_config.disableOptimizeObj && isChromium();
                        _hookWParam(extendedCore);
                        if (_config.eventsLimitInMem > 0) {
                            _queueSizeLimit = _config.eventsLimitInMem;
                        }
                        if (_config.immediateEventLimit > 0) {
                            _immediateQueueSizeLimit = _config.immediateEventLimit;
                        }
                        if (_config.autoFlushEventsLimit > 0) {
                            _autoFlushEventsLimit = _config.autoFlushEventsLimit;
                        }
                        _disableXhrSync = _config.disableXhrSync;
                        if (isNumber(_config[strMaxEventRetryAttempts])) {
                            _maxEventSendAttempts = _config[strMaxEventRetryAttempts];
                        }
                        if (isNumber(_config[strMaxUnloadEventRetryAttempts])) {
                            _maxUnloadEventSendAttempts = _config[strMaxUnloadEventRetryAttempts];
                        }
                        _setAutoLimits();
                        if (_config.httpXHROverride && _config.httpXHROverride.sendPOST) {
                            _xhrOverride = _config.httpXHROverride;
                        }
                        if (isValueAssigned(coreConfig.anonCookieName)) {
                            _httpManager.addQueryStringParameter("anoncknm", coreConfig.anonCookieName);
                        }
                        _httpManager.sendHook = _config.payloadPreprocessor;
                        _httpManager.sendListener = _config.payloadListener;
                        // Override endpointUrl if provided in Post config
                        var endpointUrl = _config.overrideEndpointUrl ? _config.overrideEndpointUrl : coreConfig.endpointUrl;
                        _self._notificationManager = coreConfig.extensionConfig.NotificationManager;
                        _httpManager.initialize(endpointUrl, _self.core, _self, _xhrOverride, _config);
                        var excludePageUnloadEvents = coreConfig.disablePageUnloadEvents || [];
                        // When running in Web browsers try to send all telemetry if page is unloaded
                        addPageUnloadEventListener(_handleUnloadEvents, excludePageUnloadEvents);
                        addPageHideEventListener(_handleUnloadEvents, excludePageUnloadEvents);
                        addPageShowEventListener(_handleShowEvents, coreConfig.disablePageShowEvents);
                        _self.setInitialized(true);
                    }, function () { return ({ coreConfig: coreConfig, core: core, extensions: extensions }); });
                };
                _self.processTelemetry = function (ev, itemCtx) {
                    setProcessTelemetryTimings(ev, _self.identifier);
                    itemCtx = _self._getTelCtx(itemCtx);
                    // Get the channel instance from the current request/instance
                    var channelConfig = itemCtx.getExtCfg(_self.identifier);
                    // DisableTelemetry was defined in the config provided during initialization
                    var disableTelemetry = !!_config.disableTelemetry;
                    if (channelConfig) {
                        // DisableTelemetry is defined in the config for this request/instance
                        disableTelemetry = disableTelemetry || !!channelConfig.disableTelemetry;
                    }
                    var event = ev;
                    if (!disableTelemetry && !_isTeardownCalled) {
                        // Override iKey if provided in Post config if provided for during initialization
                        if (_config[strOverrideInstrumentationKey]) {
                            event.iKey = _config[strOverrideInstrumentationKey];
                        }
                        // Override iKey if provided in Post config if provided for this instance
                        if (channelConfig && channelConfig[strOverrideInstrumentationKey]) {
                            event.iKey = channelConfig[strOverrideInstrumentationKey];
                        }
                        _addEventToQueues(event, true);
                        if (_isPageUnloadTriggered) {
                            // Unload event has been received so we need to try and flush new events
                            _releaseAllQueues(2 /* SendBeacon */, 2 /* Unload */);
                        }
                        else {
                            _scheduleTimer();
                        }
                    }
                    _self.processNext(event, itemCtx);
                };
                function _hookWParam(extendedCore) {
                    var existingGetWParamMethod = extendedCore.getWParam;
                    extendedCore.getWParam = function () {
                        var wparam = 0;
                        if (_config.ignoreMc1Ms0CookieProcessing) {
                            wparam = wparam | 2;
                        }
                        return wparam | existingGetWParamMethod();
                    };
                }
                // Moving event handlers out from the initialize closure so that any local variables can be garbage collected
                function _handleUnloadEvents(evt) {
                    var theEvt = evt || getWindow().event; // IE 8 does not pass the event
                    if (theEvt.type !== "beforeunload") {
                        // Only set the unload trigger if not beforeunload event as beforeunload can be cancelled while the other events can't
                        _isPageUnloadTriggered = true;
                        _httpManager.setUnloading(_isPageUnloadTriggered);
                    }
                    _releaseAllQueues(2 /* SendBeacon */, 2 /* Unload */);
                }
                function _handleShowEvents(evt) {
                    // Handle the page becoming visible again
                    _isPageUnloadTriggered = false;
                    _httpManager.setUnloading(_isPageUnloadTriggered);
                }
                function _addEventToQueues(event, append) {
                    // If send attempt field is undefined we should set it to 0.
                    if (!event.sendAttempt) {
                        event.sendAttempt = 0;
                    }
                    // Add default latency
                    if (!event.latency) {
                        event.latency = EventLatency.Normal;
                    }
                    // Remove extra AI properties if present
                    if (event.ext && event.ext["trace"]) {
                        delete (event.ext["trace"]);
                    }
                    if (event.ext && event.ext["user"] && event.ext["user"]["id"]) {
                        delete (event.ext["user"]["id"]);
                    }
                    // v8 performance optimization for iterating over the keys
                    if (_optimizeObject) {
                        event.ext = optimizeObject(event.ext);
                        if (event.baseData) {
                            event.baseData = optimizeObject(event.baseData);
                        }
                        if (event.data) {
                            event.data = optimizeObject(event.data);
                        }
                    }
                    if (event.sync) {
                        // If the transmission is backed off then do not send synchronous events.
                        // We will convert these events to Real time latency instead.
                        if (_currentBackoffCount || _paused) {
                            event.latency = EventLatency.RealTime;
                            event.sync = false;
                        }
                        else {
                            // Log the event synchronously
                            if (_httpManager) {
                                // v8 performance optimization for iterating over the keys
                                if (_optimizeObject) {
                                    event = optimizeObject(event);
                                }
                                _httpManager.sendSynchronousBatch(EventBatch.create(event.iKey, [event]), event.sync === true ? 1 /* Synchronous */ : event.sync, 3 /* SyncEvent */);
                                return;
                            }
                        }
                    }
                    var evtLatency = event.latency;
                    var queueSize = _queueSize;
                    var queueLimit = _queueSizeLimit;
                    if (evtLatency === EventLatency.Immediate) {
                        queueSize = _immediateQueueSize;
                        queueLimit = _immediateQueueSizeLimit;
                    }
                    var eventDropped = false;
                    // Only add the event if the queue isn't full or it's a direct event (which don't add to the queue sizes)
                    if (queueSize < queueLimit) {
                        eventDropped = !_addEventToProperQueue(event, append);
                    }
                    else {
                        var dropLatency = EventLatency.Normal;
                        var dropNumber = EventsDroppedAtOneTime;
                        if (evtLatency === EventLatency.Immediate) {
                            // Only drop other immediate events as they are not technically sharing the general queue
                            dropLatency = EventLatency.Immediate;
                            dropNumber = 1;
                        }
                        // Drop old event from lower or equal latency
                        eventDropped = true;
                        if (_dropEventWithLatencyOrLess(event.iKey, event.latency, dropLatency, dropNumber)) {
                            eventDropped = !_addEventToProperQueue(event, append);
                        }
                    }
                    if (eventDropped) {
                        // Can't drop events from current queues because the all the slots are taken by queues that are being flushed.
                        _notifyEvents(strEventsDiscarded, [event], EventsDiscardedReason.QueueFull);
                    }
                }
                _self.setEventQueueLimits = function (eventLimit, autoFlushLimit) {
                    _queueSizeLimit = eventLimit > 0 ? eventLimit : 10000;
                    _autoFlushEventsLimit = autoFlushLimit > 0 ? autoFlushLimit : 0;
                    _setAutoLimits();
                    // We only do this check here as during normal event addition if the queue is > then events start getting dropped
                    var doFlush = _queueSize > eventLimit;
                    if (!doFlush && _autoFlushBatchLimit > 0) {
                        // Check the auto flush max batch size
                        for (var latency = EventLatency.Normal; !doFlush && latency <= EventLatency.RealTime; latency++) {
                            var batchQueue = _batchQueues[latency];
                            if (batchQueue && batchQueue.batches) {
                                arrForEach(batchQueue.batches, function (theBatch) {
                                    if (theBatch && theBatch.count() >= _autoFlushBatchLimit) {
                                        // If any 1 batch is > than the limit then trigger an auto flush
                                        doFlush = true;
                                    }
                                });
                            }
                        }
                    }
                    _performAutoFlush(true, doFlush);
                };
                _self.teardown = function () {
                    _releaseAllQueues(2 /* SendBeacon */, 2 /* Unload */);
                    _isTeardownCalled = true;
                    _httpManager.teardown();
                };
                _self.pause = function () {
                    _clearScheduledTimer();
                    _paused = true;
                    _httpManager.pause();
                };
                _self.resume = function () {
                    _paused = false;
                    _httpManager.resume();
                    _scheduleTimer();
                };
                _self.addResponseHandler = function (responseHandler) {
                    _httpManager._responseHandlers.push(responseHandler);
                };
                _self._loadTransmitProfiles = function (profiles) {
                    _resetTransmitProfiles();
                    objForEachKey(profiles, function (profileName, profileValue) {
                        var profLen = profileValue.length;
                        if (profLen >= 2) {
                            var directValue = (profLen > 2 ? profileValue[2] : 0);
                            profileValue.splice(0, profLen - 2);
                            // Make sure if a higher latency is set to not send then don't send lower latency
                            if (profileValue[1] < 0) {
                                profileValue[0] = -1;
                            }
                            // Make sure each latency is multiple of the latency higher then it. If not a multiple
                            // we round up so that it becomes a multiple.
                            if (profileValue[1] > 0 && profileValue[0] > 0) {
                                var timerMultiplier = profileValue[0] / profileValue[1];
                                profileValue[0] = Math.ceil(timerMultiplier) * profileValue[1];
                            }
                            // Add back the direct profile timeout
                            if (directValue >= 0 && profileValue[1] >= 0 && directValue > profileValue[1]) {
                                // Make sure if it's not disabled (< 0) then make sure it's not larger than RealTime
                                directValue = profileValue[1];
                            }
                            profileValue.push(directValue);
                            _profiles[profileName] = profileValue;
                        }
                    });
                };
                _self.flush = function (async, callback, sendReason) {
                    if (async === void 0) { async = true; }
                    if (!_paused) {
                        // Clear the normal schedule timer as we are going to try and flush ASAP
                        _clearScheduledTimer();
                        sendReason = sendReason || 1 /* ManualFlush */;
                        if (async) {
                            // Move all queued events to the HttpManager
                            _queueBatches(EventLatency.Normal, 0 /* Batched */, sendReason);
                            // All events (should) have been queue -- lets just make sure the queue counts are correct to avoid queue exhaustion (previous bug #9685112)
                            _resetQueueCounts();
                            if (_flushCallbackTimerId == null) {
                                _flushCallbackTimerId = _createTimer(function () {
                                    _flushImpl(callback, sendReason);
                                }, 0);
                            }
                            else {
                                // Even if null (no callback) this will ensure after the flushImpl finishes waiting
                                // for a completely idle connection it will attempt to re-flush any queued events on the next cycle
                                _flushCallbackQueue.push(callback);
                            }
                        }
                        else {
                            // Now cause all queued events to be sent synchronously
                            _sendEventsForLatencyAndAbove(EventLatency.Normal, 1 /* Synchronous */, sendReason);
                            if (callback !== null && callback !== undefined) {
                                callback();
                            }
                        }
                    }
                };
                _self.setMsaAuthTicket = function (ticket) {
                    _httpManager.addHeader(strMsaDeviceTicket, ticket);
                };
                _self.hasEvents = _hasEvents;
                _self._setTransmitProfile = function (profileName) {
                    if (_currentProfile !== profileName && _profiles[profileName] !== undefined) {
                        _clearScheduledTimer();
                        _currentProfile = profileName;
                        _scheduleTimer();
                    }
                };
                /**
                 * Batch and send events currently in the queue for the given latency.
                 * @param latency - Latency for which to send events.
                 */
                function _sendEventsForLatencyAndAbove(latency, sendType, sendReason) {
                    var queued = _queueBatches(latency, sendType, sendReason);
                    // Always trigger the request as while the post channel may not have queued additional events, the httpManager may already have waiting events
                    _httpManager.sendQueuedRequests(sendType, sendReason);
                    return queued;
                }
                function _hasEvents() {
                    return _queueSize > 0;
                }
                /**
                 * Try to schedule the timer after which events will be sent. If there are
                 * no events to be sent, or there is already a timer scheduled, or the
                 * http manager doesn't have any idle connections this method is no-op.
                 */
                function _scheduleTimer() {
                    // If we had previously attempted to send requests, but the http manager didn't have any idle connections then the requests where delayed
                    // so try and requeue then again now
                    if (_delayedBatchSendLatency >= 0 && _queueBatches(_delayedBatchSendLatency, 0 /* Batched */, _delayedBatchReason)) {
                        _httpManager.sendQueuedRequests(0 /* Batched */, _delayedBatchReason);
                    }
                    if (_immediateQueueSize > 0 && !_immediateTimerId && !_paused) {
                        // During initialization _profiles enforce that the direct [2] is less than real time [1] timer value
                        // If the immediateTimeout is disabled the immediate events will be sent with Real Time events
                        var immediateTimeOut = _profiles[_currentProfile][2];
                        if (immediateTimeOut >= 0) {
                            _immediateTimerId = _createTimer(function () {
                                _immediateTimerId = null;
                                // Only try to send direct events
                                _sendEventsForLatencyAndAbove(EventLatency.Immediate, 0 /* Batched */, 1 /* NormalSchedule */);
                                _scheduleTimer();
                            }, immediateTimeOut);
                        }
                    }
                    // During initialization the _profiles enforce that the normal [0] is a multiple of the real time [1] timer value
                    var timeOut = _profiles[_currentProfile][1];
                    if (!_scheduledTimerId && !_flushCallbackTimerId && timeOut >= 0 && !_paused) {
                        if (_hasEvents()) {
                            _scheduledTimerId = _createTimer(function () {
                                _scheduledTimerId = null;
                                _sendEventsForLatencyAndAbove(_timerCount === 0 ? EventLatency.RealTime : EventLatency.Normal, 0 /* Batched */, 1 /* NormalSchedule */);
                                // Increment the count for next cycle
                                _timerCount++;
                                _timerCount %= 2;
                                _scheduleTimer();
                            }, timeOut);
                        }
                        else {
                            _timerCount = 0;
                        }
                    }
                }
                _self._backOffTransmission = function () {
                    if (_currentBackoffCount < MaxBackoffCount) {
                        _currentBackoffCount++;
                        _clearScheduledTimer();
                        _scheduleTimer();
                    }
                };
                _self._clearBackOff = function () {
                    if (_currentBackoffCount) {
                        _currentBackoffCount = 0;
                        _clearScheduledTimer();
                        _scheduleTimer();
                    }
                };
                function _createTimer(theTimerFunc, timeOut) {
                    // If the transmission is backed off make the timer at least 1 sec to allow for back off.
                    if (timeOut === 0 && _currentBackoffCount) {
                        timeOut = 1;
                    }
                    var timerMultiplier = 1000;
                    if (_currentBackoffCount) {
                        timerMultiplier = RetryPolicy$1.getMillisToBackoffForRetry(_currentBackoffCount - 1);
                    }
                    return _self._setTimeoutOverride(theTimerFunc, timeOut * timerMultiplier);
                }
                function _clearScheduledTimer() {
                    if (_scheduledTimerId !== null) {
                        _self._clearTimeoutOverride(_scheduledTimerId);
                        _scheduledTimerId = null;
                        _timerCount = 0;
                    }
                }
                // Try to send all queued events using beacons if available
                function _releaseAllQueues(sendType, sendReason) {
                    _clearScheduledTimer();
                    // Cancel all flush callbacks
                    if (_flushCallbackTimerId) {
                        _self._clearTimeoutOverride(_flushCallbackTimerId);
                        _flushCallbackTimerId = null;
                    }
                    if (!_paused) {
                        // Queue all the remaining requests to be sent. The requests will be sent using HTML5 Beacons if they are available.
                        _sendEventsForLatencyAndAbove(EventLatency.Normal, sendType, sendReason);
                    }
                }
                /**
                 * Add empty queues for all latencies in the inbound queues map. This is called
                 * when Transmission Manager is being flushed. This ensures that new events added
                 * after flush are stored separately till we flush the current events.
                 */
                function _clearQueues() {
                    _batchQueues[EventLatency.Immediate] = {
                        batches: [],
                        iKeyMap: {}
                    };
                    _batchQueues[EventLatency.RealTime] = {
                        batches: [],
                        iKeyMap: {}
                    };
                    _batchQueues[EventLatency.CostDeferred] = {
                        batches: [],
                        iKeyMap: {}
                    };
                    _batchQueues[EventLatency.Normal] = {
                        batches: [],
                        iKeyMap: {}
                    };
                }
                function _getEventBatch(iKey, latency, create) {
                    var batchQueue = _batchQueues[latency];
                    if (!batchQueue) {
                        latency = EventLatency.Normal;
                        batchQueue = _batchQueues[latency];
                    }
                    var eventBatch = batchQueue.iKeyMap[iKey];
                    if (!eventBatch && create) {
                        eventBatch = EventBatch.create(iKey);
                        batchQueue.batches.push(eventBatch);
                        batchQueue.iKeyMap[iKey] = eventBatch;
                    }
                    return eventBatch;
                }
                function _performAutoFlush(isAsync, doFlush) {
                    // Only perform the auto flush check if the httpManager has an idle connection and we are not in a backoff situation
                    if (_httpManager.canSendRequest() && !_currentBackoffCount) {
                        if (_autoFlushEventsLimit > 0 && _queueSize > _autoFlushEventsLimit) {
                            // Force flushing
                            doFlush = true;
                        }
                        if (doFlush && _flushCallbackTimerId == null) {
                            // Auto flush the queue
                            _self.flush(isAsync, null, 20 /* MaxQueuedEvents */);
                        }
                    }
                }
                function _addEventToProperQueue(event, append) {
                    // v8 performance optimization for iterating over the keys
                    if (_optimizeObject) {
                        event = optimizeObject(event);
                    }
                    var latency = event.latency;
                    var eventBatch = _getEventBatch(event.iKey, latency, true);
                    if (eventBatch.addEvent(event)) {
                        if (latency !== EventLatency.Immediate) {
                            _queueSize++;
                            // Check for auto flushing based on total events in the queue, but not for requeued or retry events
                            if (append && event.sendAttempt === 0) {
                                // Force the flushing of the batch if the batch (specific iKey / latency combination) reaches it's auto flush limit
                                _performAutoFlush(!event.sync, _autoFlushBatchLimit > 0 && eventBatch.count() >= _autoFlushBatchLimit);
                            }
                        }
                        else {
                            // Direct events don't need auto flushing as they are scheduled (by default) for immediate delivery
                            _immediateQueueSize++;
                        }
                        return true;
                    }
                    return false;
                }
                function _dropEventWithLatencyOrLess(iKey, latency, currentLatency, dropNumber) {
                    while (currentLatency <= latency) {
                        var eventBatch = _getEventBatch(iKey, latency, true);
                        if (eventBatch && eventBatch.count() > 0) {
                            // Dropped oldest events from lowest possible latency
                            var droppedEvents = eventBatch.split(0, dropNumber);
                            var droppedCount = droppedEvents.count();
                            if (droppedCount > 0) {
                                if (currentLatency === EventLatency.Immediate) {
                                    _immediateQueueSize -= droppedCount;
                                }
                                else {
                                    _queueSize -= droppedCount;
                                }
                                _notifyBatchEvents(strEventsDiscarded, [droppedEvents], EventsDiscardedReason.QueueFull);
                                return true;
                            }
                        }
                        currentLatency++;
                    }
                    // Unable to drop any events -- lets just make sure the queue counts are correct to avoid exhaustion
                    _resetQueueCounts();
                    return false;
                }
                /**
                 * Internal helper to reset the queue counts, used as a backstop to avoid future queue exhaustion errors
                 * that might occur because of counting issues.
                 */
                function _resetQueueCounts() {
                    var immediateQueue = 0;
                    var normalQueue = 0;
                    var _loop_1 = function (latency) {
                        var batchQueue = _batchQueues[latency];
                        if (batchQueue && batchQueue.batches) {
                            arrForEach(batchQueue.batches, function (theBatch) {
                                if (latency === EventLatency.Immediate) {
                                    immediateQueue += theBatch.count();
                                }
                                else {
                                    normalQueue += theBatch.count();
                                }
                            });
                        }
                    };
                    for (var latency = EventLatency.Normal; latency <= EventLatency.Immediate; latency++) {
                        _loop_1(latency);
                    }
                    _queueSize = normalQueue;
                    _immediateQueueSize = immediateQueue;
                }
                function _queueBatches(latency, sendType, sendReason) {
                    var eventsQueued = false;
                    var isAsync = sendType === 0 /* Batched */;
                    // Only queue batches (to the HttpManager) if this is a sync request or the httpManager has an idle connection
                    // Thus keeping the events within the PostChannel until the HttpManager has a connection available
                    // This is so we can drop "old" events if the queue is getting full because we can't successfully send events
                    if (!isAsync || _httpManager.canSendRequest()) {
                        doPerf(_self.core, function () { return "PostChannel._queueBatches"; }, function () {
                            var droppedEvents = [];
                            var latencyToProcess = EventLatency.Immediate;
                            while (latencyToProcess >= latency) {
                                var batchQueue = _batchQueues[latencyToProcess];
                                if (batchQueue && batchQueue.batches && batchQueue.batches.length > 0) {
                                    arrForEach(batchQueue.batches, function (theBatch) {
                                        // Add the batch to the http manager to send the requests
                                        if (!_httpManager.addBatch(theBatch)) {
                                            // The events from this iKey are being dropped (killed)
                                            droppedEvents = droppedEvents.concat(theBatch.events());
                                        }
                                        else {
                                            eventsQueued = eventsQueued || (theBatch && theBatch.count() > 0);
                                        }
                                        if (latencyToProcess === EventLatency.Immediate) {
                                            _immediateQueueSize -= theBatch.count();
                                        }
                                        else {
                                            _queueSize -= theBatch.count();
                                        }
                                    });
                                    // Remove all batches from this Queue
                                    batchQueue.batches = [];
                                    batchQueue.iKeyMap = {};
                                }
                                latencyToProcess--;
                            }
                            if (droppedEvents.length > 0) {
                                _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.KillSwitch);
                            }
                            if (eventsQueued && _delayedBatchSendLatency >= latency) {
                                // We have queued events at the same level as the delayed values so clear the setting
                                _delayedBatchSendLatency = -1;
                                _delayedBatchReason = 0 /* Undefined */;
                            }
                        }, function () { return ({ latency: latency, sendType: sendType, sendReason: sendReason }); }, !isAsync);
                    }
                    else {
                        // remember the min latency so that we can re-trigger later
                        _delayedBatchSendLatency = _delayedBatchSendLatency >= 0 ? Math.min(_delayedBatchSendLatency, latency) : latency;
                        _delayedBatchReason = Math.max(_delayedBatchReason, sendReason);
                    }
                    return eventsQueued;
                }
                /**
                 * This is the callback method is called as part of the manual flushing process.
                 * @param callback
                 * @param sendReason
                 */
                function _flushImpl(callback, sendReason) {
                    // Add any additional queued events and cause all queued events to be sent asynchronously
                    _sendEventsForLatencyAndAbove(EventLatency.Normal, 0 /* Batched */, sendReason);
                    _waitForIdleManager(function () {
                        // Only called AFTER the httpManager does not have any outstanding requests
                        if (callback) {
                            callback();
                        }
                        if (_flushCallbackQueue.length > 0) {
                            _flushCallbackTimerId = _createTimer(function () { return _flushImpl(_flushCallbackQueue.shift(), sendReason); }, 0);
                        }
                        else {
                            // No more flush requests
                            _flushCallbackTimerId = null;
                            if (_hasEvents()) {
                                // We still have events, so restart the normal timer schedule
                                _scheduleTimer();
                            }
                        }
                    });
                }
                function _waitForIdleManager(callback) {
                    if (_httpManager.isCompletelyIdle()) {
                        callback();
                    }
                    else {
                        _flushCallbackTimerId = _createTimer(function () {
                            _waitForIdleManager(callback);
                        }, FlushCheckTimer);
                    }
                }
                /**
                 * Resets the transmit profiles to the default profiles of Real Time, Near Real Time
                 * and Best Effort. This removes all the custom profiles that were loaded.
                 */
                function _resetTransmitProfiles() {
                    _clearScheduledTimer();
                    _initializeProfiles();
                    _currentProfile = RT_PROFILE;
                    _scheduleTimer();
                }
                function _initializeProfiles() {
                    _profiles = {};
                    _profiles[RT_PROFILE] = [2, 1, 0];
                    _profiles[NRT_PROFILE] = [6, 3, 0];
                    _profiles[BE_PROFILE] = [18, 9, 0];
                }
                /**
                 * The notification handler for requeue events
                 * @ignore
                 */
                function _requeueEvents(batches, reason) {
                    var droppedEvents = [];
                    var maxSendAttempts = _maxEventSendAttempts;
                    if (_isPageUnloadTriggered) {
                        // If a page unlaod has been triggered reduce the number of times we try to "retry"
                        maxSendAttempts = _maxUnloadEventSendAttempts;
                    }
                    arrForEach(batches, function (theBatch) {
                        if (theBatch && theBatch.count() > 0) {
                            arrForEach(theBatch.events(), function (theEvent) {
                                if (theEvent) {
                                    // Check if the request being added back is for a sync event in which case mark it no longer a sync event
                                    if (theEvent.sync) {
                                        theEvent.latency = EventLatency.Immediate;
                                        theEvent.sync = false;
                                    }
                                    if (theEvent.sendAttempt < maxSendAttempts) {
                                        // Reset the event timings
                                        setProcessTelemetryTimings(theEvent, _self.identifier);
                                        _addEventToQueues(theEvent, false);
                                    }
                                    else {
                                        droppedEvents.push(theEvent);
                                    }
                                }
                            });
                        }
                    });
                    if (droppedEvents.length > 0) {
                        _notifyEvents(strEventsDiscarded, droppedEvents, EventsDiscardedReason.NonRetryableStatus);
                    }
                    if (_isPageUnloadTriggered) {
                        // Unload event has been received so we need to try and flush new events
                        _releaseAllQueues(2 /* SendBeacon */, 2 /* Unload */);
                    }
                }
                function _callNotification(evtName, theArgs) {
                    var manager = (_self._notificationManager || {});
                    var notifyFunc = manager[evtName];
                    if (notifyFunc) {
                        try {
                            notifyFunc.apply(manager, theArgs);
                        }
                        catch (e) {
                            _self.diagLog().throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.NotificationException, evtName + " notification failed: " + e);
                        }
                    }
                }
                function _notifyEvents(evtName, theEvents) {
                    var extraArgs = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        extraArgs[_i - 2] = arguments[_i];
                    }
                    if (theEvents && theEvents.length > 0) {
                        _callNotification(evtName, [theEvents].concat(extraArgs));
                    }
                }
                function _notifyBatchEvents(evtName, batches) {
                    var extraArgs = [];
                    for (var _i = 2; _i < arguments.length; _i++) {
                        extraArgs[_i - 2] = arguments[_i];
                    }
                    if (batches && batches.length > 0) {
                        arrForEach(batches, function (theBatch) {
                            if (theBatch && theBatch.count() > 0) {
                                _callNotification(evtName, [theBatch.events()].concat(extraArgs));
                            }
                        });
                    }
                }
                /**
                 * The notification handler for when batches are about to be sent
                 * @ignore
                 */
                function _sendingEvent(batches, reason, isSyncRequest) {
                    if (batches && batches.length > 0) {
                        _callNotification("eventsSendRequest", [(reason >= 1000 /* SendingUndefined */ && reason <= 1999 /* SendingEventMax */ ?
                                reason - 1000 /* SendingUndefined */ :
                                0 /* Undefined */), isSyncRequest !== true]);
                    }
                }
                /**
                 * This event represents that a batch of events have been successfully sent and a response received
                 * @param batches The notification handler for when the batches have been successfully sent
                 * @param reason For this event the reason will always be EventBatchNotificationReason.Complete
                 */
                function _eventsSentEvent(batches, reason) {
                    _notifyBatchEvents("eventsSent", batches, reason);
                    // Try and schedule the processing timer if we have events
                    _scheduleTimer();
                }
                function _eventsDropped(batches, reason) {
                    _notifyBatchEvents(strEventsDiscarded, batches, (reason >= 8000 /* EventsDropped */ && reason <= 8999 /* EventsDroppedMax */ ?
                        reason - 8000 /* EventsDropped */ :
                        EventsDiscardedReason.Unknown));
                }
                function _eventsResponseFail(batches) {
                    _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.NonRetryableStatus);
                    // Try and schedule the processing timer if we have events
                    _scheduleTimer();
                }
                function _otherEvent(batches, reason) {
                    _notifyBatchEvents(strEventsDiscarded, batches, EventsDiscardedReason.Unknown);
                    // Try and schedule the processing timer if we have events
                    _scheduleTimer();
                }
                function _setAutoLimits() {
                    if (!_config || !_config.disableAutoBatchFlushLimit) {
                        _autoFlushBatchLimit = Math.max(MaxNumberEventPerBatch * (MaxConnections + 1), _queueSizeLimit / 6);
                    }
                    else {
                        _autoFlushBatchLimit = 0;
                    }
                }
            });
            return _this;
        }
    // Removed Stub for PostChannel.prototype.initialize.
    // Removed Stub for PostChannel.prototype.processTelemetry.
    // Removed Stub for PostChannel.prototype.setEventQueueLimits.
    // Removed Stub for PostChannel.prototype.teardown.
    // Removed Stub for PostChannel.prototype.pause.
    // Removed Stub for PostChannel.prototype.resume.
    // Removed Stub for PostChannel.prototype.addResponseHandler.
    // Removed Stub for PostChannel.prototype.flush.
    // Removed Stub for PostChannel.prototype.setMsaAuthTicket.
    // Removed Stub for PostChannel.prototype.hasEvents.
    // Removed Stub for PostChannel.prototype._loadTransmitProfiles.
    // Removed Stub for PostChannel.prototype._setTransmitProfile.
    // Removed Stub for PostChannel.prototype._backOffTransmission.
    // Removed Stub for PostChannel.prototype._clearBackOff.
        return PostChannel;
    }(BaseTelemetryPlugin));
    var PostChannel$1 = PostChannel;

    /*
     * 1DS JS SDK Analytics, 3.1.11
     * Copyright (c) Microsoft and contributors. All rights reserved.
     * (Microsoft Internal Only)
     */
    var ApplicationInsights = /** @class */ (function (_super) {
        __extendsFn(ApplicationInsights, _super);
        function ApplicationInsights() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Initialize the sdk.
         * @param config - The configuration to initialize the SDK.
         * @param extensions - An array of extensions that are to be used by the core.
         */
        ApplicationInsights.prototype.initialize = function (config, extensions) {
            var _this = this;
            var _self = this;
            doPerf(this, function () { return "ApplicationInsights:initialize"; }, function () {
                _self._postChannel = new PostChannel$1();
                _self._propertyManager = new PropertiesPlugin$1();
                var plugins = [_this._propertyManager];
                if (extensions) {
                    plugins = plugins.concat(extensions);
                }
                if (!config) {
                    throwError("You must provide a config object!");
                }
                if (config.channels && config.channels.length > 0) {
                    // Add post channel to first fork if not available
                    var postFound = false;
                    for (var j = 0; j < config.channels[0].length; j++) {
                        if (config.channels[0][j].identifier === _self._postChannel.identifier) {
                            postFound = true;
                            break;
                        }
                    }
                    if (!postFound) {
                        config.channels[0].push(_self._postChannel);
                    }
                }
                else {
                    config.channels = [[_self._postChannel]];
                }
                var extConfig = config.extensionConfig = config.extensionConfig || [];
                extConfig[_self._postChannel.identifier] = config ? config.channelConfiguration : {};
                extConfig[_self._propertyManager.identifier] = config ? config.propertyConfiguration : {};
                try {
                    _super.prototype.initialize.call(_this, config, plugins);
                }
                catch (error) {
                    _self.logger.throwInternal(LoggingSeverity.CRITICAL, _ExtendedInternalMessageId.FailedToInitializeSDK, "Failed to initialize SDK." + dumpObj(error));
                }
            }, function () { return ({ config: config, extensions: extensions }); });
        };
        /**
         * Gets the property manager to set custom properties and system properties (part A), that should be applied
         * to all events or events with a specific instrumentation key.
         * @returns The property manager object.
         */
        ApplicationInsights.prototype.getPropertyManager = function () {
            return this._propertyManager;
        };
        /**
         * Gets the post channel to configure and set the transmission profiles.
         * @returns The post channel object.
         */
        ApplicationInsights.prototype.getPostChannel = function () {
            return this._postChannel;
        };
        return ApplicationInsights;
    }(AppInsightsCore$1));
    var ApplicationInsights$1 = ApplicationInsights;

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var PerformanceTelemetryReporter = /** @class */ (function () {
        function PerformanceTelemetryReporter(logger, configuration) {
            this.logger = logger;
            this.isSampled = !(configuration === null || configuration === void 0 ? void 0 : configuration.disabled) && this.calculateSampling(configuration === null || configuration === void 0 ? void 0 : configuration.samplingPercentage);
            this.logger.verbose("PerformanceTelemetryReporter: Sampled for 1p telemetry: " + this.isSampled.toString());
            this.eventsToEmit = (configuration === null || configuration === void 0 ? void 0 : configuration.eventsToEmit) || [
                PerformanceEvents.AcquireTokenSilent,
                PerformanceEvents.SsoSilent,
                PerformanceEvents.AcquireTokenByCode
            ];
            this.logger.verbose("PerformanceTelemetryReporter: Events to be tracked include : " + this.eventsToEmit);
            this.logger.verbose("PerformanceTelemetryReporter: Events passed in the PerformanceTelemetryConfiguration are: " + (configuration === null || configuration === void 0 ? void 0 : configuration.eventsToEmit));
            var appInsightsConfig = {
                instrumentationKey: PerformanceTelemetryReporter.instrumentationKey,
                extensions: [],
            };
            this.appInsights = new ApplicationInsights$1();
            this.appInsights.initialize(appInsightsConfig, []);
            this.logger.verbose("PerformanceTelemetryReporter: Initialized");
        }
        // Function to calculate Sampling rate stochastically
        PerformanceTelemetryReporter.prototype.calculateSampling = function (configuredSamplingRate) {
            if (configuredSamplingRate === 0) {
                this.logger.verbose(" PerformanceTelemetryReporter: No sampling rate configured.");
                return false;
            }
            this.logger.verbose("PerformanceTelemetryReporter: Configured sampling rate = " + configuredSamplingRate + " ");
            this.logger.verbose("PerformanceTelemetryReporter: DEFAULT sampling rate = " + PerformanceTelemetryReporter.DEFAULT_SAMPLING_RATE);
            var randomNumber = Math.random();
            var samplingRate = configuredSamplingRate || PerformanceTelemetryReporter.DEFAULT_SAMPLING_RATE;
            return randomNumber <= samplingRate;
        };
        PerformanceTelemetryReporter.prototype.sendCustomEvent = function (event) {
            var dataToEmit = __assign$2(__assign$2({}, event), { appName: undefined // Do not emit appName until privacy concerns are resolved
             });
            var event1 = {
                name: event.name,
                data: dataToEmit
            };
            this.logger.verbose("PerformanceTelemetryReporter: Sending " + event1.name + " for tracking");
            this.appInsights.track(event1);
        };
        PerformanceTelemetryReporter.prototype.canSendEvent = function (event) {
            var _a;
            // Is the event included in list of events to report on
            var emitEvent = !this.eventsToEmit || ((_a = this.eventsToEmit) === null || _a === void 0 ? void 0 : _a.indexOf(event.name)) > -1;
            // Is the configured authority in the list of allow clouds
            var allowedCloud = PerformanceTelemetryReporter.DEFAULT_ALLOWED_CLOUDS.some(function (cloud) { return event.authority.indexOf(cloud.toString()) === 0; });
            // Event is sendable if it is sampled, is included in the list of eventsToEmit/passed in the configuration, AND belongs to an allowed cloud
            return this.isSampled && emitEvent && allowedCloud;
        };
        PerformanceTelemetryReporter.prototype.getPerformanceTelemetryCallback = function () {
            var _this = this;
            this.logger.trace("PerformanceTelemetryReporter: Attaching callback to send custom metrics.");
            var perfCallback = function (events) {
                events.forEach(function (event) {
                    if (_this.canSendEvent(event)) {
                        _this.logger.verbose("PerformanceTelemetryReporter: Emitting telemetry for " + event.name, event.correlationId);
                        _this.sendCustomEvent(event);
                    }
                    else {
                        _this.logger.verbose("PerformanceTelemetryReporter: Skipping telemetry for " + event.name, event.correlationId);
                    }
                });
            };
            this.logger.verbose(" PerformanceTelemetryReporter: Returning callback as telemetry emitted.");
            return perfCallback;
        };
        PerformanceTelemetryReporter.DEFAULT_SAMPLING_RATE = 0.1; // Default rate of 10%
        PerformanceTelemetryReporter.DEFAULT_ALLOWED_CLOUDS = [
            AzureCloudInstance.AzurePublic,
            AzureCloudInstance.AzurePpe // TODO: Here for testing, consider removing
        ];
        PerformanceTelemetryReporter.instrumentationKey = "d634483c08244c1ca09af2b2d952c92e-ab2bba03-2ba3-49d8-a82c-ef6da750d8ab-7725";
        return PerformanceTelemetryReporter;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var PublicClientApplication = /** @class */ (function (_super) {
        __extends$2(PublicClientApplication, _super);
        function PublicClientApplication(configuration, firstPartyConfiguration) {
            var _this = _super.call(this, configuration) || this;
            /*
             * TODO: Don't initialize wrapper until eSTS is updated to include new SKU
             * this.initializeWrapperLibrary(WrapperSKU.FirstParty, version);
             */
            var telemetryReporter = new PerformanceTelemetryReporter(_this.getLogger(), firstPartyConfiguration === null || firstPartyConfiguration === void 0 ? void 0 : firstPartyConfiguration.performanceTelemetryConfiguration);
            _this.addPerformanceCallback(telemetryReporter.getPerformanceTelemetryCallback());
            return _this;
        }
        return PublicClientApplication;
    }(PublicClientApplication$1));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerMessageType;
    (function (BrokerMessageType) {
        BrokerMessageType["HANDSHAKE_REQUEST"] = "BrokerHandshakeRequest";
        BrokerMessageType["HANDSHAKE_RESPONSE"] = "BrokerHandshakeResponse";
        BrokerMessageType["AUTH_REQUEST"] = "BrokerAuthRequest";
        BrokerMessageType["REDIRECT_RESPONSE"] = "BrokerRedirectResponse";
        BrokerMessageType["HANDLE_REDIRECT_REQUEST"] = "BrokerHandleRedirectRequest";
        BrokerMessageType["AUTH_RESULT"] = "BrokerAuthResult";
    })(BrokerMessageType || (BrokerMessageType = {}));
    /**
     * Cache keys stored in-memory
     */
    var BrokerCacheKeys;
    (function (BrokerCacheKeys) {
        BrokerCacheKeys["BROKER_RESPONSE"] = "broker.response";
    })(BrokerCacheKeys || (BrokerCacheKeys = {}));
    /**
     * Keys in the hashParams sent by AAD Server
     */
    var BrokerServerParamKeys;
    (function (BrokerServerParamKeys) {
        BrokerServerParamKeys["BROKER_CLIENT_ID"] = "brk_client_id";
        BrokerServerParamKeys["BROKER_REDIRECT_URI"] = "brk_redirect_uri";
    })(BrokerServerParamKeys || (BrokerServerParamKeys = {}));
    var ErrorNames;
    (function (ErrorNames) {
        ErrorNames["BROKER_AUTH_ERROR_NAME"] = "BrokerAuthError";
        ErrorNames["INTERACTION_REQ_ERROR_NAME"] = "InteractionRequiredAuthError";
        ErrorNames["SERVER_ERROR_NAME"] = "ServerError";
        ErrorNames["CLIENT_AUTH_ERR_NAME"] = "ClientAuthError";
        ErrorNames["CLIENT_CONFIG_ERROR_NAME"] = "ClientConfigurationError";
        ErrorNames["BROWSER_AUTH_ERROR_NAME"] = "BrowserAuthError";
        ErrorNames["BROWSER_CONFIG_ERROR_NAME"] = "BrowserConfigurationError";
        ErrorNames["AUTH_ERROR_NAME"] = "AuthError";
    })(ErrorNames || (ErrorNames = {}));
    var AUTHORIZATION_CODE_GRANT = "authorization_code";
    var REFRESH_TOKEN_GRANT = "refresh_token";
    var CODE_CHALLENGE_METHOD_PLAIN = "plain";
    var CODE_CHALLENGE_METHOD_S256 = "S256";
    var DEFAULT_BROKER_HANDSHAKE_TIMEOUT = 2000;
    var DEFAULT_SILENT_MESSAGE_TIMEOUT = 6000;
    var DEFAULT_INTERACTIVE_MESSAGE_TIMEOUT = 300000;

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerMessage = /** @class */ (function () {
        function BrokerMessage(messageType) {
            this.messageType = messageType;
        }
        BrokerMessage.validateMessage = function (message) {
            if (message.data && message.data.messageType) {
                switch (message.data.messageType) {
                    case BrokerMessageType.HANDSHAKE_REQUEST:
                    case BrokerMessageType.HANDSHAKE_RESPONSE:
                    case BrokerMessageType.HANDLE_REDIRECT_REQUEST:
                    case BrokerMessageType.AUTH_REQUEST:
                    case BrokerMessageType.AUTH_RESULT:
                    case BrokerMessageType.REDIRECT_RESPONSE:
                        return message;
                    default:
                        return null;
                }
            }
            else {
                return null;
            }
        };
        return BrokerMessage;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for handshake requests.
     */
    var BrokerHandshakeRequest = /** @class */ (function (_super) {
        __extends$2(BrokerHandshakeRequest, _super);
        function BrokerHandshakeRequest(embeddedClientId, version) {
            var _this = _super.call(this, BrokerMessageType.HANDSHAKE_REQUEST) || this;
            _this.embeddedClientId = embeddedClientId;
            _this.version = version;
            return _this;
        }
        BrokerHandshakeRequest.validate = function (message) {
            // First, validate message type
            if (message.data &&
                message.data.messageType === BrokerMessageType.HANDSHAKE_REQUEST &&
                message.data.embeddedClientId &&
                message.data.version) {
                return new BrokerHandshakeRequest(message.data.embeddedClientId, message.data.version);
            }
            return null;
        };
        return BrokerHandshakeRequest;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * BrowserAuthErrorMessage class containing string constants used by error codes and messages.
     */
    var BrokerAuthErrorMessage = {
        noTokensToCacheError: {
            code: "no_tokens_to_cache",
            desc: "The broker did not have any tokens for the client to cache."
        },
        noEmbeddedAppError: {
            code: "no_embedded_app",
            desc: "The embedded application object was not created. Please ensure you have configured your application correctly for an embedded application: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/broker-v2/lib/msal-browser/docs/broker.md#brokered-application-configuration"
        },
        brokerResponseInvalidError: {
            code: "broker_response_invalid",
            desc: "The broker response did not have the expected values."
        },
        brokerRequestIncompleteError: {
            code: "broker_request_incomplete",
            desc: "The brokered request did not have the expected values."
        },
        brokeredPopupRequestRedirecting: {
            code: "broker_popup_will_redirect",
            desc: "The request for a brokered popup requires a redirect by the broker. If your app does not perform the redirect, please check the broker's logs."
        },
        brokerTimeoutError: {
            code: "broker_timeout",
            desc: "Message broker timed out."
        },
        brokerHandshakeTimeoutError: {
            code: "broker_handshake_timeout",
            desc: "Broker handshake response timed out."
        },
        invalidBrokerMessage: {
            code: "invalid_broker_message",
            desc: "messageType for broker message is invalid"
        },
        untrustedBrokerError: {
            code: "untrusted_broker_error",
            desc: "The given broker origin is not trusted."
        },
        noTrustedBrokersProvided: {
            code: "no_trusted_brokers_provided",
            desc: "No trusted brokers provided."
        },
        brokeringDisabledError: {
            code: "brokering_disabled",
            desc: "Brokering is not enabled for the client application. Please check logs to see if handshake was performed."
        },
    };
    /**
     * Browser library error class thrown by the MSAL.js library for SPAs
     */
    var BrokerAuthError = /** @class */ (function (_super) {
        __extends$2(BrokerAuthError, _super);
        function BrokerAuthError(errorCode, errorMessage) {
            var _this = _super.call(this, errorCode, errorMessage) || this;
            Object.setPrototypeOf(_this, BrokerAuthError.prototype);
            _this.name = ErrorNames.BROKER_AUTH_ERROR_NAME;
            return _this;
        }
        /**
         * Creates an error thrown when PKCE is not implemented.
         */
        BrokerAuthError.createNoTokensToCacheError = function () {
            return new BrokerAuthError(BrokerAuthErrorMessage.noTokensToCacheError.code, "" + BrokerAuthErrorMessage.noTokensToCacheError.desc);
        };
        BrokerAuthError.createNoEmbeddedAppError = function () {
            return new BrokerAuthError(BrokerAuthErrorMessage.noEmbeddedAppError.code, BrokerAuthErrorMessage.noEmbeddedAppError.desc);
        };
        /**
         * Creates an error thrown when the broker response is invalid.
         * @param errDetail
         */
        BrokerAuthError.createBrokerResponseInvalidError = function () {
            return new BrokerAuthError(BrokerAuthErrorMessage.brokerResponseInvalidError.code, "" + BrokerAuthErrorMessage.brokerResponseInvalidError.desc);
        };
        /**
         * Creates an error thrown when the broker response is invalid.
         */
        BrokerAuthError.createBrokerRequestIncompleteError = function () {
            return new BrokerAuthError(BrokerAuthErrorMessage.brokerRequestIncompleteError.code, "" + BrokerAuthErrorMessage.brokerRequestIncompleteError.desc);
        };
        /**
         * Creates an error thrown when the broker response is invalid.
         * @param errDetail
         */
        BrokerAuthError.createBrokerPopupRequestRedirectingError = function () {
            return new BrokerAuthError(BrokerAuthErrorMessage.brokeredPopupRequestRedirecting.code, BrokerAuthErrorMessage.brokeredPopupRequestRedirecting.desc);
        };
        BrokerAuthError.createNoTrustedBrokersProvidedError = function () {
            return new BrowserAuthError(BrokerAuthErrorMessage.noTrustedBrokersProvided.code, BrokerAuthErrorMessage.noTrustedBrokersProvided.desc);
        };
        BrokerAuthError.createBrokeringDisabledError = function (innerError) {
            return new BrowserAuthError(BrokerAuthErrorMessage.brokeringDisabledError.code, BrokerAuthErrorMessage.brokeringDisabledError.desc + " Inner Error: " + innerError);
        };
        BrokerAuthError.createMessageBrokerTimeoutError = function () {
            return new BrowserAuthError(BrokerAuthErrorMessage.brokerTimeoutError.code, BrokerAuthErrorMessage.brokerTimeoutError.desc);
        };
        BrokerAuthError.createMessageBrokerHandshakeTimeoutError = function () {
            return new BrowserAuthError(BrokerAuthErrorMessage.brokerHandshakeTimeoutError.code, BrokerAuthErrorMessage.brokerHandshakeTimeoutError.desc);
        };
        BrokerAuthError.createInvalidBrokerMessageError = function () {
            return new BrowserAuthError(BrokerAuthErrorMessage.invalidBrokerMessage.code, BrokerAuthErrorMessage.invalidBrokerMessage.desc);
        };
        BrokerAuthError.createUntrustedBrokerError = function () {
            return new BrowserAuthError(BrokerAuthErrorMessage.untrustedBrokerError.code, BrokerAuthErrorMessage.untrustedBrokerError.desc);
        };
        return BrokerAuthError;
    }(BrowserAuthError));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for responses to BrokerHandshakeRequests
     */
    var BrokerHandshakeResponse = /** @class */ (function (_super) {
        __extends$2(BrokerHandshakeResponse, _super);
        function BrokerHandshakeResponse(version, brokerOrigin) {
            var _this = _super.call(this, BrokerMessageType.HANDSHAKE_RESPONSE) || this;
            _this.version = version;
            _this.brokerOrigin = brokerOrigin;
            return _this;
        }
        /**
         * Validate broker handshake
         * @param message
         * @param trustedBrokerDomains
         */
        BrokerHandshakeResponse.validate = function (message, trustedBrokerDomains) {
            // First, validate message type
            var validMessage = BrokerMessage.validateMessage(message);
            if (trustedBrokerDomains &&
                validMessage &&
                validMessage.data.messageType === BrokerMessageType.HANDSHAKE_RESPONSE &&
                validMessage.data.version) {
                var matchedDomains = trustedBrokerDomains.filter(function (domain) { return StringUtils.matchPattern(domain, message.origin); });
                if (matchedDomains.length <= 0) {
                    throw BrokerAuthError.createUntrustedBrokerError();
                }
                return new BrokerHandshakeResponse(validMessage.data.version, validMessage.origin);
            }
            return null;
        };
        return BrokerHandshakeResponse;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for auth requests
     */
    var BrokerAuthRequest = /** @class */ (function (_super) {
        __extends$2(BrokerAuthRequest, _super);
        function BrokerAuthRequest(embeddedClientId, interactionType, request, embeddedAppRedirectUri) {
            var _this = _super.call(this, BrokerMessageType.AUTH_REQUEST) || this;
            _this.embeddedClientId = embeddedClientId;
            _this._embeddedAppOrigin = embeddedAppRedirectUri;
            _this.interactionType = interactionType;
            _this.request = request;
            return _this;
        }
        Object.defineProperty(BrokerAuthRequest.prototype, "embeddedAppOrigin", {
            get: function () {
                return this._embeddedAppOrigin;
            },
            enumerable: false,
            configurable: true
        });
        BrokerAuthRequest.validate = function (message) {
            // First, validate message type
            if (message.data &&
                message.data.messageType === BrokerMessageType.AUTH_REQUEST &&
                message.data.embeddedClientId &&
                message.data.interactionType &&
                message.data.request) {
                return new BrokerAuthRequest(message.data.embeddedClientId, message.data.interactionType, message.data.request, message.origin);
            }
            return null;
        };
        return BrokerAuthRequest;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for responses to BrokerHandleRedirectRequests
     */
    var BrokerRedirectResponse = /** @class */ (function (_super) {
        __extends$2(BrokerRedirectResponse, _super);
        function BrokerRedirectResponse() {
            return _super.call(this, BrokerMessageType.REDIRECT_RESPONSE) || this;
        }
        BrokerRedirectResponse.validate = function (message) {
            if (message.data && message.data.messageType === BrokerMessageType.REDIRECT_RESPONSE) {
                return new BrokerRedirectResponse();
            }
            else {
                return null;
            }
        };
        return BrokerRedirectResponse;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for responses to BrokerAuthRequests
     */
    var BrokerAuthResponse = /** @class */ (function (_super) {
        __extends$2(BrokerAuthResponse, _super);
        function BrokerAuthResponse(interactionType, authResult, authError) {
            var _this = _super.call(this, BrokerMessageType.AUTH_RESULT) || this;
            _this.interactionType = interactionType;
            _this.result = authResult;
            _this.errorPayload = _this.generateErrorPayload(authError);
            return _this;
        }
        BrokerAuthResponse.prototype.generateErrorPayload = function (authError) {
            return !authError ? undefined : __assign$2({}, authError);
        };
        BrokerAuthResponse.validate = function (message) {
            if (message.data &&
                message.data.messageType === BrokerMessageType.AUTH_RESULT &&
                message.data.interactionType &&
                (message.data.result || message.data.errorPayload)) {
                return new BrokerAuthResponse(message.data.interactionType, message.data.result, message.data.errorPayload);
            }
            return null;
        };
        BrokerAuthResponse.detectError = function (errPayload) {
            switch (errPayload.name) {
                case ErrorNames.INTERACTION_REQ_ERROR_NAME:
                    return new InteractionRequiredAuthError(errPayload.errorCode, errPayload.errorMessage, errPayload.subError);
                case ErrorNames.SERVER_ERROR_NAME:
                    return new ServerError(errPayload.errorCode, errPayload.errorMessage, errPayload.subError);
                case ErrorNames.CLIENT_AUTH_ERR_NAME:
                    return new ClientAuthError(errPayload.errorCode, errPayload.errorMessage);
                case ErrorNames.CLIENT_CONFIG_ERROR_NAME:
                    return new ClientConfigurationError(errPayload.errorCode, errPayload.errorMessage);
                case ErrorNames.BROWSER_AUTH_ERROR_NAME:
                    return new BrowserAuthError(errPayload.errorCode, errPayload.errorMessage);
                case ErrorNames.BROWSER_CONFIG_ERROR_NAME:
                    return new BrowserConfigurationAuthError(errPayload.errorCode, errPayload.errorMessage);
                case ErrorNames.BROKER_AUTH_ERROR_NAME:
                    return new BrokerAuthError(errPayload.errorCode, errPayload.errorMessage);
                case ErrorNames.AUTH_ERROR_NAME:
                    return new AuthError(errPayload.errorCode, errPayload.errorMessage, errPayload.subError);
                default:
                    return AuthError.createUnexpectedError("Unknown error: " + JSON.stringify(errPayload));
            }
        };
        BrokerAuthResponse.processBrokerResponseMessage = function (brokerAuthResultMessage, browserStorage) {
            var brokerAuthResult = BrokerAuthResponse.validate(brokerAuthResultMessage);
            return BrokerAuthResponse.processBrokerResponse(brokerAuthResult, browserStorage);
        };
        BrokerAuthResponse.processBrokerResponse = function (brokerAuthResult, browserStorage) {
            if (!brokerAuthResult) {
                return null;
            }
            if (brokerAuthResult.errorPayload) {
                throw BrokerAuthResponse.detectError(brokerAuthResult.errorPayload);
            }
            if (!brokerAuthResult.result || !brokerAuthResult.result.tokensToCache) {
                // If we reach here without a result object or tokensToCache, throw error as it is an unexpected code path.
                throw BrokerAuthError.createBrokerResponseInvalidError();
            }
            var accessTokenEntity = new AccessTokenEntity();
            var idTokenEntity = new IdTokenEntity();
            var accountEntity = new AccountEntity();
            var tokensToCache = brokerAuthResult.result.tokensToCache;
            var cacheRecord = {
                accessToken: CacheManager.toObject(tokensToCache.accessToken, accessTokenEntity),
                idToken: CacheManager.toObject(tokensToCache.idToken, idTokenEntity),
                account: CacheManager.toObject(tokensToCache.account, accountEntity),
                refreshToken: null,
                appMetadata: null
            };
            browserStorage.saveCacheRecord(cacheRecord);
            delete brokerAuthResult.result.tokensToCache;
            return __assign$2({}, brokerAuthResult.result);
        };
        return BrokerAuthResponse;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Message type for handle redirect requests
     */
    var BrokerHandleRedirectRequest = /** @class */ (function (_super) {
        __extends$2(BrokerHandleRedirectRequest, _super);
        function BrokerHandleRedirectRequest(embeddedClientId, version) {
            var _this = _super.call(this, BrokerMessageType.HANDLE_REDIRECT_REQUEST) || this;
            _this.embeddedClientId = embeddedClientId;
            _this.version = version;
            return _this;
        }
        /**
         * Validate broker "handle redirect" request
         * @param message
         * @param trustedBrokerDomains
         */
        BrokerHandleRedirectRequest.validate = function (message) {
            // First, validate message type
            if (message.data &&
                message.data.messageType === BrokerMessageType.HANDLE_REDIRECT_REQUEST &&
                message.data.embeddedClientId &&
                message.data.version) {
                return new BrokerHandleRedirectRequest(message.data.embeddedClientId, message.data.version);
            }
            return null;
        };
        return BrokerHandleRedirectRequest;
    }(BrokerMessage));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    function buildExperimentalConfiguration(_a) {
        var userBrokerOpts = _a.brokerOptions;
        // Default broker options for browser
        var DEFAULT_BROKER_OPTIONS = {
            preferredInteractionType: null,
            brokerRedirectParams: {},
            actAsBroker: false,
            allowBrokering: false,
            trustedBrokerDomains: [],
            brokerHandshakeTimeout: (userBrokerOpts === null || userBrokerOpts === void 0 ? void 0 : userBrokerOpts.brokerHandshakeTimeout) || DEFAULT_BROKER_HANDSHAKE_TIMEOUT,
            brokerMessageTimeout: (userBrokerOpts === null || userBrokerOpts === void 0 ? void 0 : userBrokerOpts.brokerMessageTimeout) || DEFAULT_SILENT_MESSAGE_TIMEOUT,
            brokerInteractionTimeout: (userBrokerOpts === null || userBrokerOpts === void 0 ? void 0 : userBrokerOpts.brokerInteractionTimeout) || DEFAULT_INTERACTIVE_MESSAGE_TIMEOUT
        };
        var overlayedExperimentalConfig = {
            brokerOptions: __assign$2(__assign$2({}, DEFAULT_BROKER_OPTIONS), userBrokerOpts)
        };
        return overlayedExperimentalConfig;
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Validates server consumable params from the "request" objects
     */
    var RequestValidator = /** @class */ (function () {
        function RequestValidator() {
        }
        /**
         * Utility to check if the `redirectUri` in the request is a non-null value
         * @param redirectUri
         */
        RequestValidator.validateRedirectUri = function (redirectUri) {
            if (StringUtils.isEmpty(redirectUri)) {
                throw ClientConfigurationError.createRedirectUriEmptyError();
            }
        };
        /**
         * Utility to validate prompt sent by the user in the request
         * @param prompt
         */
        RequestValidator.validatePrompt = function (prompt) {
            var promptValues = [];
            for (var value in PromptValue) {
                promptValues.push(PromptValue[value]);
            }
            if (promptValues.indexOf(prompt) < 0) {
                throw ClientConfigurationError.createInvalidPromptError(prompt);
            }
        };
        RequestValidator.validateClaims = function (claims) {
            try {
                JSON.parse(claims);
            }
            catch (e) {
                throw ClientConfigurationError.createInvalidClaimsRequestError();
            }
        };
        /**
         * Utility to validate code_challenge and code_challenge_method
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
            else {
                this.validateCodeChallengeMethod(codeChallengeMethod);
            }
        };
        /**
         * Utility to validate code_challenge_method
         * @param codeChallengeMethod
         */
        RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {
            if ([
                CODE_CHALLENGE_METHOD_PLAIN,
                CODE_CHALLENGE_METHOD_S256
            ].indexOf(codeChallengeMethod) < 0) {
                throw ClientConfigurationError.createInvalidCodeChallengeMethodError();
            }
        };
        /**
         * Removes unnecessary or duplicate query parameters from extraQueryParameters
         * @param request
         */
        RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {
            if (!eQParams) {
                return {};
            }
            // Remove any query parameters already included in SSO params
            queryParams.forEach(function (value, key) {
                if (eQParams[key]) {
                    delete eQParams[key];
                }
            });
            return eQParams;
        };
        return RequestValidator;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var RequestParameterBuilder = /** @class */ (function () {
        function RequestParameterBuilder() {
            this.parameters = new Map();
        }
        /**
         * add response_type = code
         */
        RequestParameterBuilder.prototype.addResponseTypeCode = function () {
            this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE));
        };
        /**
         * add response_mode. defaults to query.
         * @param responseMode
         */
        RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {
            this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY));
        };
        /**
         * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios
         * @param scopeSet
         * @param addOidcScopes
         */
        RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {
            if (addOidcScopes === void 0) { addOidcScopes = true; }
            var requestScopes = addOidcScopes ? __spread$1(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];
            var scopeSet = new ScopeSet(requestScopes);
            this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));
        };
        /**
         * add clientId
         * @param clientId
         */
        RequestParameterBuilder.prototype.addClientId = function (clientId) {
            this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));
        };
        /**
         * Add clientId for broker
         * @param clientId
         */
        RequestParameterBuilder.prototype.addBrokerClientId = function (clientId) {
            this.parameters.set(BrokerServerParamKeys.BROKER_CLIENT_ID, encodeURIComponent(clientId));
        };
        /**
         * add redirect_uri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri, clientId) {
            RequestValidator.validateRedirectUri(redirectUri);
            if (!clientId) {
                this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));
            }
            else {
                var brokerRedirectUri = this.buildRedirectUri(redirectUri, clientId);
                this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(brokerRedirectUri));
            }
        };
        /**
         * build redirect uri in broker pattern
         * @param redirectUri
         * @param clientId
         */
        RequestParameterBuilder.prototype.buildRedirectUri = function (redirectUri, clientId) {
            var urlString = new UrlString(redirectUri);
            var brokerRedirectUri = "brk-" + clientId + "://" + urlString.getUrlComponents().HostNameAndPort;
            return brokerRedirectUri;
        };
        /**
         * add redirect_uri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addBrokerRedirectUri = function (redirectUri) {
            this.parameters.set(BrokerServerParamKeys.BROKER_REDIRECT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add post logout redirectUri
         * @param redirectUri
         */
        RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {
            RequestValidator.validateRedirectUri(redirectUri);
            this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));
        };
        /**
         * add id_token_hint to logout request
         * @param idTokenHint
         */
        RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {
            this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));
        };
        /**
         * add domain_hint
         * @param domainHint
         */
        RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {
            this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));
        };
        /**
         * add login_hint
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {
            this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));
        };
        /**
         * Adds the CCS (Cache Credential Service) query parameter for login_hint
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {
            this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent("UPN:" + loginHint));
        };
        /**
         * Adds the CCS (Cache Credential Service) query parameter for account object
         * @param loginHint
         */
        RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {
            this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent("Oid:" + clientInfo.uid + "@" + clientInfo.utid));
        };
        /**
         * add sid
         * @param sid
         */
        RequestParameterBuilder.prototype.addSid = function (sid) {
            this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));
        };
        /**
         * add claims
         * @param claims
         */
        RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {
            var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);
            RequestValidator.validateClaims(mergedClaims);
            this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));
        };
        /**
         * add correlationId
         * @param correlationId
         */
        RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {
            this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));
        };
        /**
         * add library info query params
         * @param libraryInfo
         */
        RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {
            // Telemetry Info
            this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);
            this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);
            this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);
            this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);
        };
        /**
         * add prompt
         * @param prompt
         */
        RequestParameterBuilder.prototype.addPrompt = function (prompt) {
            RequestValidator.validatePrompt(prompt);
            this.parameters.set("" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));
        };
        /**
         * add state
         * @param state
         */
        RequestParameterBuilder.prototype.addState = function (state) {
            if (!StringUtils.isEmpty(state)) {
                this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));
            }
        };
        /**
         * add nonce
         * @param nonce
         */
        RequestParameterBuilder.prototype.addNonce = function (nonce) {
            this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));
        };
        /**
         * add code_challenge and code_challenge_method
         * - throw if either of them are not passed
         * @param codeChallenge
         * @param codeChallengeMethod
         */
        RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {
            RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);
            if (codeChallenge && codeChallengeMethod) {
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));
                this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));
            }
            else {
                throw ClientConfigurationError.createInvalidCodeChallengeParamsError();
            }
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {
            this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));
        };
        /**
         * add the `authorization_code` passed by the user to exchange for a token
         * @param code
         */
        RequestParameterBuilder.prototype.addDeviceCode = function (code) {
            this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));
        };
        /**
         * add the `refreshToken` passed by the user
         * @param refreshToken
         */
        RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {
            this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));
        };
        /**
         * add the `code_verifier` passed by the user to exchange for a token
         * @param codeVerifier
         */
        RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {
            this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));
        };
        /**
         * add client_secret
         * @param clientSecret
         */
        RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {
            this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));
        };
        /**
         * add clientAssertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {
            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));
        };
        /**
         * add clientAssertionType for confidential client flows
         * @param clientAssertionType
         */
        RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {
            this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));
        };
        /**
         * add OBO assertion for confidential client flows
         * @param clientAssertion
         */
        RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {
            this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {
            this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));
        };
        /**
         * add grant type
         * @param grantType
         */
        RequestParameterBuilder.prototype.addGrantType = function (grantType) {
            this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));
        };
        /**
         * add client info
         *
         */
        RequestParameterBuilder.prototype.addClientInfo = function () {
            this.parameters.set(AADServerParamKeys.CLIENT_INFO, "1");
        };
        /**
         * add extraQueryParams
         * @param eQparams
         */
        RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {
            var _this = this;
            RequestValidator.sanitizeEQParams(eQparams, this.parameters);
            Object.keys(eQparams).forEach(function (key) {
                _this.parameters.set(key, eQparams[key]);
            });
        };
        RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {
            var mergedClaims;
            // Parse provided claims into JSON object or initialize empty object
            if (!claims) {
                mergedClaims = {};
            }
            else {
                try {
                    mergedClaims = JSON.parse(claims);
                }
                catch (e) {
                    throw ClientConfigurationError.createInvalidClaimsRequestError();
                }
            }
            if (clientCapabilities && clientCapabilities.length > 0) {
                if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {
                    // Add access_token key to claims object
                    mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};
                }
                // Add xms_cc claim with provided clientCapabilities to access_token key
                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {
                    values: clientCapabilities
                };
            }
            return JSON.stringify(mergedClaims);
        };
        /**
         * adds `username` for Password Grant flow
         * @param username
         */
        RequestParameterBuilder.prototype.addUsername = function (username) {
            this.parameters.set(PasswordGrantConstants.username, username);
        };
        /**
         * adds `password` for Password Grant flow
         * @param password
         */
        RequestParameterBuilder.prototype.addPassword = function (password) {
            this.parameters.set(PasswordGrantConstants.password, password);
        };
        /**
         * add pop_jwk to query params
         * @param cnfString
         */
        RequestParameterBuilder.prototype.addPopToken = function (cnfString) {
            if (!StringUtils.isEmpty(cnfString)) {
                this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.POP);
                this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));
            }
        };
        /**
         * add SSH JWK and key ID to query params
         */
        RequestParameterBuilder.prototype.addSshJwk = function (sshJwkString) {
            if (!StringUtils.isEmpty(sshJwkString)) {
                this.parameters.set(AADServerParamKeys.TOKEN_TYPE, exports.AuthenticationScheme.SSH);
                this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(sshJwkString));
            }
        };
        /**
         * add server telemetry fields
         * @param serverTelemetryManager
         */
        RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {
            this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());
            this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());
        };
        /**
         * Adds parameter that indicates to the server that throttling is supported
         */
        RequestParameterBuilder.prototype.addThrottling = function () {
            this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);
        };
        /**
         * Adds logout_hint parameter for "silent" logout which prevent server account picker
         */
        RequestParameterBuilder.prototype.addLogoutHint = function (logoutHint) {
            this.parameters.set(AADServerParamKeys.LOGOUT_HINT, encodeURIComponent(logoutHint));
        };
        /**
         * Utility to create a URL from the params map
         */
        RequestParameterBuilder.prototype.createQueryString = function () {
            var queryParameterArray = new Array();
            this.parameters.forEach(function (value, key) {
                queryParameterArray.push(key + "=" + value);
            });
            return queryParameterArray.join("&");
        };
        return RequestParameterBuilder;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var CacheRecord = /** @class */ (function () {
        function CacheRecord(accountEntity, idTokenEntity, accessTokenEntity, refreshTokenEntity, appMetadataEntity) {
            this.account = accountEntity || null;
            this.idToken = idTokenEntity || null;
            this.accessToken = accessTokenEntity || null;
            this.refreshToken = refreshTokenEntity || null;
            this.appMetadata = appMetadataEntity || null;
        }
        return CacheRecord;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerResponseHandler = /** @class */ (function () {
        function BrokerResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {
            this.clientId = clientId;
            this.cacheStorage = cacheStorage;
            this.cryptoObj = cryptoObj;
            this.logger = logger;
            this.serializableCache = serializableCache;
            this.persistencePlugin = persistencePlugin;
            this.homeAccountIdentifier = "";
        }
        /**
         * Function which validates server authorization code response.
         * @param serverResponseHash
         * @param cachedState
         * @param cryptoObj
         */
        BrokerResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {
            if (!serverResponseHash.state || !cachedState) {
                throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError("Server State") : ClientAuthError.createStateNotFoundError("Cached State");
            }
            if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {
                throw ClientAuthError.createStateMismatchError();
            }
            // Check for error
            if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
                }
                throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);
            }
            if (serverResponseHash.client_info) {
                buildClientInfo(serverResponseHash.client_info, cryptoObj);
            }
        };
        /**
         * Function which validates server authorization token response.
         * @param serverResponse
         */
        BrokerResponseHandler.prototype.validateTokenResponse = function (serverResponse) {
            // Check for error
            if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {
                if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {
                    throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);
                }
                var errString = serverResponse.error_codes + " - [" + serverResponse.timestamp + "]: " + serverResponse.error_description + " - Correlation ID: " + serverResponse.correlation_id + " - Trace ID: " + serverResponse.trace_id;
                throw new ServerError(serverResponse.error, errString, serverResponse.suberror);
            }
        };
        /**
         * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
         * @param serverTokenResponse
         * @param authority
         */
        BrokerResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {
            return __awaiter$2(this, void 0, void 0, function () {
                var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (serverTokenResponse.id_token) {
                                idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);
                                // token nonce check (TODO: Add a warning if no nonce is given?)
                                if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {
                                    if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                        throw ClientAuthError.createNonceMismatchError();
                                    }
                                }
                            }
                            // generate homeAccountId
                            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                            if (!!authCodePayload && !!authCodePayload.state) {
                                requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                            }
                            // Add keyId from request to serverTokenResponse if defined
                            serverTokenResponse.key_id = serverTokenResponse.key_id || request.sshKid || undefined;
                            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 5, 8]);
                            if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];
                            this.logger.verbose("Persistence enabled, calling beforeCacheAccess");
                            cacheContext = new TokenCacheContext(this.serializableCache, true);
                            return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3:
                            /*
                             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.
                             * If not present, we should return null, as it's the case that another application called removeAccount in between
                             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.
                             */
                            if (handlingRefreshTokenResponse && cacheRecord.account) {
                                key = cacheRecord.account.generateAccountKey();
                                account = this.cacheStorage.getAccount(key);
                                if (!account) {
                                    this.logger.warning("Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache");
                                    return [2 /*return*/, BrokerResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];
                                }
                            }
                            return [4 /*yield*/, this.cacheStorage.saveCacheRecord(cacheRecord)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 5:
                            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 7];
                            this.logger.verbose("Persistence enabled, calling afterCacheAccess");
                            return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];
                        case 6:
                            _a.sent();
                            _a.label = 7;
                        case 7: return [7 /*endfinally*/];
                        case 8: return [2 /*return*/, BrokerResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj, serverTokenResponse.spa_code)];
                    }
                });
            });
        };
        BrokerResponseHandler.prototype.handleBrokeredServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, embeddedAppOrigin, authCodePayload, oboAssertion) {
            return __awaiter$2(this, void 0, void 0, function () {
                var idTokenObj, requestStateObj, cacheRecord, result, responseThumbprint;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (serverTokenResponse.id_token) {
                                idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);
                                // token nonce check (TODO: Add a warning if no nonce is given?)
                                if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {
                                    if (idTokenObj.claims.nonce !== authCodePayload.nonce) {
                                        throw ClientAuthError.createNonceMismatchError();
                                    }
                                }
                            }
                            // generate homeAccountId
                            this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);
                            if (!!authCodePayload && !!authCodePayload.state) {
                                requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);
                            }
                            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload, request.embeddedAppClientId);
                            if (!!cacheRecord.refreshToken) {
                                this.cacheStorage.setRefreshTokenCredential(cacheRecord.refreshToken);
                            }
                            if (!!cacheRecord.account) {
                                this.cacheStorage.setAccount(cacheRecord.account);
                            }
                            cacheRecord.refreshToken = null;
                            return [4 /*yield*/, BrokerResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];
                        case 1:
                            result = _a.sent();
                            responseThumbprint = this.generateResponseThumbprint(authority, request.scopes, request.embeddedAppClientId, embeddedAppOrigin);
                            return [2 /*return*/, __assign$2(__assign$2({}, result), { tokensToCache: cacheRecord, responseThumbprint: responseThumbprint })];
                    }
                });
            });
        };
        /**
         * Generates CacheRecord
         * @param serverTokenResponse
         * @param idTokenObj
         * @param authority
         */
        BrokerResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, request, idTokenObj, oboAssertion, authCodePayload, embeddedClientId) {
            var env = authority.getPreferredCache();
            if (StringUtils.isEmpty(env)) {
                throw ClientAuthError.createInvalidCacheEnvironmentError();
            }
            // IdToken: non AAD scenarios can have empty realm
            var cachedIdToken;
            var cachedAccount;
            if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {
                cachedIdToken = IdTokenEntity.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants.EMPTY_STRING, embeddedClientId || this.clientId, idTokenObj.claims.tid || Constants.EMPTY_STRING);
                cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);
            }
            // AccessToken
            var cachedAccessToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {
                // If scopes not returned in server response, use request scopes
                var responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(request.scopes || []);
                /*
                 * Use timestamp calculated before request
                 * Server may return timestamps as strings, parse to numbers if so.
                 */
                var expiresIn = (typeof serverTokenResponse.expires_in === "string" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;
                var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === "string" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;
                var refreshIn = (typeof serverTokenResponse.refresh_in === "string" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;
                var tokenExpirationSeconds = reqTimestamp + expiresIn;
                var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;
                var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;
                // non AAD scenarios can have empty realm
                cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants.EMPTY_STRING, embeddedClientId || this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);
            }
            // refreshToken
            var cachedRefreshToken = null;
            if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {
                cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);
            }
            // appMetadata
            var cachedAppMetadata = null;
            if (!StringUtils.isEmpty(serverTokenResponse.foci)) {
                cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(embeddedClientId || this.clientId, env, serverTokenResponse.foci);
            }
            return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);
        };
        /**
         * Generate Account
         * @param serverTokenResponse
         * @param idToken
         * @param authority
         */
        BrokerResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {
            var authorityType = authority.authorityType;
            var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : "";
            var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : "";
            // ADFS does not require client_info in the response
            if (authorityType === AuthorityType.Adfs) {
                this.logger.verbose("Authority type is ADFS, creating ADFS account");
                return AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
            }
            // This fallback applies to B2C as well as they fall under an AAD account type.
            if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === "AAD") {
                throw ClientAuthError.createClientInfoEmptyError();
            }
            return serverTokenResponse.client_info ?
                AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost) :
                AccountEntity.createGenericAccount(this.homeAccountIdentifier, idToken, authority, oboAssertion, cloudGraphHostName, msGraphhost);
        };
        /**
         * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.
         *
         * Optionally takes a state string that is set as-is in the response.
         *
         * @param cacheRecord
         * @param idTokenObj
         * @param fromTokenCache
         * @param stateString
         */
        BrokerResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState, code) {
            var _a, _b, _c;
            return __awaiter$2(this, void 0, void 0, function () {
                var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, _d, secret, keyId, uid, tid;
                return __generator$2(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            accessToken = "";
                            responseScopes = [];
                            expiresOn = null;
                            familyId = Constants.EMPTY_STRING;
                            if (!cacheRecord.accessToken) return [3 /*break*/, 4];
                            if (!(cacheRecord.accessToken.tokenType === exports.AuthenticationScheme.POP && cacheRecord.accessToken.keyId)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(cryptoObj);
                            _d = cacheRecord.accessToken, secret = _d.secret, keyId = _d.keyId;
                            if (!keyId) {
                                throw ClientAuthError.createKeyIdMissingError();
                            }
                            return [4 /*yield*/, popTokenGenerator.signPopToken(secret, keyId, request)];
                        case 1:
                            accessToken = _e.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            accessToken = cacheRecord.accessToken.secret;
                            _e.label = 3;
                        case 3:
                            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();
                            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);
                            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);
                            _e.label = 4;
                        case 4:
                            if (cacheRecord.appMetadata) {
                                familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;
                            }
                            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants.EMPTY_STRING;
                            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants.EMPTY_STRING;
                            return [2 /*return*/, {
                                    authority: authority.canonicalAuthority,
                                    uniqueId: uid,
                                    tenantId: tid,
                                    scopes: responseScopes,
                                    account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,
                                    idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,
                                    idTokenClaims: idTokenObj ? idTokenObj.claims : {},
                                    accessToken: accessToken,
                                    fromCache: fromTokenCache,
                                    expiresOn: expiresOn,
                                    correlationId: request.correlationId,
                                    extExpiresOn: extExpiresOn,
                                    familyId: familyId,
                                    tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants.EMPTY_STRING,
                                    state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,
                                    cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants.EMPTY_STRING,
                                    msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants.EMPTY_STRING,
                                    code: code
                                }];
                    }
                });
            });
        };
        /**
         * Generates response thumbprint.
         * @param authority
         * @param scopes
         * @param embeddedAppClientId
         * @param embeddedAppOrigin
         * @returns
         */
        BrokerResponseHandler.prototype.generateResponseThumbprint = function (authority, scopes, embeddedAppClientId, embeddedAppOrigin) {
            var reqThumbprint = {
                authority: authority.canonicalAuthority,
                clientId: embeddedAppClientId,
                scopes: scopes
            };
            var responseThumbprint = embeddedAppOrigin + "." + this.cryptoObj.base64Encode(JSON.stringify(reqThumbprint));
            return responseThumbprint;
        };
        return BrokerResponseHandler;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Oauth2.0 Authorization Code client implementing the broker protocol for browsers.
     */
    var BrokerAuthorizationCodeClient = /** @class */ (function (_super) {
        __extends$2(BrokerAuthorizationCodeClient, _super);
        function BrokerAuthorizationCodeClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Creates the URL of the authorization request letting the user input credentials and consent to the
         * application. The URL target the /authorize endpoint of the authority configured in the
         * application object.
         *
         * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI
         * sent in the request and should contain an authorization code, which can then be used to acquire tokens via
         * acquireToken(AuthorizationCodeRequest)
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var queryString;
                return __generator$2(this, function (_a) {
                    queryString = this.createBrokerAuthCodeUrlQueryString(request);
                    return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];
                });
            });
        };
        /**
         * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the
         * authorization_code_grant
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {
            return __awaiter$2(this, void 0, void 0, function () {
                var reqTimestamp, response, responseHandler;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("in acquireToken call");
                            // If no code response is given, we cannot acquire a token.
                            if (!request || StringUtils.isEmpty(request.code)) {
                                throw ClientAuthError.createTokenRequestCannotBeMadeError();
                            }
                            reqTimestamp = TimeUtils.nowSeconds();
                            return [4 /*yield*/, this.executeBrokerTokenRequest(this.authority, request)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new BrokerResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            // Validate response. This function throws a server error if an error is returned by the server.
                            responseHandler.validateTokenResponse(response.body);
                            if (!!request.embeddedAppClientId) return [3 /*break*/, 3];
                            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3: return [4 /*yield*/, responseHandler.handleBrokeredServerTokenResponse(response.body, this.authority, reqTimestamp, request, request.redirectUri, authCodePayload)];
                        case 4: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Executes POST request to token endpoint
         * @param authority
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.executeBrokerTokenRequest = function (authority, request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes,
                                claims: request.claims,
                                authenticationScheme: request.authenticationScheme,
                                resourceRequestMethod: request.resourceRequestMethod,
                                resourceRequestUri: request.resourceRequestUri,
                                shrClaims: request.shrClaims,
                                sshKid: request.sshKid
                            };
                            return [4 /*yield*/, this.createBrokerTokenRequestBody(request)];
                        case 1:
                            requestBody = _a.sent();
                            queryParameters = this.createBrokerTokenQueryParameters(request);
                            ccsCredential = undefined;
                            if (request.clientInfo) {
                                try {
                                    clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);
                                    ccsCredential = {
                                        credential: clientInfo.uid + "." + clientInfo.utid,
                                        type: CcsCredentialType.HOME_ACCOUNT_ID
                                    };
                                }
                                catch (e) {
                                    this.logger.verbose("Could not parse client info for CCS Header: " + e);
                                }
                            }
                            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);
                            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + "?" + queryParameters;
                            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                    }
                });
            });
        };
        /**
         * This API validates the `AuthorizationCodeUrlRequest` and creates a URL
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.createBrokerAuthCodeUrlQueryString = function (request) {
            /*
             * if (!request.embeddedAppClientId) {
             *     return super.createAuthCodeUrlQueryString(request);
             * }
             */
            var parameterBuilder = new RequestParameterBuilder();
            parameterBuilder.addClientId(request.embeddedAppClientId);
            var requestScopes = __spread$1(request.scopes || [], request.extraScopesToConsent || []);
            parameterBuilder.addScopes(requestScopes);
            // validate the redirectUri (to be a non null value)
            parameterBuilder.addRedirectUri(request.redirectUri, this.config.authOptions.clientId);
            // generate the correlationId if not set by the user and add
            var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
            parameterBuilder.addCorrelationId(correlationId);
            // add response_mode. If not passed in it defaults to query.
            parameterBuilder.addResponseMode(request.responseMode);
            // add response_type = code
            parameterBuilder.addResponseTypeCode();
            // add library info parameters
            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
            // add client_info=1
            parameterBuilder.addClientInfo();
            if (request.codeChallenge && request.codeChallengeMethod) {
                parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);
            }
            if (request.prompt) {
                parameterBuilder.addPrompt(request.prompt);
            }
            if (request.domainHint) {
                parameterBuilder.addDomainHint(request.domainHint);
            }
            // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object
            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {
                // AAD will throw if prompt=select_account is passed with an account hint
                if (request.sid && request.prompt === PromptValue.NONE) {
                    // SessionID is only used in silent calls
                    this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from request");
                    parameterBuilder.addSid(request.sid);
                }
                else if (request.account) {
                    var accountSid = this.extractSidFromAccount(request.account);
                    // If account and loginHint are provided, we will check account first for sid before adding loginHint
                    if (accountSid && request.prompt === PromptValue.NONE) {
                        // SessionId is only used in silent calls
                        this.logger.verbose("createAuthCodeUrlQueryString: Prompt is none, adding sid from account");
                        parameterBuilder.addSid(accountSid);
                        try {
                            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                            parameterBuilder.addCcsOid(clientInfo);
                        }
                        catch (e) {
                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                        }
                    }
                    else if (request.loginHint) {
                        this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from request");
                        parameterBuilder.addLoginHint(request.loginHint);
                        parameterBuilder.addCcsUpn(request.loginHint);
                    }
                    else if (request.account.username) {
                        // Fallback to account username if provided
                        this.logger.verbose("createAuthCodeUrlQueryString: Adding login_hint from account");
                        parameterBuilder.addLoginHint(request.account.username);
                        try {
                            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);
                            parameterBuilder.addCcsOid(clientInfo);
                        }
                        catch (e) {
                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                        }
                    }
                }
                else if (request.loginHint) {
                    this.logger.verbose("createAuthCodeUrlQueryString: No account, adding login_hint from request");
                    parameterBuilder.addLoginHint(request.loginHint);
                    parameterBuilder.addCcsUpn(request.loginHint);
                }
            }
            else {
                this.logger.verbose("createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints");
            }
            if (request.nonce) {
                parameterBuilder.addNonce(request.nonce);
            }
            if (request.state) {
                parameterBuilder.addState(request.state);
            }
            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
            }
            if (request.extraQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);
            }
            // Add broker params
            parameterBuilder.addBrokerClientId(this.config.authOptions.clientId);
            parameterBuilder.addBrokerRedirectUri(request.brokerRedirectUri);
            return parameterBuilder.createQueryString();
        };
        /**
         * Creates query string for the /token request
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.createBrokerTokenQueryParameters = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            if (request.tokenQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
            }
            return parameterBuilder.createQueryString();
        };
        /**
         * Generates a map for all the params to be sent to the service
         * @param request
         */
        BrokerAuthorizationCodeClient.prototype.createBrokerTokenRequestBody = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var parameterBuilder, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;
                var _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            parameterBuilder = new RequestParameterBuilder();
                            parameterBuilder.addClientId(request.embeddedAppClientId);
                            // validate the redirectUri (to be a non null value)
                            parameterBuilder.addRedirectUri(request.redirectUri, this.config.authOptions.clientId);
                            // Add scope array, parameter builder will add default scopes and dedupe
                            parameterBuilder.addScopes(request.scopes);
                            // add code: user set, not validated
                            parameterBuilder.addAuthorizationCode(request.code);
                            // Add library metadata
                            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                            parameterBuilder.addThrottling();
                            if (this.serverTelemetryManager) {
                                parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                            }
                            // add code_verifier if passed
                            if (request.codeVerifier) {
                                parameterBuilder.addCodeVerifier(request.codeVerifier);
                            }
                            parameterBuilder.addGrantType(AUTHORIZATION_CODE_GRANT);
                            parameterBuilder.addClientInfo();
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP && !!request.resourceRequestMethod && !!request.resourceRequestUri)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                        case 1:
                            reqCnfData = _b.sent();
                            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)
                            parameterBuilder.addPopToken(reqCnfData.reqCnfString);
                            return [3 /*break*/, 3];
                        case 2:
                            if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {
                                if (request.sshJwk) {
                                    parameterBuilder.addSshJwk(request.sshJwk);
                                }
                                else {
                                    throw ClientConfigurationError.createMissingSshJwkError();
                                }
                            }
                            _b.label = 3;
                        case 3:
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            ccsCred = undefined;
                            if (request.clientInfo) {
                                try {
                                    clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);
                                    ccsCred = {
                                        credential: "" + clientInfo.uid + "." + clientInfo.utid,
                                        type: CcsCredentialType.HOME_ACCOUNT_ID
                                    };
                                }
                                catch (e) {
                                    this.logger.verbose("Could not parse client info for CCS Header: " + e);
                                }
                            }
                            else {
                                ccsCred = request.ccsCredential;
                            }
                            // Adds these as parameters in the request instead of headers to prevent CORS preflight request
                            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {
                                switch (ccsCred.type) {
                                    case CcsCredentialType.HOME_ACCOUNT_ID:
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                        }
                                        break;
                                    case CcsCredentialType.UPN:
                                        parameterBuilder.addCcsUpn(ccsCred.credential);
                                        break;
                                }
                            }
                            if (request.tokenBodyParameters) {
                                parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);
                            }
                            // Add hybrid spa parameters if not already provided
                            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {
                                parameterBuilder.addExtraQueryParameters((_a = {},
                                    _a[AADServerParamKeys.RETURN_SPA_CODE] = "1",
                                    _a));
                            }
                            // Add broker params
                            parameterBuilder.addBrokerClientId(this.config.authOptions.clientId);
                            parameterBuilder.addBrokerRedirectUri(request.brokerRedirectUri);
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        /**
         * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.
         * @param account
         */
        BrokerAuthorizationCodeClient.prototype.extractSidFromAccount = function (account) {
            if (account.idTokenClaims) {
                var tokenClaims = account.idTokenClaims;
                return tokenClaims.sid || null;
            }
            return null;
        };
        return BrokerAuthorizationCodeClient;
    }(AuthorizationCodeClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerRedirectClient = /** @class */ (function (_super) {
        __extends$2(BrokerRedirectClient, _super);
        function BrokerRedirectClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Redirects the page to the /authorize endpoint of the IDP
         * @param request
         */
        BrokerRedirectClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var validRequest, serverTelemetryManager, authCodeRequest, authClient, interactionHandler, navigateUrl, redirectStartPage, e_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.initializeBrokeredRequest(request, exports.InteractionType.Redirect)];
                        case 1:
                            validRequest = _a.sent();
                            this.browserStorage.setRedirectRequestContext(validRequest.embeddedAppClientId);
                            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenRedirect);
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 7, , 8]);
                            return [4 /*yield*/, this.initializeAuthorizationCodeRequest(validRequest)];
                        case 3:
                            authCodeRequest = _a.sent();
                            return [4 /*yield*/, this.createAuthCodeClient(serverTelemetryManager, validRequest.authority)];
                        case 4:
                            authClient = _a.sent();
                            this.logger.verbose("Auth code client created");
                            interactionHandler = new RedirectHandler(authClient, this.browserStorage, authCodeRequest, this.logger, this.browserCrypto, this.performanceClient);
                            return [4 /*yield*/, authClient.getAuthCodeUrl(validRequest)];
                        case 5:
                            navigateUrl = _a.sent();
                            redirectStartPage = this.getRedirectStartPage(request.redirectStartPage);
                            this.logger.verbosePii("Redirect start page: " + redirectStartPage);
                            return [4 /*yield*/, interactionHandler.initiateAuthRequest(navigateUrl, {
                                    navigationClient: this.navigationClient,
                                    redirectTimeout: this.config.system.redirectNavigationTimeout,
                                    redirectStartPage: redirectStartPage,
                                    onRedirectNavigate: request.onRedirectNavigate
                                })];
                        case 6:
                        // Show the UI once the url has been created. Response will come back in the hash, which will be handled in the handleRedirectCallback function.
                        return [2 /*return*/, _a.sent()];
                        case 7:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            serverTelemetryManager.cacheFailedRequest(e_1);
                            this.browserStorage.cleanRequestByState(validRequest.state);
                            throw e_1;
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Creates an Broker Authorization Code Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        BrokerRedirectClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$2(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new BrokerAuthorizationCodeClient(clientConfig)];
                    }
                });
            });
        };
        /**
         *
         * @param embeddedRequest
         * @param interactionType
         */
        BrokerRedirectClient.prototype.initializeBrokeredRequest = function (embeddedRequest, interactionType) {
            return __awaiter$2(this, void 0, void 0, function () {
                var embeddedState, embeddedStateObj, embeddedAppAuthority, baseRequestScopes, browserState, brokerState, account, requestNonce, _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.verbose("initializeBrokeredRequest called");
                            embeddedState = Constants.EMPTY_STRING;
                            if (embeddedRequest.state) {
                                embeddedStateObj = ProtocolUtils.parseRequestState(this.browserCrypto, embeddedRequest.state);
                                embeddedState = (embeddedStateObj && embeddedStateObj.userRequestState) || "";
                            }
                            embeddedAppAuthority = embeddedRequest.authority || this.config.auth.authority;
                            baseRequestScopes = new ScopeSet(embeddedRequest.scopes || []);
                            browserState = {
                                interactionType: interactionType,
                                brokeredClientId: embeddedRequest.embeddedAppClientId,
                                brokeredReqAuthority: embeddedAppAuthority,
                                brokeredReqScopes: baseRequestScopes.printScopes()
                            };
                            brokerState = ProtocolUtils.setRequestState(this.browserCrypto, embeddedState, browserState);
                            account = embeddedRequest.account || this.browserStorage.getActiveAccount();
                            if (account) {
                                this.logger.verbose("Setting validated request account");
                                this.logger.verbosePii("Setting validated request account: " + account);
                            }
                            requestNonce = embeddedRequest.nonce || this.browserCrypto.createNewGuid();
                            this.browserStorage.setInteractionInProgress(true);
                            _a = [{}];
                            return [4 /*yield*/, this.initializeBaseRequest(embeddedRequest)];
                        case 1: return [2 /*return*/, __assign$2.apply(void 0, [__assign$2.apply(void 0, _a.concat([_b.sent()])), { account: account || undefined, state: brokerState, nonce: requestNonce, responseMode: ResponseMode.FRAGMENT, authority: embeddedAppAuthority, correlationId: this.correlationId, scopes: __spread$1(((embeddedRequest && embeddedRequest.scopes) || [])), redirectUri: this.getRedirectUri(embeddedRequest.redirectUri), brokerRedirectUri: embeddedRequest.brokerRedirectUri, embeddedAppClientId: embeddedRequest.embeddedAppClientId }])];
                    }
                });
            });
        };
        return BrokerRedirectClient;
    }(RedirectClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Class which provides helpers for OAuth 2.0 protocol specific values
     */
    var BrokerProtocolUtils = /** @class */ (function () {
        function BrokerProtocolUtils() {
        }
        /**
         * Appends user state with random guid, or returns random guid.
         * @param userState
         * @param randomGuid
         */
        BrokerProtocolUtils.setRequestState = function (cryptoObj, userState, meta, stateId) {
            var libraryState = BrokerProtocolUtils.generateLibraryState(cryptoObj, meta, stateId);
            return !StringUtils.isEmpty(userState) ? "" + libraryState + Constants.RESOURCE_DELIM + userState : libraryState;
        };
        /**
         * Generates the state value used by the common library.
         * @param randomGuid
         * @param cryptoObj
         */
        BrokerProtocolUtils.generateLibraryState = function (cryptoObj, meta, stateId) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("generateLibraryState");
            }
            // Create a state object containing a unique id and the timestamp of the request creation
            var stateObj = {
                id: stateId || cryptoObj.createNewGuid()
            };
            if (meta) {
                stateObj.meta = meta;
            }
            var stateString = JSON.stringify(stateObj);
            return cryptoObj.base64Encode(stateString);
        };
        /**
         * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.
         * @param state
         * @param cryptoObj
         */
        BrokerProtocolUtils.parseRequestState = function (cryptoObj, state) {
            if (!cryptoObj) {
                throw ClientAuthError.createNoCryptoObjectError("parseRequestState");
            }
            if (StringUtils.isEmpty(state)) {
                throw ClientAuthError.createInvalidStateError(state, "Null, undefined or empty state");
            }
            try {
                // Split the state between library state and user passed state and decode them separately
                var splitState = state.split(Constants.RESOURCE_DELIM);
                var libraryState = splitState[0];
                var userState = splitState.length > 1 ? splitState.slice(1).join(Constants.RESOURCE_DELIM) : "";
                var libraryStateString = cryptoObj.base64Decode(libraryState);
                var libraryStateObj = JSON.parse(libraryStateString);
                return {
                    userRequestState: !StringUtils.isEmpty(userState) ? userState : "",
                    libraryState: libraryStateObj
                };
            }
            catch (e) {
                throw ClientAuthError.createInvalidStateError(state, e.message);
            }
        };
        return BrokerProtocolUtils;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerPopupClient = /** @class */ (function (_super) {
        __extends$2(BrokerPopupClient, _super);
        function BrokerPopupClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Acquires tokens by opening a popup window to the /authorize endpoint of the authority
         * @param request
         */
        BrokerPopupClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var validRequest, popupName, popupWindowAttributes, popup, e_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.initializeBrokeredRequest(request, exports.InteractionType.Popup)];
                        case 1:
                            validRequest = _a.sent();
                            this.browserStorage.updateCacheEntries(validRequest.state, validRequest.nonce, validRequest.authority, validRequest.loginHint || "", validRequest.account || null);
                            popupName = this.generatePopupName(validRequest.scopes, validRequest.authority);
                            popupWindowAttributes = request.popupWindowAttributes || {};
                            // asyncPopups flag is true. Acquires token without first opening popup. Popup will be opened later asynchronously.
                            if (this.config.system.asyncPopups) {
                                this.logger.verbose("asyncPopups set to true, acquiring token");
                                return [2 /*return*/, this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes)];
                            }
                            else {
                                // asyncPopups flag is set to false. Opens popup before acquiring token.
                                this.logger.verbose("asyncPopup set to false, opening popup before acquiring token");
                                popup = this.openSizedPopup("about:blank", popupName, popupWindowAttributes);
                                return [2 /*return*/, this.acquireTokenPopupAsync(validRequest, popupName, popupWindowAttributes, popup)];
                            }
                        case 2:
                            e_1 = _a.sent();
                            return [2 /*return*/, Promise.reject(e_1)];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Creates an Broker Authorization Code Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        BrokerPopupClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$2(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new BrokerAuthorizationCodeClient(clientConfig)];
                    }
                });
            });
        };
        /**
         *
         * @param embeddedRequest
         * @param interactionType
         */
        BrokerPopupClient.prototype.initializeBrokeredRequest = function (embeddedRequest, interactionType) {
            return __awaiter$2(this, void 0, void 0, function () {
                var embeddedState, stateId, embeddedStateObj, embeddedAppAuthority, baseRequestScopes, browserState, brokerState, account, requestNonce, _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.verbose("initializeBrokeredRequest called");
                            embeddedState = Constants.EMPTY_STRING;
                            stateId = Constants.EMPTY_STRING;
                            if (embeddedRequest.state) {
                                embeddedStateObj = BrokerProtocolUtils.parseRequestState(this.browserCrypto, embeddedRequest.state);
                                embeddedState = (embeddedStateObj && embeddedStateObj.userRequestState) || Constants.EMPTY_STRING;
                                stateId = (embeddedStateObj && embeddedStateObj.libraryState.id) || Constants.EMPTY_STRING;
                            }
                            embeddedAppAuthority = embeddedRequest.authority || this.config.auth.authority;
                            baseRequestScopes = new ScopeSet(embeddedRequest.scopes || []);
                            browserState = {
                                interactionType: interactionType,
                                brokeredClientId: embeddedRequest.embeddedAppClientId,
                                brokeredReqAuthority: embeddedAppAuthority,
                                brokeredReqScopes: baseRequestScopes.printScopes()
                            };
                            brokerState = BrokerProtocolUtils.setRequestState(this.browserCrypto, embeddedState, browserState, stateId);
                            account = embeddedRequest.account || this.browserStorage.getActiveAccount();
                            if (account) {
                                this.logger.verbose("Setting validated request account");
                                this.logger.verbosePii("Setting validated request account: " + account);
                            }
                            requestNonce = embeddedRequest.nonce || this.browserCrypto.createNewGuid();
                            this.browserStorage.setInteractionInProgress(true);
                            _a = [{}];
                            return [4 /*yield*/, this.initializeBaseRequest(embeddedRequest)];
                        case 1: return [2 /*return*/, __assign$2.apply(void 0, [__assign$2.apply(void 0, _a.concat([_b.sent()])), { account: account || undefined, state: brokerState, nonce: requestNonce, responseMode: ResponseMode.FRAGMENT, authority: embeddedAppAuthority, correlationId: this.correlationId, scopes: __spread$1(((embeddedRequest && embeddedRequest.scopes) || [])), redirectUri: this.getRedirectUri(embeddedRequest.redirectUri), brokerRedirectUri: embeddedRequest.brokerRedirectUri, embeddedAppClientId: embeddedRequest.embeddedAppClientId }])];
                    }
                });
            });
        };
        return BrokerPopupClient;
    }(PopupClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerSilentIframeClient = /** @class */ (function (_super) {
        __extends$2(BrokerSilentIframeClient, _super);
        function BrokerSilentIframeClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none
         * @param request
         */
        BrokerSilentIframeClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var silentRequest;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("acquireTokenByIframe called");
                            // Check that we have some SSO data
                            if (StringUtils.isEmpty(request.loginHint) && StringUtils.isEmpty(request.sid) && (!request.account || StringUtils.isEmpty(request.account.username))) {
                                this.logger.warning("No user hint provided. The authorization server may need more information to complete this request.");
                            }
                            // Check that prompt is set to none, throw error if it is set to anything else.
                            if (request.prompt && request.prompt !== PromptValue.NONE) {
                                throw BrowserAuthError.createSilentPromptValueError(request.prompt);
                            }
                            return [4 /*yield*/, this.initializeBrokeredRequest(__assign$2(__assign$2({}, request), { prompt: PromptValue.NONE }), exports.InteractionType.Silent)];
                        case 1:
                            silentRequest = _a.sent();
                            return [2 /*return*/, _super.prototype.acquireToken.call(this, silentRequest)];
                    }
                });
            });
        };
        /**
         * Creates an Broker Authorization Code Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        BrokerSilentIframeClient.prototype.createAuthCodeClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$2(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new BrokerAuthorizationCodeClient(clientConfig)];
                    }
                });
            });
        };
        /**
         *
         * @param embeddedRequest
         * @param interactionType
         */
        BrokerSilentIframeClient.prototype.initializeBrokeredRequest = function (embeddedRequest, interactionType) {
            return __awaiter$2(this, void 0, void 0, function () {
                var embeddedState, embeddedStateObj, embeddedAppAuthority, baseRequestScopes, browserState, brokerState, account, requestNonce, _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.verbose("initializeBrokeredRequest called");
                            embeddedState = Constants.EMPTY_STRING;
                            if (embeddedRequest.state) {
                                embeddedStateObj = ProtocolUtils.parseRequestState(this.browserCrypto, embeddedRequest.state);
                                embeddedState = (embeddedStateObj && embeddedStateObj.userRequestState) || "";
                            }
                            embeddedAppAuthority = embeddedRequest.authority || this.config.auth.authority;
                            baseRequestScopes = new ScopeSet(embeddedRequest.scopes || []);
                            browserState = {
                                interactionType: interactionType,
                                brokeredClientId: embeddedRequest.embeddedAppClientId,
                                brokeredReqAuthority: embeddedAppAuthority,
                                brokeredReqScopes: baseRequestScopes.printScopes()
                            };
                            brokerState = ProtocolUtils.setRequestState(this.browserCrypto, embeddedState, browserState);
                            account = embeddedRequest.account || this.browserStorage.getActiveAccount();
                            if (account) {
                                this.logger.verbose("Setting validated request account");
                                this.logger.verbosePii("Setting validated request account: " + account);
                            }
                            requestNonce = embeddedRequest.nonce || this.browserCrypto.createNewGuid();
                            _a = [{}];
                            return [4 /*yield*/, this.initializeBaseRequest(embeddedRequest)];
                        case 1: return [2 /*return*/, __assign$2.apply(void 0, [__assign$2.apply(void 0, _a.concat([_b.sent()])), { account: account || undefined, state: brokerState, nonce: requestNonce, responseMode: ResponseMode.FRAGMENT, authority: embeddedAppAuthority, correlationId: this.correlationId, scopes: __spread$1(((embeddedRequest && embeddedRequest.scopes) || [])), redirectUri: this.getRedirectUri(embeddedRequest.redirectUri) }])];
                    }
                });
            });
        };
        return BrokerSilentIframeClient;
    }(SilentIframeClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Oauth2.0 Refresh Token client implementing the broker protocol for browsers.
     */
    var BrokerRefreshTokenClient = /** @class */ (function (_super) {
        __extends$2(BrokerRefreshTokenClient, _super);
        function BrokerRefreshTokenClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BrokerRefreshTokenClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var reqTimestamp, response, responseHandler;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            reqTimestamp = TimeUtils.nowSeconds();
                            return [4 /*yield*/, this.executeBrokerTokenRequest(request, this.authority)];
                        case 1:
                            response = _a.sent();
                            responseHandler = new BrokerResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);
                            responseHandler.validateTokenResponse(response.body);
                            if (request.embeddedAppClientId) {
                                return [2 /*return*/, responseHandler.handleBrokeredServerTokenResponse(response.body, this.authority, reqTimestamp, request, request.embeddedAppRedirectUri)];
                            }
                            else {
                                return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];
                            }
                    }
                });
            });
        };
        /**
         * Gets cached refresh token and attaches to request, then calls acquireToken API
         * @param request
         */
        BrokerRefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;
                return __generator$2(this, function (_a) {
                    // Cannot renew token if no request object is given.
                    if (!request) {
                        throw ClientConfigurationError.createEmptyTokenRequestError();
                    }
                    // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases
                    if (!request.account) {
                        throw ClientAuthError.createNoAccountInSilentRequestError();
                    }
                    isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);
                    // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest
                    if (isFOCI) {
                        try {
                            return [2 /*return*/, this.acquireBrokerTokenWithCachedRefreshToken(request, true)];
                        }
                        catch (e) {
                            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;
                            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;
                            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)
                            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {
                                return [2 /*return*/, this.acquireBrokerTokenWithCachedRefreshToken(request, false)];
                                // throw in all other cases
                            }
                            else {
                                throw e;
                            }
                        }
                    }
                    // fall back to application refresh token acquisition
                    return [2 /*return*/, this.acquireBrokerTokenWithCachedRefreshToken(request, false)];
                });
            });
        };
        /**
         * Constructs the network message and makes a NW call to the underlying secure token service
         * @param request
         * @param authority
         */
        BrokerRefreshTokenClient.prototype.executeBrokerTokenRequest = function (request, authority) {
            return __awaiter$2(this, void 0, void 0, function () {
                var requestBody, queryParameters, headers, thumbprint, endpoint;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.createBrokerTokenRequestBody(request)];
                        case 1:
                            requestBody = _a.sent();
                            queryParameters = this.createBrokerTokenQueryParameters(request);
                            headers = this.createTokenRequestHeaders(request.ccsCredential);
                            thumbprint = {
                                clientId: this.config.authOptions.clientId,
                                authority: authority.canonicalAuthority,
                                scopes: request.scopes,
                                claims: request.claims,
                                authenticationScheme: request.authenticationScheme,
                                resourceRequestMethod: request.resourceRequestMethod,
                                resourceRequestUri: request.resourceRequestUri,
                                shrClaims: request.shrClaims,
                                sshKid: request.sshKid
                            };
                            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);
                            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];
                    }
                });
            });
        };
        /**
         * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached
         * @param request
         */
        BrokerRefreshTokenClient.prototype.acquireBrokerTokenWithCachedRefreshToken = function (request, foci) {
            return __awaiter$2(this, void 0, void 0, function () {
                var refreshToken, refreshTokenRequest;
                return __generator$2(this, function (_a) {
                    refreshToken = this.cacheManager.getRefreshToken(request.account, foci);
                    // no refresh Token
                    if (!refreshToken) {
                        throw InteractionRequiredAuthError.createNoTokensFoundError();
                    }
                    refreshTokenRequest = __assign$2(__assign$2({}, request), { refreshToken: refreshToken.secret });
                    return [2 /*return*/, this.acquireToken(refreshTokenRequest)];
                });
            });
        };
        /**
         * Creates query string for the /token request
         * @param request
         */
        BrokerRefreshTokenClient.prototype.createBrokerTokenQueryParameters = function (request) {
            var parameterBuilder = new RequestParameterBuilder();
            if (request.tokenQueryParameters) {
                parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);
            }
            return parameterBuilder.createQueryString();
        };
        /**
         * Generates a map for all the params to be sent to the service
         * @param request
         */
        BrokerRefreshTokenClient.prototype.createBrokerTokenRequestBody = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var parameterBuilder, correlationId, popTokenGenerator, cnf, clientInfo;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            parameterBuilder = new RequestParameterBuilder();
                            parameterBuilder.addClientId(request.embeddedAppClientId);
                            parameterBuilder.addScopes(request.scopes);
                            parameterBuilder.addGrantType(REFRESH_TOKEN_GRANT);
                            parameterBuilder.addClientInfo();
                            parameterBuilder.addLibraryInfo(this.config.libraryInfo);
                            parameterBuilder.addThrottling();
                            if (this.serverTelemetryManager) {
                                parameterBuilder.addServerTelemetry(this.serverTelemetryManager);
                            }
                            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();
                            parameterBuilder.addCorrelationId(correlationId);
                            parameterBuilder.addRefreshToken(request.refreshToken);
                            if (!(request.authenticationScheme === exports.AuthenticationScheme.POP)) return [3 /*break*/, 2];
                            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);
                            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];
                        case 1:
                            cnf = _a.sent();
                            parameterBuilder.addPopToken(cnf.reqCnfString);
                            return [3 /*break*/, 3];
                        case 2:
                            if (request.authenticationScheme === exports.AuthenticationScheme.SSH) {
                                if (request.sshJwk) {
                                    parameterBuilder.addSshJwk(request.sshJwk);
                                }
                                else {
                                    throw ClientConfigurationError.createMissingSshJwkError();
                                }
                            }
                            _a.label = 3;
                        case 3:
                            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {
                                parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);
                            }
                            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {
                                switch (request.ccsCredential.type) {
                                    case CcsCredentialType.HOME_ACCOUNT_ID:
                                        try {
                                            clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);
                                            parameterBuilder.addCcsOid(clientInfo);
                                        }
                                        catch (e) {
                                            this.logger.verbose("Could not parse home account ID for CCS Header: " + e);
                                        }
                                        break;
                                    case CcsCredentialType.UPN:
                                        parameterBuilder.addCcsUpn(request.ccsCredential.credential);
                                        break;
                                }
                            }
                            // Add broker params
                            parameterBuilder.addBrokerClientId(this.config.authOptions.clientId);
                            parameterBuilder.addRedirectUri(request.embeddedAppRedirectUri, this.config.authOptions.clientId);
                            return [2 /*return*/, parameterBuilder.createQueryString()];
                    }
                });
            });
        };
        return BrokerRefreshTokenClient;
    }(RefreshTokenClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerSilentRefreshClient = /** @class */ (function (_super) {
        __extends$2(BrokerSilentRefreshClient, _super);
        function BrokerSilentRefreshClient() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Exchanges the refresh token for new tokens
         * @param request
         */
        BrokerSilentRefreshClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var silentRequest, serverTelemetryManager, refreshTokenClient;
                var _this = this;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            silentRequest = __assign$2(__assign$2({}, request), this.initializeBaseRequest(request));
                            serverTelemetryManager = this.initializeServerTelemetryManager(exports.ApiId.acquireTokenSilent_silentFlow);
                            return [4 /*yield*/, this.createRefreshTokenClient(serverTelemetryManager, silentRequest.authority)];
                        case 1:
                            refreshTokenClient = _a.sent();
                            this.logger.verbose("Refresh token client created");
                            // Send request to renew token. Auth module will throw errors if token cannot be renewed.
                            return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(silentRequest).catch(function (e) {
                                    if (e instanceof AuthError) {
                                        e.setCorrelationId(_this.correlationId);
                                    }
                                    serverTelemetryManager.cacheFailedRequest(e);
                                    throw e;
                                })];
                    }
                });
            });
        };
        /**
         * Creates a Refresh Client with the given authority, or the default authority.
         * @param authorityUrl
         */
        BrokerSilentRefreshClient.prototype.createRefreshTokenClient = function (serverTelemetryManager, authorityUrl) {
            return __awaiter$2(this, void 0, void 0, function () {
                var clientConfig;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getClientConfiguration(serverTelemetryManager, authorityUrl)];
                        case 1:
                            clientConfig = _a.sent();
                            return [2 /*return*/, new BrokerRefreshTokenClient(clientConfig)];
                    }
                });
            });
        };
        return BrokerSilentRefreshClient;
    }(SilentRefreshClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerCacheManager = /** @class */ (function (_super) {
        __extends$2(BrokerCacheManager, _super);
        function BrokerCacheManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Generates key used to store response objects.
         * Thumbprint has the following format: "broker.response.<embedded-app-origin>.<request-thumbprint>"
         * @param responseThumbprint
         */
        BrokerCacheManager.prototype.generateBrokerResponseKey = function (responseThumbprint) {
            return BrokerCacheKeys.BROKER_RESPONSE + "." + responseThumbprint;
        };
        /**
         * Searches through saved broker response keys for a given origin and retrieves the first one.
         * Then looks up the saved broker responses in memory and returns if found.
         * Will log an error if more than one is found.
         * @param messageOrigin
         */
        BrokerCacheManager.prototype.getBrokerResponseByOrigin = function (messageOrigin) {
            // Filter cache keys that match the messageOrigin.
            var memCacheKeys = this.getMemoryKeys();
            var embeddedAppKey = BrokerCacheKeys.BROKER_RESPONSE + "." + messageOrigin;
            var cachedResponseKeys = memCacheKeys.filter(function (cacheKey) { return cacheKey.indexOf(embeddedAppKey) >= 0; });
            // Return null if no cache keys found.
            if (cachedResponseKeys.length <= 0) {
                return null;
            }
            // Log error if more than one cache key found.
            if (cachedResponseKeys.length > 1) {
                this.logger.error("Too many responses found for the origin, sending back the first one found. You may need to call login/acquireTokenPopup/Silent() again.");
            }
            // Retrieve first found cache key, retrieve response from memory cache.
            return this.getBrokerResponse(cachedResponseKeys[0]);
        };
        /**
         * Generates key from thumbprint and looks up brokered response.
         * @param responseThumbprint
         */
        BrokerCacheManager.prototype.getBrokerResponseByThumbprint = function (reqThumbprint, embeddedAppOrigin) {
            // Create cache key and lookup relevant item in memory cache.
            var responseThumbprint = embeddedAppOrigin + "." + this.cryptoImpl.base64Encode(JSON.stringify(reqThumbprint));
            var responseCacheKey = BrokerCacheKeys.BROKER_RESPONSE + "." + responseThumbprint;
            return this.getBrokerResponse(responseCacheKey);
        };
        /**
         * Looks up the saved broker responses in memory cache and returns if found.
         * @param cacheKey
         */
        BrokerCacheManager.prototype.getBrokerResponse = function (cacheKey) {
            var cachedResponse = this.getMemoryCache(cacheKey);
            if (cachedResponse) {
                // Remove from memory cache before returning.
                this.removeMemoryItem(cacheKey);
                return cachedResponse;
            }
            // Return null if no cachedResponse found.
            return null;
        };
        /**
         * Removes a cache item fom internal memory storage with the given key.
         * @param key
         */
        BrokerCacheManager.prototype.removeMemoryItem = function (key) {
            this.internalStorage.removeItem(key);
            return true;
        };
        /**
         * Gets internal cache item with given key.
         * @param key
         */
        BrokerCacheManager.prototype.getMemoryCache = function (cacheKey) {
            var key = this.generateCacheKey(cacheKey);
            var value = this.internalStorage.getItem(key);
            if (!value) {
                return null;
            }
            return value;
        };
        /**
         * Sets the internal cache item with the key and value given. Internal storage is cleared on page reload.
         * @param key
         * @param value
         */
        BrokerCacheManager.prototype.setMemoryCache = function (cacheKey, value) {
            var key = this.generateCacheKey(cacheKey);
            this.internalStorage.setItem(key, value);
        };
        BrokerCacheManager.prototype.getMemoryKeys = function () {
            return this.internalStorage.getKeys();
        };
        return BrokerCacheManager;
    }(BrowserCacheManager));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerNativeInteractionClient = /** @class */ (function (_super) {
        __extends$2(BrokerNativeInteractionClient, _super);
        function BrokerNativeInteractionClient(config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId) {
            var _this = _super.call(this, config, browserStorage, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, provider, accountId, nativeStorageImpl, correlationId) || this;
            _this.embeddedAppClientId = "";
            _this.embeddedAppOrigin = "";
            return _this;
        }
        BrokerNativeInteractionClient.prototype.acquireToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokeredRequest;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("Getting tokens from brokered native flow.");
                            brokeredRequest = request;
                            this.embeddedAppClientId = brokeredRequest.embeddedAppClientId;
                            this.embeddedAppOrigin = brokeredRequest.embeddedAppRedirectUri;
                            return [4 /*yield*/, _super.prototype.acquireToken.call(this, brokeredRequest)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * Process NativeResponse to generate and return AuthenticationResult
         * @param response
         * @param request
         * @param reqTimestamp
         */
        BrokerNativeInteractionClient.prototype.handleNativeResponse = function (response, request, reqTimestamp) {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                var brokeredNativeResponse, responseThumbprint, idTokenObj, homeAccountIdentifier, cachedhomeAccountId, responseHandler, authority, cacheRecord;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.logger.trace("BrokerNativeInteractionClient - handleNativeResponse called");
                            responseThumbprint = "";
                            idTokenObj = this.createIdTokenObj(response);
                            homeAccountIdentifier = this.createHomeAccountIdentifier(response, idTokenObj);
                            cachedhomeAccountId = (_a = this.browserStorage.getAccountInfoFilteredBy({ nativeAccountId: request.accountId })) === null || _a === void 0 ? void 0 : _a.homeAccountId;
                            responseHandler = new BrokerResponseHandler(this.config.auth.clientId, this.browserStorage, this.browserCrypto, this.logger, null, null);
                            return [4 /*yield*/, this.getDiscoveredAuthority(request.authority)];
                        case 1:
                            authority = _b.sent();
                            if (!((homeAccountIdentifier === cachedhomeAccountId) && response.account.id !== request.accountId)) return [3 /*break*/, 3];
                            /*
                             * In this case, the tokens returned from native broker are for the embedded/child app.
                             * Hence, no need to cache anything in parent or replace any values in parent's cache.
                             */
                            this.logger.verbose("Getting tokens from brokered native flow.");
                            return [4 /*yield*/, this.handleEmbeddedNativeResponse(response, request, homeAccountIdentifier, idTokenObj, reqTimestamp)];
                        case 2:
                            brokeredNativeResponse = _b.sent();
                            responseThumbprint = responseHandler.generateResponseThumbprint(authority, ScopeSet.fromString(response.scope).asArray(), this.embeddedAppClientId || request.embeddedAppClientId, this.embeddedAppOrigin || request.embeddedAppRedirectUri);
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, _super.prototype.handleNativeResponse.call(this, response, request, reqTimestamp)];
                        case 4:
                            brokeredNativeResponse = _b.sent();
                            _b.label = 5;
                        case 5:
                            cacheRecord = responseHandler.generateCacheRecord(response, authority, reqTimestamp, this.convertNativeRequestToBaseAuthRequest(request), idTokenObj, undefined, undefined, this.embeddedAppClientId || request.embeddedAppClientId);
                            return [2 /*return*/, __assign$2(__assign$2({}, brokeredNativeResponse), { tokensToCache: cacheRecord, responseThumbprint: responseThumbprint })];
                    }
                });
            });
        };
        BrokerNativeInteractionClient.prototype.handleEmbeddedNativeResponse = function (response, request, homeAccountIdentifier, idTokenObj, reqTimestamp) {
            return __awaiter$2(this, void 0, void 0, function () {
                var authority, authorityPreferredCache, accountEntity, result;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getDiscoveredAuthority(request.authority)];
                        case 1:
                            authority = _a.sent();
                            authorityPreferredCache = authority.getPreferredCache();
                            accountEntity = this.createAccountEntity(response, homeAccountIdentifier, idTokenObj, authorityPreferredCache);
                            return [4 /*yield*/, this.generateAuthenticationResult(response, request, idTokenObj, accountEntity, authority.canonicalAuthority, reqTimestamp)];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        /**
         * Converts NativeRequest to BaseAuthRequest.
         * @param request
         * @returns
         */
        BrokerNativeInteractionClient.prototype.convertNativeRequestToBaseAuthRequest = function (request) {
            var scope = request.scope, remainingProperties = __rest$1(request, ["scope"]);
            var scopes = ScopeSet.fromString(scope);
            return __assign$2(__assign$2({}, remainingProperties), { scopes: scopes.asArray() });
        };
        return BrokerNativeInteractionClient;
    }(NativeInteractionClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Temporary solution to accommodate both 1p and 3p telemetry functionality.
     */
    var PerformanceEvents1P;
    (function (PerformanceEvents1P) {
        PerformanceEvents1P["ExperimentalPublicClientApplicationInitializeBrokering"] = "experimentalPublicClientApplicationInitializeBrokering";
        PerformanceEvents1P["BrokerClientApplicationHandleBrokerHandshake"] = "brokerClientApplicationHandleBrokerHandshake";
        PerformanceEvents1P["BrokerClientApplicationBrokeredSSOSilentRequest"] = "brokerClientApplicationBrokeredSSOSilentRequest";
        PerformanceEvents1P["BrokerClientApplicationBrokeredSilentRequest"] = "brokerClientApplicationBrokeredSilentRequest";
        PerformanceEvents1P["EmbeddedClientApplicationSendSSOSilentRequest"] = "embeddedClientApplicationSendSSOSilentRequest";
        PerformanceEvents1P["EmbeddedClientApplicationSendPopupRequest"] = "embeddedClientApplicationSendPopupRequest";
        PerformanceEvents1P["EmbeddedClientApplicationSendRedirectRequest"] = "embeddedClientApplicationSendRedirectRequest";
        PerformanceEvents1P["EmbeddedClientApplicationHandleRedirectRequest"] = "embeddedClientApplicationHandleRedirectRequest";
        PerformanceEvents1P["EmbeddedClientApplicationSendSilentRefreshRequest"] = "embeddedClientApplicationSendSilentRefreshRequest";
    })(PerformanceEvents1P || (PerformanceEvents1P = {}));
    var intFields = new Set([
        "brokerInteractionTimeoutMs",
        "brokerMessageTimeoutMs",
        "brokerHandshakeTimeoutMs",
        "brokerIframeTimeoutMs"
    ]);
    /**
     * Instantiate performance event.
     *
     * @param performanceClient {IPerformanceClient}
     * @param eventName {PerformanceEvents | PerformanceEvents1P}
     * @param correlationId {?string}
     */
    function startMeasurement(performanceClient, eventName, correlationId) {
        // @ts-ignore
        return performanceClient.startMeasurement(eventName, correlationId);
    }
    /**
     * Add static fields to performance event.
     *
     * @param event {?InProgressPerformanceEvent}
     * @param fields {StaticFields1p}
     */
    function addStaticFields(event, fields) {
        if (!event) {
            return;
        }
        event.addStaticFields(truncateInt(fields));
    }
    /**
     * Enforce truncation of integral fields.
     * @param {StaticFields1p} fields
     */
    function truncateInt(fields) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(fields)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (intFields.has(key) && typeof fields[key] === "number") {
                    fields[key] = Math.floor(fields[key]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return fields;
    }

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    /**
     * Broker Application class to manage brokered requests.
     */
    var BrokerClientApplication = /** @class */ (function (_super) {
        __extends$2(BrokerClientApplication, _super);
        function BrokerClientApplication(configuration, experimentalConfiguration) {
            var _this = _super.call(this, configuration) || this;
            _this.brokerStorage = new BrokerCacheManager(_this.config.auth.clientId, _this.config.cache, _this.browserCrypto, _this.logger);
            _this.currentBrokerRedirectResponse = undefined;
            _this.hybridAuthPromise = undefined;
            _this.experimentalConfig = buildExperimentalConfiguration(experimentalConfiguration);
            return _this;
        }
        /**
         * Event handler function which allows users to fire events after the PublicClientApplication object
         * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
         * auth flows.
         * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
         * @returns {Promise.<AuthenticationResult | null>} token response or null. If the return value is null, then no auth redirect was detected.
         */
        BrokerClientApplication.prototype.handleRedirectPromise = function (hash) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerResponse, redirectResponse;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            brokerResponse = this.handleBrokerRedirect(hash);
                            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.REDIRECT_CONTEXT));
                            // Wait for response and caching, save promise.
                            this.currentBrokerRedirectResponse = this.waitForBrokeredResponse(brokerResponse);
                            return [4 /*yield*/, this.currentBrokerRedirectResponse];
                        case 1:
                            redirectResponse = _a.sent();
                            this.currentBrokerRedirectResponse = undefined;
                            // Return the response ONLY if it is meant for the broker, otherwise return null.
                            return [2 /*return*/, (redirectResponse && !redirectResponse.tokensToCache) ? redirectResponse : null];
                    }
                });
            });
        };
        /**
         * Returns the redirect context for application requesting redirect.
         * If context is null, the application requesting redirect is the top frame application itself and not an embedded application.
         * If the context is a string value, the application requesting redirect is embedded and this will trigger the brokered redirect flow.
         * @returns {string | null} redirect context or null.
         */
        BrokerClientApplication.prototype.getRequestContext = function () {
            return this.brokerStorage.getRedirectRequestContext();
        };
        BrokerClientApplication.prototype.handleBrokerRedirect = function (hash) {
            return __awaiter$2(this, void 0, void 0, function () {
                var loggedInAccounts, redirectResponseKey, response, request, redirectResponse, brokerNativeInteractionClient, correlationId, redirectClient;
                var _this = this;
                return __generator$2(this, function (_a) {
                    this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_START, exports.InteractionType.Redirect);
                    this.logger.verbose("handleBrokerRedirect called");
                    loggedInAccounts = this.getAllAccounts();
                    if (this.isBrowserEnvironment) {
                        redirectResponseKey = hash || Constants.EMPTY_STRING;
                        response = this.redirectResponse.get(redirectResponseKey);
                        if (typeof response === "undefined") {
                            this.logger.verbose("handleRedirectPromise has been called for the first time, storing the promise");
                            request = this.browserStorage.getCachedNativeRequest();
                            redirectResponse = void 0;
                            if (request && NativeMessageHandler.isNativeAvailable(this.config, this.logger, this.nativeExtensionProvider) && this.nativeExtensionProvider && !hash) {
                                this.logger.trace("handleRedirectPromise - acquiring token from native platform");
                                brokerNativeInteractionClient = new BrokerNativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.ssoSilent, this.performanceClient, this.nativeExtensionProvider, this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
                                redirectResponse = brokerNativeInteractionClient.handleRedirectPromise();
                            }
                            else {
                                correlationId = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CORRELATION_ID, true) || "";
                                redirectClient = new BrokerRedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, correlationId);
                                redirectResponse = redirectClient.handleRedirectPromise(hash);
                            }
                            response = redirectResponse.then(function (result) {
                                if (result) {
                                    // Emit login event if number of accounts change
                                    var isLoggingIn = loggedInAccounts.length < _this.getAllAccounts().length;
                                    if (isLoggingIn) {
                                        _this.eventHandler.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Redirect, result);
                                        _this.logger.verbose("handleRedirectResponse returned result, login success");
                                    }
                                    else {
                                        _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Redirect, result);
                                        _this.logger.verbose("handleRedirectResponse returned result, acquire token success");
                                    }
                                }
                                _this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                                return result;
                            }).catch(function (e) {
                                // Emit login event if there is an account
                                if (loggedInAccounts.length > 0) {
                                    _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Redirect, null, e);
                                }
                                else {
                                    _this.eventHandler.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Redirect, null, e);
                                }
                                _this.eventHandler.emitEvent(exports.EventType.HANDLE_REDIRECT_END, exports.InteractionType.Redirect);
                                throw e;
                            });
                            this.redirectResponse.set(redirectResponseKey, response);
                        }
                        else {
                            this.logger.verbose("handleRedirectPromise has been called previously, returning the result from the first call");
                        }
                        return [2 /*return*/, response];
                    }
                    this.logger.verbose("handleRedirectPromise returns null, not browser environment");
                    return [2 /*return*/, null];
                });
            });
        };
        /**
         * Waits for the brokered response to finish and then checks if it needs to cache this response in internal memory.
         * @param brokerResponse
         */
        BrokerClientApplication.prototype.waitForBrokeredResponse = function (brokerResponse) {
            return __awaiter$2(this, void 0, void 0, function () {
                var cachedResponse;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, brokerResponse];
                        case 1:
                            cachedResponse = _a.sent();
                            if (cachedResponse) {
                                if (!cachedResponse.tokensToCache) {
                                    // If cached response does not have tokensToCache, it is meant for the broker, so return without caching.
                                    return [2 /*return*/, cachedResponse];
                                }
                                // Cache response with the thumbprint of the request
                                this.brokerStorage.setMemoryCache(this.brokerStorage.generateBrokerResponseKey(cachedResponse.responseThumbprint), JSON.stringify(cachedResponse));
                                this.setActiveAccount(cachedResponse.account);
                            }
                            return [2 /*return*/, null];
                    }
                });
            });
        };
        /**
         * Add event listener to start listening for messages to the broker.
         */
        BrokerClientApplication.prototype.listenForBrokerMessage = function (options) {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_a) {
                    this.logger.verbose("listening for child broker messages.");
                    window.addEventListener("message", this.handleBrokerMessage.bind(this));
                    if (options && options.codeRequest) {
                        this.hybridAuthPromise = this.acquireTokenByCode(options.codeRequest);
                    }
                    return [2 /*return*/, this.hybridAuthPromise];
                });
            });
        };
        /**
         * Handles a general broker message by checking the message type and calling the relevant API.
         * @param message
         */
        BrokerClientApplication.prototype.handleBrokerMessage = function (message) {
            return __awaiter$2(this, void 0, void 0, function () {
                var clientMessage, _a;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            clientMessage = BrokerMessage.validateMessage(message);
                            if (!clientMessage) return [3 /*break*/, 8];
                            _a = clientMessage.data.messageType;
                            switch (_a) {
                                case BrokerMessageType.HANDSHAKE_REQUEST: return [3 /*break*/, 1];
                                case BrokerMessageType.HANDLE_REDIRECT_REQUEST: return [3 /*break*/, 3];
                                case BrokerMessageType.AUTH_REQUEST: return [3 /*break*/, 5];
                            }
                            return [3 /*break*/, 7];
                        case 1:
                            this.logger.verbose("Broker handshake request received");
                            return [4 /*yield*/, this.handleBrokerHandshake(clientMessage)];
                        case 2: return [2 /*return*/, _b.sent()];
                        case 3:
                            this.logger.verbose("Broker handle redirect request received");
                            return [4 /*yield*/, this.handleBrokerRedirectResponse(clientMessage)];
                        case 4: return [2 /*return*/, _b.sent()];
                        case 5:
                            this.logger.verbose("Broker auth request received");
                            return [4 /*yield*/, this.handleBrokerAuthRequest(clientMessage)];
                        case 6: return [2 /*return*/, _b.sent()];
                        case 7: return [2 /*return*/];
                        case 8: return [2 /*return*/];
                    }
                });
            });
        };
        /* eslint-disable */
        /**
         * Handle a broker handshake request from a child.
         * @param clientMessage
         */
        BrokerClientApplication.prototype.handleBrokerHandshake = function (clientMessage) {
            return __awaiter$2(this, void 0, void 0, function () {
                var atsMeasurement, validMessage, brokerHandshakeResponse, e_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            atsMeasurement = startMeasurement(this.performanceClient, PerformanceEvents1P.BrokerClientApplicationHandleBrokerHandshake);
                            validMessage = BrokerHandshakeRequest.validate(clientMessage);
                            this.logger.verbose("Broker handshake validated: " + JSON.stringify(validMessage));
                            brokerHandshakeResponse = new BrokerHandshakeResponse(version$1, "");
                            if (!this.hybridAuthPromise) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.hybridAuthPromise];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            this.logger.error("Broker could obtain tokens use authorization code initializer: " + e_1);
                            return [3 /*break*/, 4];
                        case 4:
                            // @ts-ignore
                            clientMessage.source.postMessage(brokerHandshakeResponse, clientMessage.origin);
                            atsMeasurement.endMeasurement({
                                success: true
                            });
                            this.logger.verbose("Sending handshake response to " + clientMessage.origin);
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Returns a response that is relevant to the embedded application if handleRedirectPromise() was called from the embedded application.
         * @param clientMessage
         */
        BrokerClientApplication.prototype.handleBrokerRedirectResponse = function (clientMessage) {
            return __awaiter$2(this, void 0, void 0, function () {
                var validMessage, clientPort, cachedBrokerResponse, brokerResponse, clientPort_1, brokerAuthResponse, brokerAuthResponse;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            validMessage = BrokerHandleRedirectRequest.validate(clientMessage);
                            if (!validMessage) return [3 /*break*/, 3];
                            clientPort = clientMessage.ports[0];
                            if (!this.currentBrokerRedirectResponse) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.currentBrokerRedirectResponse];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            cachedBrokerResponse = this.brokerStorage.getBrokerResponseByOrigin(this.getEmbeddedAppRedirectUri(clientMessage.origin));
                            if (cachedBrokerResponse) {
                                brokerResponse = JSON.parse(cachedBrokerResponse);
                                clientPort_1 = clientMessage.ports[0];
                                brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Redirect, brokerResponse);
                                this.logger.verbosePii("Sending auth response");
                                clientPort_1.postMessage(brokerAuthResponse);
                                clientPort_1.close();
                                return [2 /*return*/];
                            }
                            else {
                                brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Redirect, null);
                                clientPort.postMessage(brokerAuthResponse);
                                clientPort.close();
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Handle a brokered auth request from the child.
         * @param clientMessage
         */
        BrokerClientApplication.prototype.handleBrokerAuthRequest = function (clientMessage) {
            return __awaiter$2(this, void 0, void 0, function () {
                var validMessage, reqThumbprint, cachedBrokerResponse, brokerResponse, clientPort, brokerAuthResponse, reqAccount, interactionType;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            validMessage = BrokerAuthRequest.validate(clientMessage);
                            if (!validMessage) return [3 /*break*/, 3];
                            if (!validMessage.request.authority || !validMessage.request.scopes) {
                                throw BrokerAuthError.createBrokerRequestIncompleteError();
                            }
                            startMeasurement(this.performanceClient, PerformanceEvents.AcquireTokenByBroker, validMessage.request.correlationId);
                            this.logger.verbose("Broker auth request validated: " + validMessage);
                            if (!this.currentBrokerRedirectResponse) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.currentBrokerRedirectResponse];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            reqThumbprint = {
                                authority: validMessage.request.authority,
                                clientId: validMessage.embeddedClientId,
                                scopes: validMessage.request.scopes
                            };
                            cachedBrokerResponse = this.brokerStorage.getBrokerResponseByThumbprint(reqThumbprint, this.getEmbeddedAppRedirectUri(validMessage.embeddedAppOrigin));
                            if (cachedBrokerResponse) {
                                brokerResponse = JSON.parse(cachedBrokerResponse);
                                clientPort = clientMessage.ports[0];
                                brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Redirect, brokerResponse);
                                this.logger.verbosePii("Sending auth response");
                                clientPort.postMessage(brokerAuthResponse);
                                clientPort.close();
                                return [2 /*return*/];
                            }
                            reqAccount = validMessage.request.account || this.getActiveAccount();
                            // Check the message interaction type and perform the appropriate brokered request.
                            switch (validMessage.interactionType) {
                                case exports.InteractionType.Silent:
                                    if (reqAccount) {
                                        return [2 /*return*/, this.brokeredSilentRequest(validMessage, clientMessage.ports[0], reqAccount)];
                                    }
                                    return [2 /*return*/, this.brokeredSsoSilentRequest(validMessage, clientMessage.ports[0])];
                                case exports.InteractionType.Redirect:
                                case exports.InteractionType.Popup:
                                default:
                                    interactionType = this.getInteractionType(validMessage.interactionType);
                                    return [2 /*return*/, this.interactiveBrokerRequest(interactionType, validMessage, clientMessage)];
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Checks default config for interaction type before returning.
         * @param messageInteractionType
         */
        BrokerClientApplication.prototype.getInteractionType = function (messageInteractionType) {
            var configuredPreferredType = this.experimentalConfig.brokerOptions.preferredInteractionType;
            return configuredPreferredType ? configuredPreferredType : messageInteractionType;
        };
        /**
         *
         * @param interactionType
         * @param validMessage
         * @param clientMessage
         */
        BrokerClientApplication.prototype.interactiveBrokerRequest = function (interactionType, validMessage, clientMessage) {
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_a) {
                    switch (interactionType) {
                        case exports.InteractionType.Redirect:
                            return [2 /*return*/, this.brokeredRedirectRequest(validMessage, clientMessage.ports[0])];
                        case exports.InteractionType.Popup:
                            return [2 /*return*/, this.brokeredPopupRequest(validMessage, clientMessage.ports[0])];
                        case exports.InteractionType.Silent:
                            this.logger.error("Invalid code path. interactiveBrokerRequest() should only be called for interactive requests.");
                            return [2 /*return*/];
                        case exports.InteractionType.None:
                            this.logger.error("Broker is blocking interactive requests. Please attempt a silent request or sign into the broker first.");
                            return [2 /*return*/];
                        default:
                            this.logger.error("Invalid code path. interactiveBrokerRequest() should only be called for interactive requests.");
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send redirect request as the broker.
         * @param validMessage
         * @param clientPort
         */
        BrokerClientApplication.prototype.brokeredRedirectRequest = function (validMessage, clientPort) {
            var _a, _b;
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerRedirectResp, redirectRequest, redirectClient, account, redirectNativeRequest, err_1, brokerAuthResponse;
                return __generator$2(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            this.logger.verbose("Brokered redirect request initiated.");
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 5, , 6]);
                            brokerRedirectResp = new BrokerRedirectResponse();
                            clientPort.postMessage(brokerRedirectResp);
                            clientPort.close();
                            this.logger.verbose("Sending redirect response: " + brokerRedirectResp);
                            redirectRequest = validMessage.request;
                            redirectClient = new BrokerRedirectClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, redirectRequest.correlationId);
                            redirectRequest.redirectUri = validMessage.embeddedAppOrigin;
                            redirectRequest.embeddedAppClientId = validMessage.embeddedClientId;
                            redirectRequest.brokerRedirectUri = redirectClient.getRedirectUri();
                            redirectRequest.redirectStartPage = (_a = this.experimentalConfig.brokerOptions.brokerRedirectParams) === null || _a === void 0 ? void 0 : _a.redirectStartPage;
                            redirectRequest.onRedirectNavigate = (_b = this.experimentalConfig.brokerOptions.brokerRedirectParams) === null || _b === void 0 ? void 0 : _b.onRedirectNavigate;
                            account = redirectRequest.account || this.getActiveAccount();
                            if (!this.canUseNative(redirectRequest, account === null || account === void 0 ? void 0 : account.nativeAccountId)) return [3 /*break*/, 3];
                            this.logger.verbose("Native flow available for broker.");
                            redirectRequest.embeddedAppRedirectUri = this.getEmbeddedAppRedirectUri(validMessage.embeddedAppOrigin);
                            redirectNativeRequest = validMessage.request;
                            // For the double-broker case, we need to add two additional parameters to the request
                            // that identify the embedded application requesting for tokens via the broker.
                            redirectNativeRequest.extraQueryParameters = __assign$2(__assign$2({}, redirectNativeRequest.extraQueryParameters), { child_client_id: redirectRequest.embeddedAppClientId, child_redirect_uri: redirectRequest.embeddedAppRedirectUri });
                            redirectNativeRequest.redirectUri = BrowserUtils.getCurrentUri();
                            this.browserStorage.setRedirectRequestContext(redirectRequest.embeddedAppClientId);
                            this.browserStorage.setInteractionInProgress(true);
                            return [4 /*yield*/, this.acquireTokenByNative(redirectNativeRequest, exports.ApiId.acquireTokenRedirect)];
                        case 2:
                            (_c.sent());
                            return [3 /*break*/, 4];
                        case 3:
                        // Call redirectClient.acquireToken()
                        return [2 /*return*/, redirectClient.acquireToken(redirectRequest)];
                        case 4: return [3 /*break*/, 6];
                        case 5:
                            err_1 = _c.sent();
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Redirect, null, err_1);
                            this.logger.verbose("Found auth error in redirect: " + err_1);
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            return [3 /*break*/, 6];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send popup request as the broker.
         * @param validMessage
         * @param clientPort
         */
        BrokerClientApplication.prototype.brokeredPopupRequest = function (validMessage, clientPort) {
            return __awaiter$2(this, void 0, void 0, function () {
                var popupRequest, popupClient, response, activeAccount, popupNativeRequest, brokerAuthResponse, err_2, brokerAuthResponse;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.logger.verbose("Brokered popup request initiated.");
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            popupRequest = validMessage.request;
                            popupClient = new BrokerPopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, popupRequest.correlationId);
                            popupRequest.redirectUri = validMessage.embeddedAppOrigin;
                            popupRequest.embeddedAppClientId = validMessage.embeddedClientId;
                            popupRequest.brokerRedirectUri = popupClient.getRedirectUri();
                            response = void 0;
                            activeAccount = popupRequest.account || this.getActiveAccount();
                            if (!this.canUseNative(popupRequest, activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.nativeAccountId)) return [3 /*break*/, 3];
                            this.logger.verbose("Native flow available for broker.");
                            popupRequest.embeddedAppRedirectUri = this.getEmbeddedAppRedirectUri(validMessage.embeddedAppOrigin);
                            popupNativeRequest = validMessage.request;
                            // For the double-broker case, we need to add two additional parameters to the request
                            // that identify the embedded application requesting for tokens via the broker.
                            popupNativeRequest.extraQueryParameters = __assign$2(__assign$2({}, popupNativeRequest.extraQueryParameters), { child_client_id: popupRequest.embeddedAppClientId, child_redirect_uri: popupRequest.embeddedAppRedirectUri });
                            popupNativeRequest.redirectUri = BrowserUtils.getCurrentUri();
                            return [4 /*yield*/, this.acquireTokenByNative(popupNativeRequest, exports.ApiId.acquireTokenPopup)];
                        case 2:
                            response = (_a.sent());
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, popupClient.acquireToken(popupRequest)];
                        case 4:
                            // Call acquireTokenPopup() and send the response back to the embedded application.
                            response = (_a.sent());
                            _a.label = 5;
                        case 5:
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Popup, response);
                            this.logger.verbosePii("Sending auth response");
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            return [3 /*break*/, 7];
                        case 6:
                            err_2 = _a.sent();
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Popup, null, err_2);
                            this.logger.verbose("Found auth error in popup: " + err_2);
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         *
         * @param validMessage
         * @param clientPort
         */
        BrokerClientApplication.prototype.brokeredSsoSilentRequest = function (validMessage, clientPort) {
            var _a, _b, _c, _d;
            return __awaiter$2(this, void 0, void 0, function () {
                var atsMeasurement, silentRequest, silentIframeClient, response, activeAccount, ssoSilentNativeRequest, brokerAuthResponse, err_3, brokerAuthResponse;
                return __generator$2(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            atsMeasurement = startMeasurement(this.performanceClient, PerformanceEvents1P.BrokerClientApplicationBrokeredSSOSilentRequest, validMessage.request.correlationId);
                            this.logger.verbose("Brokered SSO Silent request initiated.");
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 6, , 7]);
                            silentRequest = validMessage.request;
                            silentIframeClient = new BrokerSilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, silentRequest.correlationId);
                            silentRequest.redirectUri = validMessage.embeddedAppOrigin;
                            silentRequest.embeddedAppClientId = validMessage.embeddedClientId;
                            silentRequest.brokerRedirectUri = silentIframeClient.getRedirectUri();
                            response = void 0;
                            activeAccount = silentRequest.account || this.getActiveAccount();
                            if (!this.canUseNative(silentRequest, activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.nativeAccountId)) return [3 /*break*/, 3];
                            this.logger.verbose("Native flow available for broker.");
                            silentRequest.embeddedAppRedirectUri = this.getEmbeddedAppRedirectUri(validMessage.embeddedAppOrigin);
                            ssoSilentNativeRequest = validMessage.request;
                            // For the double-broker case, we need to add two additional parameters to the request
                            // that identify the embedded application requesting for tokens via the broker.
                            ssoSilentNativeRequest.extraQueryParameters = __assign$2(__assign$2({}, ssoSilentNativeRequest.extraQueryParameters), { child_client_id: silentRequest.embeddedAppClientId, child_redirect_uri: silentRequest.embeddedAppRedirectUri });
                            ssoSilentNativeRequest.redirectUri = BrowserUtils.getCurrentUri();
                            return [4 /*yield*/, this.acquireTokenByNative(ssoSilentNativeRequest, exports.ApiId.ssoSilent)];
                        case 2:
                            response = (_e.sent());
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, silentIframeClient.acquireToken(silentRequest)];
                        case 4:
                            // Call ssoSilent() and send the response back to the embedded application.
                            response = (_e.sent());
                            _e.label = 5;
                        case 5:
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Silent, response);
                            this.logger.verbosePii("Sending auth response");
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            atsMeasurement.endMeasurement({
                                success: true,
                                fromCache: (_a = brokerAuthResponse.result) === null || _a === void 0 ? void 0 : _a.fromCache,
                                accessTokenSize: (_b = brokerAuthResponse.result) === null || _b === void 0 ? void 0 : _b.accessToken.length,
                                idTokenSize: (_c = brokerAuthResponse.result) === null || _c === void 0 ? void 0 : _c.idToken.length,
                                requestId: (_d = brokerAuthResponse.result) === null || _d === void 0 ? void 0 : _d.requestId
                            });
                            return [3 /*break*/, 7];
                        case 6:
                            err_3 = _e.sent();
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Silent, null, err_3);
                            this.logger.verbose("Found auth error in ssoSilent: " + err_3);
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            atsMeasurement.endMeasurement({
                                errorCode: err_3.errorCode,
                                subErrorCode: err_3.subError,
                                success: false,
                            });
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send silent renewal request as the broker.
         * @param validMessage
         * @param clientPort
         */
        BrokerClientApplication.prototype.brokeredSilentRequest = function (validMessage, clientPort, account) {
            return __awaiter$2(this, void 0, void 0, function () {
                var atsMeasurement, silentRequest, response, silentNativeRequest, brokerAuthResponse, noTokensErr, brokerAuthResponse_1, err_4, brokerAuthResponse;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            atsMeasurement = startMeasurement(this.performanceClient, PerformanceEvents1P.BrokerClientApplicationBrokeredSilentRequest, validMessage.request.correlationId);
                            this.logger.verbose("Brokered Silent request initiated.");
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            silentRequest = validMessage.request;
                            silentRequest.embeddedAppClientId = validMessage.embeddedClientId;
                            silentRequest.embeddedAppRedirectUri = validMessage.embeddedAppOrigin;
                            if (!silentRequest.account) {
                                silentRequest.account = account;
                            }
                            response = void 0;
                            if (!this.canUseNative(silentRequest)) return [3 /*break*/, 3];
                            this.logger.verbose("Native flow available for broker.");
                            silentRequest.embeddedAppRedirectUri = this.getEmbeddedAppRedirectUri(validMessage.embeddedAppOrigin);
                            silentNativeRequest = validMessage.request;
                            // For the double-broker case, we need to add two additional parameters to the request
                            // that identify the embedded application requesting for tokens via the broker.
                            silentNativeRequest.extraQueryParameters = __assign$2(__assign$2({}, silentNativeRequest.extraQueryParameters), { child_client_id: silentRequest.embeddedAppClientId, child_redirect_uri: silentRequest.embeddedAppRedirectUri });
                            silentNativeRequest.redirectUri = BrowserUtils.getCurrentUri();
                            return [4 /*yield*/, this.acquireTokenByNative(silentNativeRequest, exports.ApiId.acquireTokenSilent_silentFlow)];
                        case 2:
                            response = (_a.sent());
                            return [3 /*break*/, 5];
                        case 3: return [4 /*yield*/, this.acquireTokenByRefreshToken(silentRequest)];
                        case 4:
                            // Call acquireTokenByRefreshToken() to get a new set of tokens for the embedded app
                            response = (_a.sent());
                            _a.label = 5;
                        case 5:
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Silent, response);
                            if (brokerAuthResponse.result && brokerAuthResponse.result.tokensToCache) {
                                this.logger.verbosePii("Sending auth response: " + JSON.stringify(brokerAuthResponse));
                                clientPort.postMessage(brokerAuthResponse);
                                clientPort.close();
                                atsMeasurement.endMeasurement({
                                    success: true,
                                    fromCache: brokerAuthResponse.result.fromCache,
                                    accessTokenSize: brokerAuthResponse.result.accessToken.length,
                                    idTokenSize: brokerAuthResponse.result.idToken.length,
                                    isNativeBroker: brokerAuthResponse.result.fromNativeBroker,
                                    requestId: brokerAuthResponse.result.requestId
                                });
                            }
                            else {
                                noTokensErr = BrokerAuthError.createNoTokensToCacheError();
                                brokerAuthResponse_1 = new BrokerAuthResponse(exports.InteractionType.Silent, null, noTokensErr);
                                this.logger.verbose("" + noTokensErr);
                                clientPort.postMessage(brokerAuthResponse_1);
                                clientPort.close();
                                atsMeasurement.endMeasurement({
                                    errorCode: noTokensErr.errorCode,
                                    subErrorCode: noTokensErr.subError,
                                    success: false
                                });
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            err_4 = _a.sent();
                            brokerAuthResponse = new BrokerAuthResponse(exports.InteractionType.Silent, null, err_4);
                            this.logger.verbose("Found auth error in silent: " + err_4);
                            clientPort.postMessage(brokerAuthResponse);
                            clientPort.close();
                            atsMeasurement.endMeasurement({
                                errorCode: err_4.errorCode,
                                subErrorCode: err_4.subError,
                                success: false,
                            });
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Use this function to obtain a token before every call to the API / resource provider
         *
         * MSAL return's a cached token when available
         * Or it send's a request to the STS to obtain a new token using a refresh token.
         *
         * @param {@link SilentRequest}
         *
         * To renew idToken, please pass clientId as the only scope in the Authentication Parameters
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        BrokerClientApplication.prototype.acquireTokenByRefreshToken = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var silentRefreshClient;
                var _this = this;
                return __generator$2(this, function (_a) {
                    this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_NETWORK_START, exports.InteractionType.Silent, request);
                    // block the reload if it occurred inside a hidden iframe
                    BrowserUtils.blockReloadInHiddenIframes();
                    silentRefreshClient = new BrokerSilentRefreshClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeExtensionProvider, request.correlationId);
                    return [2 /*return*/, silentRefreshClient.acquireToken(request).catch(function (e) {
                            var isServerError = e instanceof ServerError;
                            var isInteractionRequiredError = e instanceof InteractionRequiredAuthError;
                            var isInvalidGrantError = (e.errorCode === BrowserConstants.INVALID_GRANT_ERROR);
                            if (isServerError && isInvalidGrantError && !isInteractionRequiredError) {
                                _this.logger.verbose("Refresh token expired or invalid, attempting acquire token by iframe", request.correlationId);
                                var silentIframeClient = new BrokerSilentIframeClient(_this.config, _this.browserStorage, _this.browserCrypto, _this.logger, _this.eventHandler, _this.navigationClient, exports.ApiId.acquireTokenSilent_authCode, _this.performanceClient, _this.nativeInternalStorage, _this.nativeExtensionProvider);
                                return silentIframeClient.acquireToken(__assign$2(__assign$2({}, request), { brokerRedirectUri: silentRefreshClient.getRedirectUri() }));
                            }
                            throw e;
                        })];
                });
            });
        };
        BrokerClientApplication.prototype.acquireTokenByNative = function (request, apiId, accountId) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerNativeInteractionClient;
                var _this = this;
                return __generator$2(this, function (_a) {
                    this.logger.trace("Brokered acquireTokenNative called");
                    if (!this.nativeExtensionProvider) {
                        throw BrowserAuthError.createNativeConnectionNotEstablishedError();
                    }
                    brokerNativeInteractionClient = new BrokerNativeInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.ssoSilent, this.performanceClient, this.nativeExtensionProvider, accountId || this.getNativeAccountId(request), this.nativeInternalStorage, request.correlationId);
                    if (apiId === exports.ApiId.acquireTokenRedirect) {
                        return [2 /*return*/, brokerNativeInteractionClient.acquireTokenRedirect(request)];
                    }
                    else {
                        return [2 /*return*/, brokerNativeInteractionClient.acquireToken(request).catch(function (e) {
                                // If native token acquisition fails for availability reasons fallback to standard flow
                                if (e instanceof NativeAuthError && e.isFatal()) {
                                    _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                                }
                                throw e;
                            })];
                    }
                });
            });
        };
        /**
         * This function generates the embedded app redirect URI in the case of Pairwise broker with native enabled (double-broker).
         * The Native broker requires the PwB to send it's redirect URI in the form of "brk-[pairwise broker app ID]://www.childapplication.com".
         * @param embeddedAppOrigin
         * @returns Embedded app redirect URI
         */
        BrokerClientApplication.prototype.getEmbeddedAppRedirectUri = function (embeddedAppOrigin) {
            var requestParameterBuilder = new RequestParameterBuilder();
            return requestParameterBuilder.buildRedirectUri(embeddedAppOrigin, this.config.auth.clientId);
        };
        return BrokerClientApplication;
    }(PublicClientApplication));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var BrokerTimeoutType;
    (function (BrokerTimeoutType) {
        BrokerTimeoutType["Interaction"] = "brokerInteractionTimeoutMs";
        BrokerTimeoutType["Message"] = "brokerMessageTimeoutMs";
        BrokerTimeoutType["Iframe"] = "brokerIframeTimeoutMs";
    })(BrokerTimeoutType || (BrokerTimeoutType = {}));
    var BrokerTimeoutError;
    (function (BrokerTimeoutError) {
        BrokerTimeoutError["Interaction"] = "brokerInteractionTimedOut";
        BrokerTimeoutError["Message"] = "brokerMessageTimedOut";
        BrokerTimeoutError["Iframe"] = "brokerIframeTimedOut";
    })(BrokerTimeoutError || (BrokerTimeoutError = {}));
    /**
     * Embedded application in a broker scenario.
     */
    var EmbeddedClientApplication = /** @class */ (function () {
        function EmbeddedClientApplication(clientId, experimentalConfig, logger, browserStorage, performanceClient) {
            this.brokerOpts = experimentalConfig;
            this.clientId = clientId;
            this.logger = logger;
            this.browserStorage = browserStorage;
            this.brokerConnectionEstablished = false;
            this.version = version$1;
            this.brokerOrigin = Constants.EMPTY_STRING;
            this.performanceClient = performanceClient;
        }
        Object.defineProperty(EmbeddedClientApplication.prototype, "trustedBrokersProvided", {
            get: function () {
                return !!this.brokerOpts.trustedBrokerDomains && this.brokerOpts.trustedBrokerDomains.length >= 1;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Initiate handshake process with broker
         * @param performanceEvent {?InProgressPerformanceEvent}
         */
        EmbeddedClientApplication.prototype.initiateHandshake = function (performanceEvent) {
            return __awaiter$2(this, void 0, void 0, function () {
                var response, e_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.trustedBrokersProvided) {
                                throw BrokerAuthError.createNoTrustedBrokersProvidedError();
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.sendHandshakeRequest(performanceEvent)];
                        case 2:
                            response = _a.sent();
                            this.brokerOrigin = response.brokerOrigin;
                            this.brokerConnectionEstablished = true;
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            this.logger.error(e_1.message);
                            this.brokerConnectionEstablished = false;
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Preflight request to broker and check that handshake was completed.
         */
        EmbeddedClientApplication.prototype.preflightBrokerRequest = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var e_2;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.brokerConnectionEstablished) return [3 /*break*/, 4];
                            this.logger.verbose("Attempting handshake...");
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.initiateHandshake(this.performanceEvent)];
                        case 2:
                            _a.sent(); // calling initiate handshake
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _a.sent();
                            this.logger.error("Handshake rejected");
                            throw BrokerAuthError.createBrokeringDisabledError(e_2.message);
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send silent flow request to broker
         * @param {SsoSilentRequest} request
         */
        EmbeddedClientApplication.prototype.sendSsoSilentRequest = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerAuthResultMessage, brokerAuthResult, err_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceEvent = startMeasurement(this.performanceClient, PerformanceEvents1P.EmbeddedClientApplicationSendSSOSilentRequest, request.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.preflightBrokerRequest()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.sendRequest(request, exports.InteractionType.Silent, {
                                    type: BrokerTimeoutType.Iframe,
                                    error: BrokerTimeoutError.Iframe,
                                    value: DEFAULT_IFRAME_TIMEOUT_MS
                                })];
                        case 3:
                            brokerAuthResultMessage = _a.sent();
                            brokerAuthResult = BrokerAuthResponse.processBrokerResponseMessage(brokerAuthResultMessage, this.browserStorage);
                            if (brokerAuthResult) {
                                this.performanceEvent.endMeasurement({
                                    success: true,
                                    fromCache: brokerAuthResult.fromCache,
                                    accessTokenSize: brokerAuthResult.accessToken.length,
                                    idTokenSize: brokerAuthResult.idToken.length,
                                    isNativeBroker: brokerAuthResult.fromNativeBroker,
                                    requestId: brokerAuthResult.requestId
                                });
                            }
                            else {
                                this.performanceEvent.endMeasurement({
                                    success: false,
                                });
                                this.logger.errorPii("Broker response is empty in brokered ssoSilent request: " + JSON.stringify(brokerAuthResult));
                                throw BrokerAuthError.createBrokerResponseInvalidError();
                            }
                            return [2 /*return*/, brokerAuthResult];
                        case 4:
                            err_1 = _a.sent();
                            this.performanceEvent.endMeasurement({
                                success: false,
                            });
                            throw err_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send popup flow request to broker.
         * @param ${PopupRequest} request
         */
        EmbeddedClientApplication.prototype.sendPopupRequest = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerAuthResultMessage, brokerAuthResult, redirectResponse, err_2;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceEvent = startMeasurement(this.performanceClient, PerformanceEvents1P.EmbeddedClientApplicationSendPopupRequest, request.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.preflightBrokerRequest()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.sendRequest(request, exports.InteractionType.Popup, {
                                    type: BrokerTimeoutType.Interaction,
                                    error: BrokerTimeoutError.Interaction,
                                    value: this.brokerOpts.brokerInteractionTimeout
                                })];
                        case 3:
                            brokerAuthResultMessage = _a.sent();
                            brokerAuthResult = BrokerAuthResponse.processBrokerResponseMessage(brokerAuthResultMessage, this.browserStorage);
                            if (brokerAuthResult) {
                                this.performanceEvent.endMeasurement({
                                    success: true,
                                    fromCache: brokerAuthResult.fromCache,
                                    accessTokenSize: brokerAuthResult.accessToken.length,
                                    idTokenSize: brokerAuthResult.idToken.length,
                                    isNativeBroker: brokerAuthResult.fromNativeBroker,
                                    requestId: brokerAuthResult.requestId
                                });
                            }
                            else {
                                this.performanceEvent.endMeasurement({
                                    success: false,
                                });
                                redirectResponse = BrokerRedirectResponse.validate(brokerAuthResultMessage);
                                if (!redirectResponse) {
                                    this.logger.errorPii("Broker response is empty in brokered popup request: " + JSON.stringify(brokerAuthResult));
                                    throw BrokerAuthError.createBrokerResponseInvalidError();
                                }
                                this.logger.verbose("popupRequest requires a redirect by the broker, this app will now redirect.");
                                throw BrokerAuthError.createBrokerPopupRequestRedirectingError();
                            }
                            return [2 /*return*/, brokerAuthResult];
                        case 4:
                            err_2 = _a.sent();
                            this.performanceEvent.endMeasurement({
                                success: false,
                            });
                            throw err_2;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send redirect request to broker.
         * @param {RedirectRequest} request
         */
        EmbeddedClientApplication.prototype.sendRedirectRequest = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var message, redirectResponse, err_3;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceEvent = startMeasurement(this.performanceClient, PerformanceEvents1P.EmbeddedClientApplicationSendRedirectRequest, request.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.preflightBrokerRequest()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.sendRequest(request, exports.InteractionType.Redirect, {
                                    type: BrokerTimeoutType.Interaction,
                                    error: BrokerTimeoutError.Interaction,
                                    value: this.brokerOpts.brokerInteractionTimeout
                                })];
                        case 3:
                            message = _a.sent();
                            redirectResponse = BrokerRedirectResponse.validate(message);
                            if (!redirectResponse) {
                                this.logger.errorPii("Broker response is not a redirect: " + JSON.stringify(redirectResponse));
                                throw BrokerAuthError.createBrokerResponseInvalidError();
                            }
                            this.logger.verbose("Broker redirecting: " + redirectResponse);
                            this.performanceEvent.endMeasurement({ success: true });
                            return [3 /*break*/, 5];
                        case 4:
                            err_3 = _a.sent();
                            this.performanceEvent.endMeasurement({ success: false });
                            throw err_3;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send request to broker to handle redirect response for child.
         */
        EmbeddedClientApplication.prototype.sendHandleRedirectRequest = function () {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerHandleRedirectRequest, brokerRedirectResponse, brokerAuthResult, err_4;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceEvent = startMeasurement(this.performanceClient, PerformanceEvents1P.EmbeddedClientApplicationHandleRedirectRequest);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.preflightBrokerRequest()];
                        case 2:
                            _a.sent();
                            brokerHandleRedirectRequest = new BrokerHandleRedirectRequest(this.clientId, this.version);
                            return [4 /*yield*/, this.messageBroker(brokerHandleRedirectRequest, {
                                    type: BrokerTimeoutType.Message,
                                    error: BrokerTimeoutError.Message,
                                    value: this.brokerOpts.brokerMessageTimeout
                                })];
                        case 3:
                            brokerRedirectResponse = _a.sent();
                            brokerAuthResult = BrokerAuthResponse.processBrokerResponseMessage(brokerRedirectResponse, this.browserStorage);
                            this.performanceEvent.endMeasurement({
                                success: true,
                                fromCache: brokerAuthResult === null || brokerAuthResult === void 0 ? void 0 : brokerAuthResult.fromCache,
                                accessTokenSize: brokerAuthResult === null || brokerAuthResult === void 0 ? void 0 : brokerAuthResult.accessToken.length,
                                idTokenSize: brokerAuthResult === null || brokerAuthResult === void 0 ? void 0 : brokerAuthResult.idToken.length,
                                isNativeBroker: brokerAuthResult === null || brokerAuthResult === void 0 ? void 0 : brokerAuthResult.fromNativeBroker
                            });
                            return [2 /*return*/, brokerAuthResult];
                        case 4:
                            err_4 = _a.sent();
                            this.performanceEvent.endMeasurement({ success: false });
                            throw err_4;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Send request to silently renew tokens to broker.
         * @param {SilentRequest} request
         */
        EmbeddedClientApplication.prototype.sendSilentRefreshRequest = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerAuthResultMessage, brokerAuthResult, err_5;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.performanceEvent = startMeasurement(this.performanceClient, PerformanceEvents1P.EmbeddedClientApplicationSendSilentRefreshRequest, request.correlationId);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 4, , 5]);
                            return [4 /*yield*/, this.preflightBrokerRequest()];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.sendRequest(request, exports.InteractionType.Silent, {
                                    type: BrokerTimeoutType.Message,
                                    error: BrokerTimeoutError.Message,
                                    value: this.brokerOpts.brokerMessageTimeout
                                })];
                        case 3:
                            brokerAuthResultMessage = _a.sent();
                            brokerAuthResult = BrokerAuthResponse.processBrokerResponseMessage(brokerAuthResultMessage, this.browserStorage);
                            if (brokerAuthResult) {
                                this.performanceEvent.endMeasurement({
                                    success: true,
                                    fromCache: brokerAuthResult.fromCache,
                                    accessTokenSize: brokerAuthResult.accessToken.length,
                                    idTokenSize: brokerAuthResult.idToken.length,
                                    isNativeBroker: brokerAuthResult.fromNativeBroker
                                });
                            }
                            else {
                                this.logger.errorPii("Broker response is empty in brokered silent refresh request: " + JSON.stringify(brokerAuthResult));
                                throw BrokerAuthError.createBrokerResponseInvalidError();
                            }
                            return [2 /*return*/, brokerAuthResult];
                        case 4:
                            err_5 = _a.sent();
                            this.performanceEvent.endMeasurement({ success: false });
                            throw err_5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Helper for sending request to broker.
         * @param {PopupRequest | RedirectRequest | SsoSilentRequest | SilentRequest} request
         * @param {InteractionType} interactionType
         * @param {BrokerTimeout} brokerTimeout
         */
        EmbeddedClientApplication.prototype.sendRequest = function (request, interactionType, brokerTimeout) {
            return __awaiter$2(this, void 0, void 0, function () {
                var brokerRequest;
                return __generator$2(this, function (_a) {
                    brokerRequest = new BrokerAuthRequest(this.clientId, interactionType, request, Constants.EMPTY_STRING);
                    return [2 /*return*/, this.messageBroker(brokerRequest, brokerTimeout)];
                });
            });
        };
        /**
         * Send handshake request helper. Handshake is done without MessageChannel to ensure that the origin can be read from the message.
         * Subsequent requests for authentication are sent over a MessageChannel, as origin is no longer required.
         * @param performanceEvent {?InProgressPerformanceEvent}
         */
        EmbeddedClientApplication.prototype.sendHandshakeRequest = function (performanceEvent) {
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$2(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var _a;
                            var timeoutId = setTimeout(function () {
                                _this.logger.warning("Broker handshake timed out");
                                window.removeEventListener("message", onHandshakeResponse);
                                addStaticFields(performanceEvent, { brokerHandshakeTimedOut: true });
                                reject(BrokerAuthError.createMessageBrokerHandshakeTimeoutError());
                            }, _this.brokerOpts.brokerHandshakeTimeout);
                            addStaticFields(performanceEvent, { brokerHandshakeTimeoutMs: _this.brokerOpts.brokerHandshakeTimeout });
                            var onHandshakeResponse = function (message) {
                                try {
                                    var brokerHandshakeResponse = BrokerHandshakeResponse.validate(message, _this.brokerOpts.trustedBrokerDomains);
                                    if (brokerHandshakeResponse) {
                                        clearTimeout(timeoutId);
                                        _this.logger.verbose("Received handshake response: " + JSON.stringify(brokerHandshakeResponse));
                                        window.removeEventListener("message", onHandshakeResponse);
                                        resolve(brokerHandshakeResponse);
                                    }
                                    else {
                                        _this.logger.warning("Message is not handshake response");
                                        _this.logger.verbosePii("" + JSON.stringify(message.data));
                                    }
                                }
                                catch (e) {
                                    window.removeEventListener("message", onHandshakeResponse);
                                    reject(e);
                                }
                            };
                            window.addEventListener("message", onHandshakeResponse);
                            var handshakeRequest = new BrokerHandshakeRequest(_this.clientId, _this.version);
                            _this.logger.verbose("Sending handshake request: " + handshakeRequest);
                            // Message top frame window
                            (_a = window.top) === null || _a === void 0 ? void 0 : _a.postMessage(handshakeRequest, "*"); // sending handshake request to broker without MessageChannel as first req
                        })];
                });
            });
        };
        /**
         * Broker message helper.
         * @param {BrokerAuthRequest | BrokerHandleRedirectRequest} payload
         * @param {BrokerTimeout} brokerTimeout
         */
        EmbeddedClientApplication.prototype.messageBroker = function (payload, brokerTimeout) {
            if (brokerTimeout === void 0) { brokerTimeout = {
                type: BrokerTimeoutType.Message,
                error: BrokerTimeoutError.Message,
                value: this.brokerOpts.brokerMessageTimeout
            }; }
            return __awaiter$2(this, void 0, void 0, function () {
                var _this = this;
                return __generator$2(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var _a;
                            var timeoutId = setTimeout(function () {
                                var staticFields = {};
                                var timeoutError = brokerTimeout.error.toString();
                                staticFields[timeoutError] = true;
                                addStaticFields(_this.performanceEvent, staticFields);
                                reject(BrokerAuthError.createMessageBrokerTimeoutError());
                            }, brokerTimeout.value);
                            var staticFields = {};
                            var timeoutType = brokerTimeout.type.toString();
                            staticFields[timeoutType] = brokerTimeout.value;
                            addStaticFields(_this.performanceEvent, staticFields);
                            /*
                             * MessageChannel API listens on port1 and passes port2 up to the broker.
                             * Broker will use port2 to message back down to the embedded client.
                             */
                            var channel = _this.messageChannel || new MessageChannel();
                            channel.port1.onmessage = (function (message) {
                                _this.logger.verbose("in messageBroker<T> w/ origin: " + message);
                                clearTimeout(timeoutId);
                                channel.port1.close();
                                resolve(message);
                            });
                            // Message top frame window
                            (_a = window.top) === null || _a === void 0 ? void 0 : _a.postMessage(payload, _this.brokerOrigin, [channel.port2]);
                        })];
                });
            });
        };
        /**
         * Inject message channel for testing.
         * @param messageChannel {MessageChannel}
         */
        EmbeddedClientApplication.prototype.setMessageChannel = function (messageChannel) {
            this.messageChannel = messageChannel;
        };
        return EmbeddedClientApplication;
    }());

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var EmbeddedInteractionClient = /** @class */ (function (_super) {
        __extends$2(EmbeddedInteractionClient, _super);
        function EmbeddedInteractionClient(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, experimentalConfig, performanceClient, nativeMessageHandler, correlationId, embeddedApp, brokerApp) {
            var _this = _super.call(this, config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId) || this;
            _this.experimentalConfig = experimentalConfig;
            _this.embeddedApp = embeddedApp;
            _this.broker = brokerApp;
            return _this;
        }
        EmbeddedInteractionClient.prototype.acquireToken = function () {
            throw new Error("Method not implemented.");
        };
        EmbeddedInteractionClient.prototype.acquireTokenPopup = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var validRequest;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.embeddedApp) {
                                throw BrokerAuthError.createNoEmbeddedAppError();
                            }
                            return [4 /*yield*/, this.initializeAuthorizationRequest(request, exports.InteractionType.Popup)];
                        case 1:
                            validRequest = _a.sent();
                            return [2 /*return*/, this.embeddedApp.sendPopupRequest(validRequest)];
                    }
                });
            });
        };
        EmbeddedInteractionClient.prototype.ssoSilent = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var silentRequest, e_1;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.embeddedApp) {
                                throw BrokerAuthError.createNoEmbeddedAppError();
                            }
                            return [4 /*yield*/, this.initializeAuthorizationRequest(__assign$2(__assign$2({}, request), { prompt: PromptValue.NONE }), exports.InteractionType.Silent)];
                        case 1:
                            silentRequest = _a.sent();
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 4, , 5]);
                            return [4 /*yield*/, this.embeddedApp.sendSsoSilentRequest(silentRequest)];
                        case 3: return [2 /*return*/, _a.sent()];
                        case 4:
                            e_1 = _a.sent();
                            if (e_1 instanceof AuthError) {
                                e_1.setCorrelationId(this.correlationId);
                            }
                            this.browserStorage.cleanRequestByState(silentRequest.state);
                            throw e_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        EmbeddedInteractionClient.prototype.acquireTokenByBrokerRefresh = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var tokenRenewalResult;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.embeddedApp) {
                                throw BrokerAuthError.createNoEmbeddedAppError();
                            }
                            return [4 /*yield*/, this.embeddedApp.sendSilentRefreshRequest(request)];
                        case 1:
                            tokenRenewalResult = _a.sent();
                            this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Silent, tokenRenewalResult);
                            return [2 /*return*/, tokenRenewalResult];
                    }
                });
            });
        };
        EmbeddedInteractionClient.prototype.logout = function () {
            throw new Error("Method not implemented.");
        };
        return EmbeddedInteractionClient;
    }(StandardInteractionClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License.
     */
    var ExperimentalPublicClientApplication = /** @class */ (function (_super) {
        __extends$2(ExperimentalPublicClientApplication, _super);
        function ExperimentalPublicClientApplication(configuration, experimentalConfiguration, firstPartyConfiguration) {
            var _this = _super.call(this, configuration, firstPartyConfiguration) || this;
            _this.experimentalConfig = buildExperimentalConfiguration(experimentalConfiguration);
            return _this;
        }
        /**
         * Initialize brokering
         * @param {?BrokerInitializationOptions} options
         */
        ExperimentalPublicClientApplication.prototype.initializeBrokering = function (options) {
            return __awaiter$2(this, void 0, void 0, function () {
                var atsMeasurement;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.isBrowserEnvironment) {
                                return [2 /*return*/];
                            }
                            atsMeasurement = startMeasurement(this.performanceClient, PerformanceEvents1P.ExperimentalPublicClientApplicationInitializeBrokering);
                            if (!(this.experimentalConfig.brokerOptions.actAsBroker && !BrowserUtils.isInIframe())) return [3 /*break*/, 3];
                            if (this.experimentalConfig.brokerOptions.allowBrokering) {
                                this.logger.verbose("Running in top frame and both actAsBroker, allowBrokering flags set to true. actAsBroker takes precedence.");
                            }
                            this.broker = new BrokerClientApplication(this.config, this.experimentalConfig);
                            this.logger.verbose("Acting as Broker");
                            this.logger.verbose("Initialize the extension for the new broker instance");
                            return [4 /*yield*/, this.broker.initialize()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.broker.listenForBrokerMessage(options)];
                        case 2:
                            _a.sent();
                            atsMeasurement.endMeasurement({
                                success: true
                            });
                            return [3 /*break*/, 5];
                        case 3:
                            if (!this.experimentalConfig.brokerOptions.allowBrokering) return [3 /*break*/, 5];
                            this.embeddedApp = new EmbeddedClientApplication(this.config.auth.clientId, this.experimentalConfig.brokerOptions, this.logger, this.browserStorage, this.performanceClient);
                            this.logger.verbose("Acting as child");
                            return [4 /*yield*/, this.embeddedApp.initiateHandshake(atsMeasurement)];
                        case 4:
                            _a.sent();
                            atsMeasurement.endMeasurement({
                                success: this.embeddedApp.brokerConnectionEstablished,
                            });
                            _a.label = 5;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Event handler function which allows users to fire events after the PublicClientApplication object
         * has loaded during redirect flows. This should be invoked on all page loads involved in redirect
         * auth flows.
         * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.
         * @returns {Promise.<AuthenticationResult | null>} token response or null. If the return value is null, then no auth redirect was detected.
         */
        ExperimentalPublicClientApplication.prototype.handleRedirectPromise = function (hash) {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                var requestContext, authResponse;
                return __generator$2(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            requestContext = (_a = this.broker) === null || _a === void 0 ? void 0 : _a.getRequestContext();
                            if (!(this.embeddedApp && this.embeddedApp.brokerConnectionEstablished)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.embeddedApp.sendHandleRedirectRequest()];
                        case 1:
                            authResponse = _b.sent();
                            this.browserStorage.setInteractionInProgress(false);
                            return [2 /*return*/, authResponse];
                        case 2:
                            if (this.broker && !!requestContext && requestContext !== this.config.auth.clientId) {
                                return [2 /*return*/, this.broker.handleRedirectPromise(hash)];
                            }
                            else {
                                return [2 /*return*/, _super.prototype.handleRedirectPromise.call(this, hash)];
                            }
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        // #endregion
        // #region Redirect flow
        ExperimentalPublicClientApplication.prototype.acquireTokenRedirect = function (request) {
            var _a;
            return __awaiter$2(this, void 0, void 0, function () {
                return __generator$2(this, function (_b) {
                    // Embedded applications cannot perform redirects (even in same frame)
                    if (!!((_a = this.embeddedApp) === null || _a === void 0 ? void 0 : _a.brokerConnectionEstablished)) {
                        throw BrowserAuthError.createRedirectInIframeError(BrowserUtils.isInIframe());
                    }
                    return [2 /*return*/, _super.prototype.acquireTokenRedirect.call(this, request)];
                });
            });
        };
        // #endregion
        // #region Popup Flow
        /**
         * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser
         * @param {PopupRequest} request
         *
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse} object
         */
        ExperimentalPublicClientApplication.prototype.acquireTokenPopup = function (request) {
            var _this = this;
            var _a;
            var atPopupMeasurement = startMeasurement(this.performanceClient, PerformanceEvents.AcquireTokenPopup, request.correlationId);
            try {
                var isEmbedded = !!((_a = this.embeddedApp) === null || _a === void 0 ? void 0 : _a.brokerConnectionEstablished);
                /*
                 * Dont set interactionInProgress for embedded apps,
                 * as broker will set this flag themselves.
                 */
                this.preflightBrowserEnvironmentCheck(exports.InteractionType.Popup, !isEmbedded);
                this.logger.verbose("experimental acquireTokenPopup called", request.correlationId);
                if (isEmbedded) {
                    var brokerInteractionClient = new EmbeddedInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.experimentalConfig, this.performanceClient, this.nativeExtensionProvider, request.correlationId, this.embeddedApp, this.broker);
                    return brokerInteractionClient.acquireTokenPopup(request).then(function (result) {
                        addStaticFields(atPopupMeasurement, {
                            accessTokenSize: result.accessToken.length,
                            idTokenSize: result.idToken.length
                        });
                        atPopupMeasurement.endMeasurement({
                            success: true,
                            requestId: result.requestId
                        });
                        return result;
                    }).catch(function (e) {
                        atPopupMeasurement.endMeasurement({
                            success: false,
                            errorCode: e.errorCode,
                            subErrorCode: e.subError,
                        });
                        return Promise.reject(e);
                    });
                }
                // If logged in, emit acquire token events
                var loggedInAccounts_1 = this.getAllAccounts();
                if (loggedInAccounts_1.length > 0) {
                    this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Popup, request);
                }
                else {
                    this.eventHandler.emitEvent(exports.EventType.LOGIN_START, exports.InteractionType.Popup, request);
                }
                // if native broker is enabled, make a native call instead
                var result = void 0;
                if (this.canUseNative(request)) {
                    this.logger.verbose("Native popup flow activated");
                    result = this.acquireTokenNative(request, exports.ApiId.acquireTokenPopup).then(function (response) {
                        _this.browserStorage.setInteractionInProgress(false);
                        atPopupMeasurement.endMeasurement({
                            success: true,
                            isNativeBroker: true,
                            accessTokenSize: response.accessToken.length,
                            idTokenSize: response.idToken.length,
                            requestId: response.requestId
                        });
                        return response;
                    }).catch(function (e) {
                        if (e instanceof NativeAuthError && e.isFatal()) {
                            _this.logger.verbose("Native Auth Error");
                            _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                            var popupClient = _this.createPopupClient(request.correlationId);
                            return popupClient.acquireToken(request);
                        }
                        else if (e instanceof InteractionRequiredAuthError) {
                            _this.logger.verbose("acquireTokenPopup - Resolving interaction required error thrown by native broker by falling back to web flow");
                            var popupClient = _this.createPopupClient(request.correlationId);
                            return popupClient.acquireToken(request);
                        }
                        _this.browserStorage.setInteractionInProgress(false);
                        throw e;
                    });
                }
                else {
                    var popupClient = new PopupClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, request.correlationId);
                    result = popupClient.acquireToken(request);
                }
                return result.then(function (result) {
                    // If logged in, emit acquire token events
                    var isLoggingIn = loggedInAccounts_1.length < _this.getAllAccounts().length;
                    if (isLoggingIn) {
                        _this.eventHandler.emitEvent(exports.EventType.LOGIN_SUCCESS, exports.InteractionType.Popup, result);
                    }
                    else {
                        _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Popup, result);
                    }
                    addStaticFields(atPopupMeasurement, {
                        accessTokenSize: result.accessToken.length,
                        idTokenSize: result.idToken.length
                    });
                    atPopupMeasurement.endMeasurement({
                        success: true,
                        requestId: result.requestId
                    });
                    return result;
                }).catch(function (e) {
                    if (loggedInAccounts_1.length > 0) {
                        _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Popup, null, e);
                    }
                    else {
                        _this.eventHandler.emitEvent(exports.EventType.LOGIN_FAILURE, exports.InteractionType.Popup, null, e);
                    }
                    atPopupMeasurement.endMeasurement({
                        success: false
                    });
                    // Since this function is syncronous we need to reject
                    return Promise.reject(e);
                });
            }
            catch (e) {
                atPopupMeasurement.endMeasurement({
                    success: false
                });
                // Since this function is syncronous we need to reject
                return Promise.reject(e);
            }
        };
        // #endregion
        // #region Silent Flow
        /**
         * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:
         * - Any browser using a form of Intelligent Tracking Prevention
         * - If there is not an established session with the service
         *
         * In these cases, the request must be done inside a popup or full frame redirect.
         *
         * For the cases where interaction is required, you cannot send a request with prompt=none.
         *
         * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as
         * you session on the server still exists.
         * @param request {@link SsoSilentRequest}
         *
         * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.
         */
        ExperimentalPublicClientApplication.prototype.ssoSilent = function (request) {
            return __awaiter$2(this, void 0, void 0, function () {
                var atsMeasurement, brokerInteractionClient, result, silentIframeClient;
                var _this = this;
                return __generator$2(this, function (_a) {
                    this.preflightBrowserEnvironmentCheck(exports.InteractionType.Silent);
                    atsMeasurement = startMeasurement(this.performanceClient, PerformanceEvents.SsoSilent, request.correlationId);
                    this.logger.verbose("ssoSilent called", request.correlationId);
                    this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_START, exports.InteractionType.Silent, request);
                    try {
                        if (this.embeddedApp && this.embeddedApp.brokerConnectionEstablished) {
                            brokerInteractionClient = new EmbeddedInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.experimentalConfig, this.performanceClient, this.nativeExtensionProvider, request.correlationId, this.embeddedApp, this.broker);
                            return [2 /*return*/, brokerInteractionClient.ssoSilent(request)
                                    .then(function (result) {
                                    atsMeasurement.endMeasurement({
                                        success: true,
                                        requestId: result.requestId
                                    });
                                    return result;
                                })
                                    .catch(function (e) {
                                    atsMeasurement.endMeasurement({
                                        success: false,
                                        errorCode: e.errorCode,
                                        subErrorCode: e.subError,
                                    });
                                    throw e;
                                })];
                        }
                        result = void 0;
                        if (this.canUseNative(request)) {
                            this.logger.verbose("Native sso silent flow activated");
                            result = this.acquireTokenNative(request, exports.ApiId.ssoSilent).catch(function (e) {
                                // If native token acquisition fails for availability reasons fallback to standard flow
                                if (e instanceof NativeAuthError && e.isFatal()) {
                                    _this.logger.verbose("Native Auth Error");
                                    _this.nativeExtensionProvider = undefined; // If extension gets uninstalled during session prevent future requests from continuing to attempt
                                    var silentIframeClient = _this.createSilentIframeClient(request.correlationId);
                                    return silentIframeClient.acquireToken(request);
                                }
                                throw e;
                            });
                        }
                        else {
                            silentIframeClient = new SilentIframeClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, exports.ApiId.ssoSilent, this.performanceClient, this.nativeInternalStorage, this.nativeExtensionProvider, request.correlationId);
                            result = silentIframeClient.acquireToken(request);
                        }
                        return [2 /*return*/, result.then(function (silentTokenResult) {
                                _this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_SUCCESS, exports.InteractionType.Silent, silentTokenResult);
                                atsMeasurement.addStaticFields({
                                    accessTokenSize: silentTokenResult.accessToken.length,
                                    idTokenSize: silentTokenResult.idToken.length
                                });
                                atsMeasurement.endMeasurement({
                                    success: true,
                                    fromCache: silentTokenResult.fromCache,
                                    requestId: silentTokenResult.requestId
                                });
                                return silentTokenResult;
                            }).catch(function (e) {
                                throw e;
                            })];
                    }
                    catch (e) {
                        this.eventHandler.emitEvent(exports.EventType.SSO_SILENT_FAILURE, exports.InteractionType.Silent, null, e);
                        atsMeasurement.endMeasurement({
                            success: false,
                            errorCode: e.errorCode,
                            subErrorCode: e.subError,
                        });
                        throw e;
                    }
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Silently acquire an access token for a given set of scopes. Will use cached token if available, otherwise will attempt to acquire a new token from the network via refresh token.
         * @param {SilentRequest} request
         * @param {AccountInfo} account
         * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthResponse}
         */
        ExperimentalPublicClientApplication.prototype.acquireTokenSilentAsync = function (request, account) {
            return __awaiter$2(this, void 0, void 0, function () {
                var astsAsyncMeasurement, result, silentRequest, silentCacheClient, silentRequest_1;
                var _this = this;
                return __generator$2(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_START, exports.InteractionType.Silent, request);
                            astsAsyncMeasurement = startMeasurement(this.performanceClient, PerformanceEvents.AcquireTokenSilentAsync, request.correlationId);
                            if (!this.canUseNative(request)) return [3 /*break*/, 1];
                            this.logger.verbose("acquireTokenSilent - attempting to acquire token from native platform");
                            silentRequest = __assign$2(__assign$2({}, request), { account: account });
                            result = this.acquireTokenNative(silentRequest, exports.ApiId.acquireTokenSilent_silentFlow).catch(function (e) { return __awaiter$2(_this, void 0, void 0, function () {
                                var silentIframeClient;
                                return __generator$2(this, function (_a) {
                                    // If native token acquisition fails for availability reasons fallback to web flow
                                    if (e instanceof NativeAuthError && e.isFatal()) {
                                        this.logger.verbose("acquireTokenSilent - native platform unavailable, falling back to web flow");
                                        this.nativeExtensionProvider = undefined; // Prevent future requests from continuing to attempt
                                        silentIframeClient = this.createSilentIframeClient(request.correlationId);
                                        return [2 /*return*/, silentIframeClient.acquireToken(request)];
                                    }
                                    throw e;
                                });
                            }); });
                            return [3 /*break*/, 3];
                        case 1:
                            this.logger.verbose("acquireTokenSilent - attempting to acquire token from web flow");
                            silentCacheClient = new SilentCacheClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.performanceClient);
                            return [4 /*yield*/, silentCacheClient.initializeSilentRequest(request, account)];
                        case 2:
                            silentRequest_1 = _a.sent();
                            result = silentCacheClient.acquireToken(silentRequest_1).catch(function () { return __awaiter$2(_this, void 0, void 0, function () {
                                var brokerInteractionClient;
                                return __generator$2(this, function (_a) {
                                    if (this.embeddedApp && this.embeddedApp.brokerConnectionEstablished) {
                                        brokerInteractionClient = new EmbeddedInteractionClient(this.config, this.browserStorage, this.browserCrypto, this.logger, this.eventHandler, this.navigationClient, this.experimentalConfig, this.performanceClient, this.nativeExtensionProvider, request.correlationId, this.embeddedApp, this.broker);
                                        return [2 /*return*/, brokerInteractionClient.acquireTokenByBrokerRefresh(silentRequest_1)];
                                    }
                                    return [2 /*return*/, this.acquireTokenByRefreshToken(silentRequest_1, request)];
                                });
                            }); });
                            _a.label = 3;
                        case 3:
                        // Handle the response and emit appropriate perf metrics
                        return [2 /*return*/, result.then(function (response) {
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_SUCCESS, exports.InteractionType.Silent, response);
                                astsAsyncMeasurement.endMeasurement({
                                    success: true,
                                    fromCache: response.fromCache,
                                    accessTokenSize: response.accessToken.length,
                                    idTokenSize: response.idToken.length,
                                    isNativeBroker: response.fromNativeBroker,
                                    requestId: response.requestId
                                });
                                return response;
                            }).catch(function (tokenRenewalError) {
                                _this.eventHandler.emitEvent(exports.EventType.ACQUIRE_TOKEN_FAILURE, exports.InteractionType.Silent, null, tokenRenewalError);
                                astsAsyncMeasurement.endMeasurement({
                                    errorCode: tokenRenewalError.errorCode,
                                    subErrorCode: tokenRenewalError.subError,
                                    success: false
                                });
                                throw tokenRenewalError;
                            })];
                    }
                });
            });
        };
        // #endregion
        /**
         * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.
         * @param account
         */
        ExperimentalPublicClientApplication.prototype.setActiveAccount = function (account) {
            if (this.broker) {
                this.broker.setActiveAccount(account);
            }
            _super.prototype.setActiveAccount.call(this, account);
        };
        return ExperimentalPublicClientApplication;
    }(PublicClientApplication));

    /* eslint-disable header/header */
    var version = "2.37.0";

    exports.AccountEntity = AccountEntity;
    exports.AuthError = AuthError;
    exports.AuthErrorMessage = AuthErrorMessage;
    exports.AuthenticationHeaderParser = AuthenticationHeaderParser;
    exports.BrowserAuthError = BrowserAuthError;
    exports.BrowserAuthErrorMessage = BrowserAuthErrorMessage;
    exports.BrowserConfigurationAuthError = BrowserConfigurationAuthError;
    exports.BrowserConfigurationAuthErrorMessage = BrowserConfigurationAuthErrorMessage;
    exports.BrowserUtils = BrowserUtils;
    exports.ClientAuthError = ClientAuthError;
    exports.ClientAuthErrorMessage = ClientAuthErrorMessage;
    exports.ClientConfigurationError = ClientConfigurationError;
    exports.ClientConfigurationErrorMessage = ClientConfigurationErrorMessage;
    exports.DEFAULT_IFRAME_TIMEOUT_MS = DEFAULT_IFRAME_TIMEOUT_MS;
    exports.EventMessageUtils = EventMessageUtils;
    exports.ExperimentalPublicClientApplication = ExperimentalPublicClientApplication;
    exports.InteractionRequiredAuthError = InteractionRequiredAuthError;
    exports.InteractionRequiredAuthErrorMessage = InteractionRequiredAuthErrorMessage;
    exports.Logger = Logger;
    exports.NavigationClient = NavigationClient;
    exports.PublicClientApplication = PublicClientApplication;
    exports.ServerError = ServerError;
    exports.SignedHttpRequest = SignedHttpRequest;
    exports.StringUtils = StringUtils;
    exports.UrlString = UrlString;
    exports.stubbedPublicClientApplication = stubbedPublicClientApplication;
    exports.version = version;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=msal-browser-1p.js.map
