define("MsPortalImpl/Services/GlobalResourceFilterHelpers",["require","exports","FxHubs/ArtHelpers/KustoQueryGenerator"],(function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getQueryPredicates=void 0;const r=MsPortalFx.Base.Diagnostics.createLog(e),i={"==":7,"!=":17,contains:6,"!contains":16,startswith:9,"!startswith":19,endswith:10,"!endswith":20},n={"==":!0,"!=":!0},a={subscriptionName:"name",subscriptionState:"state",managementGroupName:"managementGroupName"},o=["| mv-expand managementGroup = managementGroupAncestorsChain","| extend managementGroupName = managementGroup.name","| summarize allManagementGroupNames = make_set(managementGroupName),  subscriptionId = any(subscriptionId),  name = any(name),  state = any(state),  subscriptionPolicies = any(subscriptionPolicies),  authorizationSource = any(authorizationSource),  managementGroupAncestorsChain = any(managementGroupAncestorsChain),  promotions = any(promotions),  tenantId = any(tenantId) by id"];t.getQueryPredicates=function(e,t){if(!e||!e.facets?.length)return[];const c=t&&t.length,u=e.facets.reduce(((e,s)=>(c&&!t.includes(s.type)||e.push(s),e)),[]),l=[],p=[];u.forEach((e=>{let t;const o=a[e.type]||e.type,c=Array.isArray(e.value);if(c&&n[e.operator]&&"managementGroupName"!==e.type)t=(0,s.getPredicate)(i[e.operator],[o],e.value);else{let n;if(c){if(0===e.value.length)return void r.warning(`Found filter facet with an empty array as its value. Ignoring this facet: ${JSON.stringify(e)}`);e.value.length>1&&r.warning("Found filter facet with an operator expecting a single value, but multiple values were present. Using first value."),n=e.value[0]}else n=e.value;if(!n)return void r.warning(`Filter facet value is null or empty. Ignoring this facet: ${JSON.stringify(e)}`);"managementGroupName"===e.type?c&&e.value.length>1?(t=`array_length(set_intersect(allManagementGroupNames, dynamic(['${e.value.join("', '")}'])))`,"!="===e.operator?t+=" == 0":t+=" > 0"):(t=`set_has_element(allManagementGroupNames, '${n}')`,"!="===e.operator&&(t=`not(${t})`)):t=(0,s.getPredicate)(i[e.operator],[o],[n])}"managementGroupName"===e.type?p.push(t):l.push(t)}));const b=[...l,...p].map((e=>`| where ${e}`));return p.length&&(b.splice(l.length,0,...o),b.push("| project-away allManagementGroupNames")),b}})),
define("MsPortalImpl/Services/Services.SubscriptionsDeferred",["require","exports","FxHubs/ArmHelpers/ArmApisStartup","FxHubs/RpcEndPoints","MsPortalImpl/Services/LazyUserData/LazyUserDataHelpers","MsPortalImpl/Services/SubscriptionAndLocationHelpers","MsPortalImpl/Services/Services.GlobalResourceFilters","MsPortalImpl/Services/GlobalResourceFilterHelpers","MsPortalImpl/Services/Services.BrowserSettings","MsPortalImpl/Services/Services.Util","FxHubs/ArtHelpers/ArtApis","Weave","MsPortalImpl/Resources/ImplScriptResources"],(function(e,t,s,r,i,n,a,o,c,u,l,p,b){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fetchSubscriptionsFromArg=t.fetchFilteredSubscriptions=t.fetchSubscriptions=t.processSelectedSubscriptionChanges=t.getSubscriptionSearchResults=t.loadAllSubscriptionsFromArm=void 0;var d=MsPortalFx.Base.Diagnostics,m=d.Telemetry,g=(r.Subscriptions.CountTypeEnum,MsPortalFx.Hubs.Notifications),S=g.NotificationStatus;const h=g.ClientNotification,y=MsPortalFx.require,v=MsPortalFx.isFeatureEnabled("mspfilter"),f=d.createLog(e);let P;async function F(e){const t=m.startTrace({source:"Services.SubscriptionsDeferred",action:"loadAllSubscriptionsFromArm"});e||(e={nextLink:(0,s.listSubscriptions)(),countData:{type:0,value:0},subscriptions:[],subscriptionsMap:Object.create(null)});const r=e.countData||{},a=e.nextLink;let o=r.type,c=2&o?r.value:0,u=1&o?r.value:0;const l=e.subscriptionsMap,p=[];await(0,s.callBatchWithContinuation)([{uri:a,arrayResponse:!0,telemetry:"Services.SubscriptionsDeferred.fetchAllSubscriptions"}],((e,t,s)=>{e.forEach((e=>{const t=l[e.subscriptionId];t?t.notInFirstPage||p.push(e.subscriptionId):l[e.subscriptionId]={subscription:e,notInFirstPage:!1}}));const r=s.countData,n=i.countTypeMap[(r.type||"").toLowerCase()],a=r.value;o|=n,u||(1===n?u=a:2===n&&(c+=a))}),(e=>{f.warning(e.reason)}),!1,{additionalResponseInfo:!0}),p.length&&f.warning(`The following ${p.length} duplicate subscription(s) were returned from ARM: ${p.join()}`);const b=MsPortalFx.stableSort((0,n.getSubscriptionsWithUniqueDisplayNames)({subsMap:l,isPortalStartup:!1,telemetrySource:"Services.SubscriptionsDeferred"}),n.compareSubscriptions),d=b.length,g=1&o;m.completeTrace(t,{subscriptionsReceivedCount:d,totalSubsCount:u,partialSubsCount:c,typesSeenBitMap:o}),u=g?u:c,d!==u&&(g&&f.warning(`Count value returned from ARM is inconsistent with the total subscriptions received. Count value: ${u}. # of subscriptions received: ${d}`),u=d);const S={type:g?1:4&o?4:1,value:u};return{subscriptions:b,subscriptionsMap:e.subscriptionsMap,countData:S}}async function w(e,t){if(!t?.id&&e.get(c.ServiceDependencyState).azureResourceGraphUnavailable.value){const e=await F();return P?(P.description=b.noSubsArgFallbackMessage,P.status=S.Warning,h.publish(P),P=null):h.publish({title:b.subscriptionErrorTitle,description:b.noSubsArgFallbackMessage,uri:"#settings/filters",status:S.Warning}),e}P=null;const s=(0,o.getQueryPredicates)(t,["subscriptionId","subscriptionName","subscriptionState","managementGroupName"]),r=await M({queryPredicates:s,includeProperties:!0});if("Success"===r.resultCode){e.get(c.ServiceDependencyState).azureResourceGraphUnavailable(!1);let t=1;return r.totalRecords&&r.subscriptions.length!==r.totalRecords&&(t=2),{subscriptions:r.subscriptions,subscriptionsMap:r.subscriptions.reduce(((e,t)=>(e[t.subscriptionId]={subscription:t,notInFirstPage:!1},e)),Object.create(null)),countData:{type:t,value:r.subscriptions.length}}}return"Failure_ArgServiceUnavailable"===r.resultCode?(e.get(c.ServiceDependencyState).azureResourceGraphUnavailable(!0),P=h.publish({title:b.subscriptionErrorTitle,description:b.noSubsArgFallbackMessageInProgress,uri:"#settings/filters",status:S.InProgress}),(await e.getAsync(a.ResourceFilterManager)).activateFilter(""),{subscriptions:[],subscriptionsMap:Object.create(null),countData:{type:0,value:0}}):{subscriptions:[],subscriptionsMap:Object.create(null),countData:{type:2,value:0}}}async function M(e){const t=m.start({source:"Services.SubscriptionsDeferred",action:"fetchFilteredSubscriptions"}),s=["resourcecontainers",'| where type =~ "microsoft.resources/subscriptions"',["| project id, subscriptionId, name, tenantId,","  state = properties.state,","  subscriptionPolicies = properties.subscriptionPolicies,","  authorizationSource = properties.authorizationSource,","  managementGroupAncestorsChain = properties.managementGroupAncestorsChain,","  promotions = properties.promotions"].join("\r\n")].join("\r\n");let r="\r\n| project id, subscriptionId, displayName = name, state, tenantId";const i=!!e?.includeProperties;i&&(r+=", subscriptionPolicies, authorizationSource, managementGroupAncestorsChain, promotions");const n=s+(e?.queryPredicates?.length?"\r\n"+e.queryPredicates.join("\r\n"):"")+r,a=[];let o,c=0,u=0;const p=e?.telemetryHeader||"Services.SubscriptionsDeferred.FetchSubscriptions",b=async t=>{let s;try{s=await l.getDataFromArt({query:n,options:{$skipToken:t},subscriptions:e?.subscriptionFilterIds},p,void 0,{apiVersion:"2021-03-01"}),u++}catch(e){throw e.httpStatusCode&&(o=e.httpStatusCode),e}const r=s?.data||{rows:[],columns:[]};return a.push(...r.rows.map((e=>{const t={subscriptionId:e[1],displayName:e[2],state:e[3],tenantId:e[4],uniqueDisplayName:e[2],subscriptionPolicies:i?e[5]:void 0,authorizationSource:i?e[6]:void 0};return i&&e[7]&&(t.managementGroupAncestorsChain=e[7]),i&&e[8]&&(t.promotions=e[8]),t}))),c=s.totalRecords,o=s.httpStatusCode,s.$skipToken};try{let s;do{s=await b(s)}while(s);return m.completeTrace(t,{subscriptionsReturnedCount:a.length,resultCount:a.length,pageCount:u,totalCount:c,globalFilterPredicates:e.queryPredicates||[],first100SubscriptionIds:a.slice(0,100).map((e=>e.subscriptionId))}),{resultCode:"Success",subscriptions:a,totalRecords:c,numberOfPages:u}}catch(s){m.endTrace(t,"failure",{error:MsPortalFx.getLogFriendlyMessage(s),failedOnPage:u+1,globalFilterPredicates:e.queryPredicates||[]});let r="Failure_Unknown";return o&&o>=500&&(r="Failure_ArgServiceUnavailable"),{resultCode:r,subscriptions:[],totalRecords:0,numberOfPages:0}}}t.loadAllSubscriptionsFromArm=F,t.getSubscriptionSearchResults=async function(e,t){const s=await t,r=e.toLowerCase(),i=s.subscriptions.filter((e=>e.displayName.toLowerCase().includes(r)||e.subscriptionId.toLowerCase().includes(r))),n=i.length>100;return n&&(i.length=100),m.trace({source:"Services.SubscriptionsDeferred",action:"getSubscriptionSearchResults",data:{searchString:(0,u.redactSensitiveData)(e),searchResultsCount:i.length,searchOverflow:n}}),{subscriptions:i,overflow:n,searchString:e}},t.processSelectedSubscriptionChanges=async function(e,t,s,r,i){const a=v?(async()=>{const t=await y("MsPortalImpl/Services/Services.ProjectedDirectories");return e.getAsync(t.ServicesProjectedDirectories)})():Promise.resolve(null),[o,c,u]=await Promise.all([a,s,i]),l=c.subscriptions.reduce(((e,s)=>(t[s.subscriptionId]&&e.push(s),e)),[]);let p;if(p=o&&!u?await(async()=>{const e=await o.getSubscriptionsForSelectedDirectories(l);return e.length?[...e]:[...await o.getSubscriptionsForSelectedDirectories(c.subscriptions)]})():l.length?l:[...c.subscriptions],p.length===c.subscriptions.length)return{displayedSubscriptions:p,countData:c.countData,selectedSubscriptions:p,areAllSubsSelected:!0};const b=await r,d={displayedSubscriptions:(0,n.mergeSelectedSubscriptionsWithFirstPage)(p,c.subscriptions),countData:b.countData,selectedSubscriptions:p,areAllSubsSelected:!1},m=d.selectedSubscriptions,g=d.areAllSubsSelected;return{displayedSubscriptions:g?m:d.displayedSubscriptions,countData:c.countData,selectedSubscriptions:m,areAllSubsSelected:g}},t.fetchSubscriptions=async function(e){const t=await e.getAsync(a.ResourceFilterManager),s=new FxImpl.TriggerableLifetimeManager,r=(0,p.evaluate)(s,t.currentFilter);return s.dispose(),await w(e,r)},t.fetchFilteredSubscriptions=w,t.fetchSubscriptionsFromArg=M}));