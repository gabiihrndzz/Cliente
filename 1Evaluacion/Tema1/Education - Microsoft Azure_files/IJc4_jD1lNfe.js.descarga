define("MsPortalImpl/UI/Compositions/UI.Composition.BladeHistory",["require","exports","Fx/DependencyInjection"],(function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BladeHistory=void 0;const s=MsPortalFx.Base.Diagnostics.createLog(e);let i=class{constructor(){this._history=[],this._openBlades=new Map}getEntries(){return this._history.slice()}recordBladeOpened(e){if(e.locator){let t={};try{const o=e.getInputsOnlyViewModel();t=MsPortalFx.clone(o,!0),Object.keys(t).forEach((e=>t[e]=ko.unwrap(t[e])))}catch(e){s.warning("Parsing of the input parameters failed with an error: ",e)}const o={bladeReference:{bladeName:e.locator.name,extensionName:e.locator.getExtensionLocator().name,parameters:t},timestamp:Date.now()};this._history.unshift(o),this._openBlades.set(e.id,o),this._history.length>30&&this._history.pop(),e.registerForDispose((()=>this._recordBladeClosed(e)))}}_recordBladeClosed(e){const t=this._openBlades.get(e.id);t&&(t.duration=Date.now()-t.timestamp),this._openBlades.delete(e.id)}};t.BladeHistory=i,t.BladeHistory=i=__decorate([__metadata("fx:diagnostics",[e,"BladeHistory"]),o.Class()],i)}));