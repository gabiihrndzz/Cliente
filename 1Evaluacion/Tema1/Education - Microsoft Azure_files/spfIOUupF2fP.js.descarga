define("MsPortalImpl/Services/Services.CopilotShellAPIs",["require","exports","Fx/DependencyInjection","Fx/Ajax","Fx/ResourceManagement","MsPortalImpl/UI/Compositions/UI.Composition.BladeHistory","MsPortalImpl/UI/UI.BladeOpener","FxInternal/RpcEndPoints","FxInternal/Copilot/ShellAPIs","FxInternal/AsyncLoader","MsPortalImpl/Extension/DefinitionCache","MsPortalImpl/UI/UI.JourneyManager","MsPortalImpl/Base/Base.ImplUtils","MsPortalImpl/Extension/Extension.Manifest","MsPortalImpl/Copilot/ShellCopilot","MsPortalImpl/Base/Base.DeepLink","MsPortalImpl/UI/Compositions/UI.Composition.Finder","MsPortalImpl/Extension/Extension.Definition.Locator","FxHubs/RpcEndPoints","MsPortalImpl/UI/Hubs/UI.FavoritesManager","MsPortalImpl/UI/Hubs/UI.NotificationManager","MsPortalImpl/Base/Base.DeepLink","MsPortalImpl/UI/Compositions/UI.Composition"],(function(e,t,n,o,i,l,a,s,r,d,c,p,h,u,m,g,C,f,B,A,I,S,H){"use strict";var x;Object.defineProperty(t,"__esModule",{value:!0}),t.CopilotShellAPIs=t.copilotShellApisCollectFXContextsHandler=t.copilotShellApisGetBladeViewModelsHandler=t.copilotShellApisExecuteBladeHandlerHandler=t.copilotShellApisExecuteShellHandlerHandler=t.copilotShellApisGetShellHandlerDefinitionsHandler=t.copilotShellApisSetBladeDetailsHandler=t.copilotShellApisLogErrorToExtensionHandler=t.copilotShellApisOpenBladeHandler=t.copilotShellApisGetBladeDeepLinkHandler=t.copilotShellApisGetRecentBladeHandler=t.copilotShellApisGetCurrentBladeInfoHandler=t.copilotShellApisGetExtensionVersionHandler=t.copilotShellApisGetManifestCacheUriHandler=t.copilotShellApisGetManifestCacheHandler=t.copilotShellApisGetDirectLineTokenHandler=void 0,t.copilotShellApisGetDirectLineTokenHandler=(0,d.defineHandler)(s.copilotShellApisGetDirectLineTokenEndpoint,(({diContainer:e})=>e.get(_).getDirectLineToken())),t.copilotShellApisGetManifestCacheHandler=(0,d.defineHandler)(s.copilotShellApisGetManifestCacheEndpoint,(({diContainer:e})=>e.get(_).getCopilotManifests())),t.copilotShellApisGetManifestCacheUriHandler=(0,d.defineHandler)(s.copilotShellApisGetManifestCacheUriEndpoint,(({diContainer:e})=>e.get(_).getCopilotManifestCacheUri())),t.copilotShellApisGetExtensionVersionHandler=(0,d.defineHandler)(s.copilotShellApisGetExtensionVersionEndpoint,(({diContainer:e,messageArg:t})=>e.get(_).getExtensionVersion(t))),t.copilotShellApisGetCurrentBladeInfoHandler=(0,d.defineHandler)(s.copilotShellApisGetCurrentBladeInfoEndpoint,(({diContainer:e})=>e.get(_).getCurrentBladeInfo())),t.copilotShellApisGetRecentBladeHandler=(0,d.defineHandler)(s.copilotShellApisGetRecentBladeEndpoint,(({diContainer:e})=>e.get(_).getRecentBlade())),t.copilotShellApisGetBladeDeepLinkHandler=(0,d.defineHandler)(s.copilotShellApisGetBladeDeepLinkEndpoint,(({diContainer:e,messageArg:t})=>e.get(_).getBladeDeepLink(t.bladeReference,t.options))),t.copilotShellApisOpenBladeHandler=(0,d.defineHandler)(s.copilotShellApisOpenBladeEndpoint,(({diContainer:e,messageArg:t})=>{const{bladeReference:n,options:o,onClosedId:i,isCopilotBlade:l}=t;return e.get(_).openBlade(n,o,i,l)})),t.copilotShellApisLogErrorToExtensionHandler=(0,d.defineHandler)(s.copilotShellApisLogErrorToExtensionEndpoint,(({diContainer:e,messageArg:t})=>{const{extensionName:n,error:o}=t;return e.get(_).logErrorToExtension(n,o)})),t.copilotShellApisSetBladeDetailsHandler=(0,d.defineHandler)(s.copilotShellApisSetBladeDetailsEndpoint,(({diContainer:e,messageArg:t})=>{const{recentBlade:n,additionalDetailsStr:o}=t;return e.get(_).setBladesInJourneyAdditionalDetails(n,o)})),t.copilotShellApisGetShellHandlerDefinitionsHandler=(0,d.defineHandler)(s.copilotShellApisGetShellHandlerDefinitionsEndpoint,(({diContainer:e})=>e.get(_).getShellHandlerDefinitions())),t.copilotShellApisExecuteShellHandlerHandler=(0,d.defineHandler)(s.copilotShellApisExecuteShellHandlerEndpoint,(({diContainer:e,messageArg:t})=>{const{handlerId:n,conversationId:o,handlerArguments:i,runtime:l}=t;return e.get(_).executeShellHandler(n,o,i,l)})),t.copilotShellApisExecuteBladeHandlerHandler=(0,d.defineHandler)(s.copilotShellApisExecuteBladeHandlerEndpoint,(({diContainer:e,messageArg:t})=>{const{handler:n,conversationId:o,handlerArguments:i,latestTimestamp:l,runtime:a}=t;return e.get(_).executeBladeHandler(n,o,i,l,a)})),t.copilotShellApisGetBladeViewModelsHandler=(0,d.defineHandler)(r.copilotShellApisGetBladeViewModelsHandlerEndpoint,(async({diContainer:e})=>new Promise(((t,n)=>{try{const n=e.get(_);t(n.extractViewModels())}catch(e){n(e)}})))),t.copilotShellApisCollectFXContextsHandler=(0,d.defineHandler)(r.copilotShellApisCollectFXContextsEndpoint,(async({diContainer:e})=>e.get(_).collectFXContexts()));let _=x=class{constructor(e,t,n,o,i,l,a){this._diContainer=e,this._bladeHistory=t,this._definitionCache=n,this._journeyManager=o,this._manifestCache=i,this._shellHandler=l,this._rpcClient=a,this._bladesInJourneyAdditionalDetails={},this.copilotBladeState=ko.observable("closed")}getDirectLineToken(){const e=MsPortalImpl.sessionStorage.getItem("directLineToken");if(e)try{const t=JSON.parse(atob(e));return MsPortalImpl.sessionStorage.removeItem("directLineToken"),Promise.resolve(t)}catch(e){}return(0,o.ajax)({uri:"api/DirectLine/GetToken",setAuthorizationHeader:{resourceName:"self"},type:"GET"}).catch((e=>{const t=new MsPortalFx.Errors.Error({code:e?.jqXHR?.status,message:`Failed to get Direct Line token. Details: { httpStatusCode: ${e?.jqXHR?.responseJSON?.httpStatusCode} message: ${e?.jqXHR?.responseJSON?.message} }`,data:{httpStatusCode:e?.jqXHR?.status,message:e?.jqXHR?.responseJSON?.message}});return Promise.reject(t)}))}getCopilotManifests(){const e=[];return this._manifestCache.getManifests("copilot",((t,n)=>{n?.copilotHandlers&&e.push({extensionName:t,manifest:n})})).then((()=>e))}getCopilotManifestCacheUri(){return Promise.resolve(`https://${window.location.hostname}${MsPortalEarly.getCachedManifestUri("copilot")}`)}getExtensionVersion(e){return Promise.resolve(this._manifestCache.getVersion(e))}async getCurrentBladeInfo(){const e=this.getRecentBlade(),t=this._getContextViewAttachment(e);return{runtimeMetadata:await this._getBladeRuntimeMetadataFromHistory(e),context:t,recentBlade:e,additionalDetails:this._getBladeAdditionalDetails(e)}}getRecentBlade(){const e=this._bladeHistory.getEntries().filter((e=>!(e.duration||"Microsoft_Azure_Copilot"===e.bladeReference.extensionName))),t=[];return e?.length&&(Object.keys(this._bladesInJourneyAdditionalDetails).forEach((n=>{void 0===this._bladesInJourneyAdditionalDetails[n]||e.some((e=>n===x._getBladeId(e)))||(t.push(n),this._bladesInJourneyAdditionalDetails[n]=void 0)})),t.forEach((e=>{delete this._bladesInJourneyAdditionalDetails[e]}))),e?.[0]&&{...e[0]}}getBladeDeepLink(e,t={}){return(0,g.getBladeDeepLink)(e.extensionName,e.bladeName,e.parameters,t)}openBlade(e,t={},n,o){return e.options=e.options||{},(n||o)&&(e.options.onClosed=(e,t)=>{let i=!1;o&&(i=!0),this._copilotOnCloseUpdate(n,e,t,i)}),o&&(this.copilotBladeState("opened"),this._copilotExtensionName=e.extensionName,this._copilotBladeName=e.bladeName,this._copilotOnClosedId=n),this._diContainer.get(a.BladeOpener).openBlade(e,t)}logErrorToExtension(t,n){return(0,h.logToExtension)(e,t,2,n)}setBladesInJourneyAdditionalDetails(e,t){e&&(this._bladesInJourneyAdditionalDetails[x._getBladeId(e)]=t)}getShellHandlerDefinitions(){return Promise.resolve([...m.shellCopliotHandlerDefinitions])}collectFXContexts(){return Promise.all([B.AssetTypes.getRecentResourcesEndPoint.invoke(this._rpcClient,"HubsExtension",{}),B.AssetTypes.getFavoriteResourcesEndPoint.invoke(this._rpcClient,"HubsExtension",{}),this._diContainer.getAsync(A.FavoritesManager),this._diContainer.getAsync(I.NotificationManager)]).then((([e,t,n,o])=>{const i=(o.notifications()||[]).map((e=>{const{timeSinceNotified:t,formSection:n,...o}=e;return o})),l=this._getAssetMenuInfo();return{favorite:{resources:t,services:ko.toJS(n.favorites.value)},notifications:ko.toJS(i),recents:e,hashParts:(0,S.getCurrentUri)().getHashParts(),additionalDetails:l}}))}executeShellHandler(e,t,n,o){return this._shellHandler.executeShellHandler(e,t,n,o)}executeBladeHandler(e,t,n,o,i){const l=this._getCurrentComposition(),a=this._getBladeRuntimeMetadataFromComposition(l),s=this.getRecentBlade();if(!s||s?.timestamp!==o)return Promise.resolve(`Client handler ID '${e.handlerId}' did not execute, the previous blade has already closed.`);const d=l.createChildLifetime(),c=new Promise((e=>{d.registerForDispose((()=>{e("BladeClosed")}))}));let p;if(a.bladeName.toLowerCase().endsWith(".ReactView".toLowerCase())||a.runtimeBlade?.toLowerCase().endsWith(".ReactView".toLowerCase()))p=r.copilotInvokeReactViewHandlerEndpoint.invoke(this._rpcClient,"Microsoft_Azure_Copilot",{bladeContext:{id:a.id,instanceId:a.instanceId},handlerId:e.declaredHandlerId,conversationId:t,handlerArguments:n,runtime:i});else{const o=this._getExtensionViewModel(l);if(o){const l=o.content(),a=l[e.declaredHandlerId];if(!a){const t=`Client handler ID '${e.handlerId}' does not exist in KO view model.`;return void console.warn(t)}p=a.bind(l)(e.declaredHandlerId,t,n,i)}}return Promise.race([p,c]).finally((()=>{d.dispose()}))}toggleCopilotBlade(){if("opened"===this.copilotBladeState()){const e=f.Locator.forExtension(this._copilotExtensionName).withBlade(this._copilotBladeName),t=this._diContainer.get(C.Finder).findBlades(e,!1,!0)?.[0];t&&this._journeyManager.tryCloseBlade(t),this._copilotOnCloseUpdate(this._copilotOnClosedId,1,null,!0)}else s.copilotNudgeEndpoint.invoke(FxImpl.Rpc.client,"Microsoft_Azure_Copilot",[null])}extractViewModels(){const e=this._getCurrentComposition()._partContainer;if(e){const t=e[0],n=t.getElementsByClassName("fxs-part-content")?.[0],o=ko.dataFor(n),i=t.getElementsByClassName("fxc-tabs-container")?.[0],l=ko.dataFor(i),a=function(e){const t=[],n=e.getElementsByClassName("msportalfx-form-formelement fxc-has-label azc-validationBelowCtrl"),o={};for(let e=0;e<n.length;e++){const l=n[e];if(l.checkVisibility()){const e=l.getAttribute("data-bind");if(e){const n=e.replace("pcControl:","").trimStart();if(n){const e=ko.dataFor(l)[n];if(e){const n=e.control?e.control():e;if(n){t.push(n);const e=l.getElementsByClassName("azc-form-label")?.[0].textContent,a=ko.unwrap(n.label);o["string"==typeof a?a:JSON.stringify(a)]={labelText:e,isMasked:(i=l,i.querySelectorAll("[type='password']").length>1)}}}}}}}var i;return{allLabelViewModels:t,htmlToRenderedTextMap:o}}(t);return{bladeInfoViewModel:o,tabsViewModel:l,allLabelViewModels:a}}}_copilotOnCloseUpdate(e,t,n,o){e&&s.copilotBladeWasClosedEndpoint.invoke(this._rpcClient,"Microsoft_Azure_Copilot",{onClosedId:e,reason:t,data:n}),o&&this.copilotBladeState("closed")}async _getBladeRuntimeMetadataFromHistory(e){if(e){const t=await this._definitionCache.getBladeDefinition(e.bladeReference.extensionName,e.bladeReference.bladeName);return this._createCurrentBladeMetadata(e.bladeReference.extensionName,t)}}_createCurrentBladeMetadata(e,t,n,o){const i={extensionName:e,bladeName:t?.name,runtimeBlade:null,runtimeExtension:null,id:n,instanceId:o};return t?.dxView?{...i,...t.dxView}:i}_getContextViewAttachment(e){const t=this._getCurrentBladeAdditionalDetails(e),n=this._journeyManager.activeJourney&&this._journeyManager.activeJourney(),o=n?.getCurrentResourceId&&n.getCurrentResourceId(),l=o&&i.ArmId.parse(o,!0).resourceType;return{contentType:"application/json",name:"azurecopilot/viewcontext",content:{viewContext:{view:e||{},additionalDetails:t,resourceDetails:o?{id:o,type:l,resourceType:l}:{}}}}}_getCurrentComposition(){const e=$.querySelectorAll(".fxs-portal-content .fxs-blade .fxs-blade-content-container .fxs-tile");if(e.length>0){const t=e.last()[0];return $.data(t,H.CompositionInstanceDataName)}}_getBladeRuntimeMetadataFromComposition(e){const t=this._getCompositionBlade(e);return this._createCurrentBladeMetadata(e?.locator.getExtensionName(),t?.bladeDefinition,t?.id,t?.instanceId)}_getCompositionBlade(e){for(;e&&e.getCompositionType()!==H.CompositionType.Blade;)e=e.parent;return e}_getExtensionViewModel(e){let t;if(e.getCompositionType()===H.CompositionType.Part)t=e.getViewModel();else console.error("Failed to find KO view model for current blade.");return t}_getAssetMenuInfo(){const e=f.Locator.forExtension("HubsExtension").withBlade(MsPortalFx.Base.Constants.BladeNames.Hubs.ResourceMenuBlade),t=this._diContainer.get(C.Finder).findBlades(e),n=t?.map((e=>{const t=e?.getMenuWidget?.();if(t?.vm){const e=ko.toJS(t.vm.groups?.()),n=t.getSelectedItem?.(),o=t.getResourceType?.();return{type:"ResourceMenuBlade",groups:e,selectedItem:n,resourceType:o}}})).filter((e=>!!e));return n||[]}_getCurrentBladeAdditionalDetails(e){const t=e||this.getRecentBlade();return this._getBladeAdditionalDetails(t)}_getBladeAdditionalDetails(e){let t;return e&&(t=this._bladesInJourneyAdditionalDetails[x._getBladeId(e)]),t||"{}"}static _getBladeId(e){return`${e.bladeReference.extensionName}_${e.bladeReference.bladeName}`}};t.CopilotShellAPIs=_,t.CopilotShellAPIs=_=x=__decorate([__metadata("fx:diagnostics",[e,"1"]),n.Class(),__metadata("design:paramtypes",[n.Container,l.BladeHistory,c.DefinitionCache,p.JourneyManager,u.ManifestCache,m.ShellHandler,FxImpl.Rpc.Client])],_)}));