define("MsPortalImpl/ReactViews/ReactFrame.CopilotConfig",["require","exports","Fx/DependencyInjection","FxInternal/RpcEndPointsCore"],(function(e,t,r,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CopilotFxRequireConfigSource=void 0;let a=class{constructor(e){this.getRequireConfig=t=>o.getCopilotFxRequireConfigEndPoint.invoke(e,"fxw",t)}};t.CopilotFxRequireConfigSource=a,t.CopilotFxRequireConfigSource=a=__decorate([__metadata("fx:diagnostics",[e,"CopilotFxRequireConfigSource"]),r.Class(),__metadata("design:paramtypes",[FxImpl.Rpc.Client])],a)})),
define("MsPortalImpl/ReactViews/ReactFrame.DevTools",["require","exports","MsPortalImpl/ReactViews/ReactFrame.Constants"],(function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.applyPerfToolsToReactFrame=void 0,t.applyPerfToolsToReactFrame=function(e){const{bladeId:t,reactFramePromise:o}=e,a={completePerfToolApplication:(e,t,o)=>{a.profileOnLoad?(t[r.SESSION_STORAGE_DEVTOOLS_RELOAD_AND_PROFILE]="true",t[r.SESSION_STORAGE_DEVTOOLS_RECORD_CHANGE_DESCRIPTIONS_KEY]=MsPortalImpl.localStorage.getItem(r.SESSION_STORAGE_DEVTOOLS_RECORD_CHANGE_DESCRIPTIONS_KEY),o(e.element)):delete t[r.SESSION_STORAGE_DEVTOOLS_RELOAD_AND_PROFILE]},networkThrottlingEnabled:MsPortalImpl.sessionStorage.getItem(r.SESSION_STORAGE_THROTTLE)===t,networkThrottlingPromise:Promise.resolve(void 0),profileOnLoad:!!MsPortalImpl.sessionStorage.getItem(r.SESSION_STORAGE_DEVTOOLS_RELOAD_AND_PROFILE),toggleDevToolsPromise:Promise.resolve(void 0)};return a.networkThrottlingEnabled&&(a.networkThrottlingPromise=async function(e){const{bladeId:t,diContainer:r,extensionName:o,getAsyncEndTime:a,renderStart:n,updateRenderStart:s}=e;try{const{KustoClient:e,QueryType:a}=await MsPortalFx.require("MsPortalImpl/Services/Kusto/KustoClient"),n=await r.get(e).getPrimaryData(a.P95NetworkRequestDurations,{bladeId:t,tableName:"HubsExtension"===o?"LighthousePerfVizClientTelemetry":"LighthousePerfVizExtTelemetry"},!0);return console.info("Network throttling: Network requests will be throttled to p95 durations. Unrecognized network requests will be throttled to averaged times."),n.data[0].bag}catch(e){return console.error(`Failed to get network request durations from Kusto: ${e}`),{}}finally{const e=a(),t=Date.now();if("number"==typeof e&&t>e){s(t-(e-n))}}}(e),o.then((e=>{e.networkThrottlingTelemetryPromise=a.networkThrottlingPromise}))),a.profileOnLoad&&(a.toggleDevToolsPromise=MsPortalFx.require("MsPortalImpl/Parts/ReactDevTools/ReactDevTools").then((async({initializeReactDevTools:e,toggleReactDevTools:t})=>(await e(),t)))),a}})),
define("MsPortalImpl/ReactViews/ReactFrame.ViewPrefetcher",["require","exports","MsPortalImpl/ReactViews/ReactFrame.Constants","MsPortalImpl/ReactViews/ReactFrame.Utils","MsPortalImpl/ReactViews/ReactQueryStore","FxInternal/Composition/ViewModelComposer","FxInternal/Diagnostics","MsPortalImpl/Services/Services.ExtensionTokensManager","FxInternal/AsyncLoader"],(function(e,t,r,o,a,n,s,i,l){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getPrefetchableTokenNames=t.getShellStatePusher=t.prefetchTokens=t.prefetchReactQueries=void 0;var c=MsPortalFx.Base.Diagnostics.Telemetry;function d(e,t){const r=e.replace(".ReactView",".TokenFetcher."),a=r&&(0,o.getModuleIdAndUrl)(r,t,!0).id;return a?a.replace(r,"").split("!"):[]}t.prefetchReactQueries=function(e){const{diContainer:t,queryStore:r}=e;MsPortalFx.require("MsPortalImpl/ReactViews/ShellReactQueries").then((e=>{e.globalSubscriptionsQuery.bind(r,t).get({force:!0}),e.experimentationShellAssignmentsQuery.bind(r,t).get()}))},t.prefetchTokens=function(e){const{diContainer:t,extensionName:r,mergedConfig:o,viewModuleId:a,viewName:n}=e;let s=[];if(MsPortalFx.isFeatureEnabled("reacttokenfetch")&&a){const e=t.get(i.ExtensionTokensManager).createAuthTokenCache(r);e.getToken(),s=d(a,o),s.length&&(s.forEach((t=>e.getToken({resourceName:t}))),c.trace({source:"ReactViewPrewarmer",action:"PrefetchCustomToken",name:n,extension:r,data:{resourceNames:s}}))}return s},t.getShellStatePusher=function(t){const{diContainer:o,flights:i,bladeLoadInfo:d,lifetime:m,provisioningContextDeferred:u,reactBootPayloadPromise:p}=t,g={},f=(e,t)=>(g[t]=Date.now(),e()),w=MsPortalFx.require("MsPortalImpl/ReactViews/ShellStateHelpers"),{extensionName:P,viewName:R,bladeSequenceNumber:T}=d,S=(0,n.getEarlyViewModelTelemetryContext)(P+"/"+R,T),h=i.reactMRUTokenFetch?f((()=>l.get("MsPortalImpl/Services/Services.PrefetchExtensionTokens","getPrefetchableTokensForExtension").then((e=>e(o,P)))),"extensionTokens"):null;return t=>{const{port:n,networkThrottlingEnabled:d,determineParams:v,viewMetadata:I}=t,C=async(e,t,...[o])=>{const a=async a=>{const i={[e]:{...!a&&{result:await MsPortalFx.Base.Promises.cancelOnDispose(m,t.then((e=>({result:e})),(t=>{const r=(0,s.decycle)(t);return M(e,r,"error"),{error:r}}))),calleeEndTime:Date.now()},...a&&{calleeStartTime:g[e]},...o&&{options:o},addToPerfTelemetry:!d}};n.postMessage({signature:r.reactFrameSignature,kind:3,data:{type:"shellstate",shellState:i}})};a(!0),a(!1)},M=(e,t,r="pushed")=>{FxImpl.TelemetryContext.usingState((()=>{c.trace({action:e+"Cache",actionModifier:r,data:t,source:"ReactFramePrewarmer"})}),S)};Promise.all([w,p]).then((([t,r])=>{const{isCreateBlade:n,resourceId:s,doesProvisioning:l,containsBrowseComponents:c}=t.determineBladeUseType(v);i.earlyEssentialsInfo&&s&&C("essentialsResourceInfo",f((()=>t.fetchEssentialsResourceInfo(s,m)),"essentialsResourceInfo"),{resourceId:s,includeTags:!0}).then((()=>{M("essentialsResourceInfo")}));const d=I.doesProvisioning;if(n||l||d){const e=f((()=>t.fetchCreateInitialValues(o)),"initialDropdownValues");C("initialDropdownValues",e).then((()=>{M("initialDropdownValues")})),e.then((e=>{l||d?u.resolve(t.stubProvisioningContext(e)):u.resolve(void 0);const r=e?.subscriptionIds?.[0];if(r){const e="createstorageaccount.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.Storage/storageAccounts"]}||"virtualnetworkcreatev3.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.Network/virtualNetworks"]}||"publicipaddresscreate.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.Network/publicIPAddresses"]}||"createaksbladev2.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.ContainerService/managedClusters"]}||"createautomatic.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.ContainerService/managedClusters"]}||"createcomputefleet.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.AzureFleet/fleets"]}||"createazurefleetmanager.reactview"===R.toLowerCase()&&{resourceTypes:["Microsoft.ContainerService/fleets"]}||"createexperience.reactview"===R.toLowerCase()&&{}||"simplecreate.reactview"===R.toLowerCase()&&{};if(e){const a=e.resourceTypes;C("locationsAndResourceTypesForCreate",f((()=>t.getDefaultLocationsForCreateFetcher(o,a,r)),"locationsAndResourceTypesForCreate"),{subscriptionId:r,resourceTypes:a}).then((()=>{M("locationsAndResourceTypesForCreate",{resourceTypes:a})}))}C("resourceGroups",f((()=>t.fetchDefaultResourceGroups(r)),"resourceGroups"),{subscriptionIds:[r]}).then((()=>{M("resourceGroups")}))}}))}else u.resolve(void 0);const p=o.get(a.ReactQueryStoreManager).getViewStore(P,T,m);c&&new Promise(((t,r)=>{e(["./Browse.Prewarmer"],t,r)})).then((({prewarmBrowseFrame:e})=>{e(R,v,p)}))})),h?.then((e=>{if((e?.length||0)>=0){const t=e.map((({resource:e})=>({resourceName:e})));C("extensionTokens",l.get("MsPortalImpl/Services/Services.PrefetchExtensionTokens","resolveTokenPromisesToTokenMap").then((t=>t(e,((e,t)=>M("extensionTokens",{errorMessage:`Failed to prefetch ${e}`,error:t},"error"))))),t).then((()=>{M("extensionTokens",t)}))}}))}},t.getPrefetchableTokenNames=d})),
define("MsPortalImpl/ReactViews/ReactFrame.ViewLoader",["require","exports","MsPortalImpl/Services/Services.ExtensionStorageManager","MsPortalImpl/Extension/ExtensionManagerOptions","MsPortalImpl/Base/Themes","FxInternal/AsyncLoader","MsPortalImpl/ReactViews/ReactFrame.CopilotConfig","MsPortalImpl/ReactViews/ReactFrame.Constants","MsPortalImpl/ReactViews/ReactFrame.ViewPrefetcher","MsPortalImpl/ReactViews/ReactFrame.DevTools","MsPortalImpl/ReactViews/ReactFrame.Utils","MsPortalImpl/ReactViews/ReactQueryStore"],(function(e,t,r,o,a,n,s,i,l,c,d,m){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.loadReactViewIntoFrame=void 0;var u=MsPortalFx.Base.Diagnostics.Telemetry;const p=MsPortalFx.isFeatureEnabled("verifytopleveldomains"),g=(0,d.getBrowserTabId)();t.loadReactViewIntoFrame=function(e){const{bladeSequenceNumber:t,diContainer:f,extensionName:w,flights:P,frameLifetime:R,inContextPane:T,parameters:S,provisioningContextDeferred:h,reactFramePromise:v,rpcClient:I,viewLoadingStartedDeferred:C,viewName:M}=e;let F=Date.now();const x=e.frame?.id??"No frame",y=u.startTrace({action:"ReactViewLoad",source:"Prewarmer",actionModifier:"mark",data:{extensionName:w,viewName:M,frameId:x}}),E=f.get(o.PostBootCache).get(w),k=f.get(m.ReactQueryStoreManager).getViewStore(w,t,R);(0,l.prefetchReactQueries)({queryStore:k,diContainer:f});const D=(0,l.getShellStatePusher)({diContainer:f,lifetime:R,flights:P,bladeLoadInfo:{extensionName:w,viewName:M,bladeSequenceNumber:t},provisioningContextDeferred:h,reactBootPayloadPromise:E}),b=(0,d.watchFirstHiddenAndOffline)(R),N=`Extension/${w}/Blade/${M}`,{completePerfToolApplication:V,networkThrottlingEnabled:O,networkThrottlingPromise:_,profileOnLoad:L,toggleDevToolsPromise:A}=(0,c.applyPerfToolsToReactFrame)({bladeId:N,diContainer:f,extensionName:w,getAsyncEndTime:()=>B,renderStart:F,updateRenderStart:e=>{F=e},reactFramePromise:v}),q="HubsExtension"===w?Promise.resolve(null):f.getAsync(n.get("MsPortalImpl/Services/Services.CopilotReactViewChannelFactory","ReactViewChannelFactory")).then((e=>e.createChannel(R,N,t)));let B;return Promise.all([Promise.all([f.get(r.ExtensionStorageManager).getStorageForExtension(w),E,MsPortalFx.require("MsPortalImpl/ReactViews/ReactFrameBinder"),v.then((e=>(C.resolve(),e))),f.get(s.CopilotFxRequireConfigSource).getRequireConfig(w),q]).then((e=>(B=Date.now(),e))),_,A]).then((([[r,o,n,s,c,m],u,h])=>{const v=r.serialize(),{port:C}=n.loadModel(I,w),x=ko.toJS(S),E=f.get(a.ThemeManager),N=e=>(e.blockedHosts=new Set(MsPortalEarly.blockedHosts),e),_=N(o.requireConfig),{id:A,url:q}=M&&(0,d.getModuleIdAndUrl)(M,_);c=c&&N(c);const B=M&&`${M.substring(0,M.length-10)}.DataFetcher`,z=B&&(0,d.getModuleIdAndUrl)(B,_).id,G=(0,l.prefetchTokens)({diContainer:f,extensionName:w,mergedConfig:_,viewModuleId:A,viewName:M}),U=o.extensionEnvironment.sdkEnv?.viewMetadata,H={...U?.["*"],...U?.[M]};s.supportsFrameReuse=Boolean(P.recycle&&H.supportsFrameReuse),s.onDisposed=()=>{s.onDisposed=null,R.dispose()};const Q={viewName:M,sequenceNumber:t};FxImpl.Extension.onNewReactViewEndPoint.invoke(I,w,Q),R.registerForDispose((()=>{FxImpl.Extension.onReactViewDisposed.invoke(I,w,Q)}));const K=[{groupName:"ReactView boot",name:"loadReactView",timeStamp:F},{groupName:"ReactView boot",name:"loadReactView",timeStamp:Date.now()},{groupName:"ReactView boot",name:"early",timeStamp:Date.now()}];return V(s,v.sessionStorage,h),s.element.name=M,s.port.postMessage({signature:i.reactFrameSignature,kind:3,data:{requireConfig:!s.initialized&&M&&_,initModules:[A],parameters:x,type:"early",environment:!s.initialized&&o.extensionEnvironment,features:!s.initialized&&o.features,perfTelemetry:{experiments:{recycle:P.recycle,fluentPrewarmStrategy:P.fluentPrewarmStrategy,forceReact18:P.forceReact18,prewarmFluentUI9:P.prewarmFluentUI9,preloadReactModules:P.preloadReactModules},frameReused:s.reused},internalEnv:{blockUntrustedDomains:FxImpl.internalEnv.blockUntrustedDomains,azsEndpoints:FxImpl.internalEnv.azsEndpoints,fxTrustedDomains:MsPortalFx.getEnvironmentValue("trustedDomains")},fetcherId:z,serializedStorage:v,sessionId:MsPortalFx.sessionId,browserTabId:g,tokenResourceNames:G,isMenuBladeContent:e.isMenuBladeContent,perfLogEntries:K,renderStart:F,azHostId:t,queryStoreEntries:k.getEntries(),verifyLinks:p,theme:{mode:E.currentTheme().mode,highContrastMode:E.highContrastMode()},name:M,inContextPane:T,profileOnLoad:L,networkRequestDurations:u,entryPointName:e.entryPointName,entryPointArgs:e.entryPointArgs,copilotFxRequireConfig:c}},[C,...m?[m]:[]]),D({port:s.port,viewName:M,viewMetadata:H,networkThrottlingEnabled:O,determineParams:{requireConfig:_,viewModuleId:A,viewName:M,url:q,parameters:S}}),s.model=n.loadModelForView(I,_,w,M,x),s.getFirstHiddenOrOfflineTime=b,s.initialized=!0,{traceKey:y}})).catch((e=>(u.trace({source:"ReactViewPrewarmer",action:"SetLatestError",actionModifier:"cancel",data:{error:MsPortalFx.getLogFriendlyMessage(e),extensionName:w,viewName:M,frameId:x}}),{traceKey:y})))}}));